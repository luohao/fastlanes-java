package com.github.luohao.fastlanes.bitpack;

import java.util.Arrays;
import jdk.incubator.vector.IntVector;
import jdk.incubator.vector.VectorOperators;

public class VectorIntegerPacker {
	public static final int MASK0 = (int)((1L << 0) - 1);

	public static final int MASK1 = (int)((1L << 1) - 1);

	public static final int MASK2 = (int)((1L << 2) - 1);

	public static final int MASK3 = (int)((1L << 3) - 1);

	public static final int MASK4 = (int)((1L << 4) - 1);

	public static final int MASK5 = (int)((1L << 5) - 1);

	public static final int MASK6 = (int)((1L << 6) - 1);

	public static final int MASK7 = (int)((1L << 7) - 1);

	public static final int MASK8 = (int)((1L << 8) - 1);

	public static final int MASK9 = (int)((1L << 9) - 1);

	public static final int MASK10 = (int)((1L << 10) - 1);

	public static final int MASK11 = (int)((1L << 11) - 1);

	public static final int MASK12 = (int)((1L << 12) - 1);

	public static final int MASK13 = (int)((1L << 13) - 1);

	public static final int MASK14 = (int)((1L << 14) - 1);

	public static final int MASK15 = (int)((1L << 15) - 1);

	public static final int MASK16 = (int)((1L << 16) - 1);

	public static final int MASK17 = (int)((1L << 17) - 1);

	public static final int MASK18 = (int)((1L << 18) - 1);

	public static final int MASK19 = (int)((1L << 19) - 1);

	public static final int MASK20 = (int)((1L << 20) - 1);

	public static final int MASK21 = (int)((1L << 21) - 1);

	public static final int MASK22 = (int)((1L << 22) - 1);

	public static final int MASK23 = (int)((1L << 23) - 1);

	public static final int MASK24 = (int)((1L << 24) - 1);

	public static final int MASK25 = (int)((1L << 25) - 1);

	public static final int MASK26 = (int)((1L << 26) - 1);

	public static final int MASK27 = (int)((1L << 27) - 1);

	public static final int MASK28 = (int)((1L << 28) - 1);

	public static final int MASK29 = (int)((1L << 29) - 1);

	public static final int MASK30 = (int)((1L << 30) - 1);

	public static final int MASK31 = (int)((1L << 31) - 1);

	public static void pack0(int[] input, int[] output) {
		int stride = IntVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 32;
		for (int i = 0; i < 32 / stride; i++) {
		}
	}

	public static void pack1(int[] input, int[] output) {
		int stride = IntVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 32;
		for (int i = 0; i < 32 / stride; i++) {
			IntVector src;
			IntVector tmp;
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 0 + i * stride);
			src = src.and(MASK1);
			tmp = src;
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 128 + i * stride);
			src = src.and(MASK1);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 1));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 256 + i * stride);
			src = src.and(MASK1);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 2));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 384 + i * stride);
			src = src.and(MASK1);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 3));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 512 + i * stride);
			src = src.and(MASK1);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 4));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 640 + i * stride);
			src = src.and(MASK1);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 5));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 768 + i * stride);
			src = src.and(MASK1);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 6));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 896 + i * stride);
			src = src.and(MASK1);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 7));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 64 + i * stride);
			src = src.and(MASK1);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 192 + i * stride);
			src = src.and(MASK1);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 9));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 320 + i * stride);
			src = src.and(MASK1);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 10));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 448 + i * stride);
			src = src.and(MASK1);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 11));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 576 + i * stride);
			src = src.and(MASK1);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 12));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 704 + i * stride);
			src = src.and(MASK1);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 13));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 832 + i * stride);
			src = src.and(MASK1);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 14));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 960 + i * stride);
			src = src.and(MASK1);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 15));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 32 + i * stride);
			src = src.and(MASK1);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 160 + i * stride);
			src = src.and(MASK1);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 17));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 288 + i * stride);
			src = src.and(MASK1);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 18));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 416 + i * stride);
			src = src.and(MASK1);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 19));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 544 + i * stride);
			src = src.and(MASK1);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 20));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 672 + i * stride);
			src = src.and(MASK1);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 21));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 800 + i * stride);
			src = src.and(MASK1);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 22));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 928 + i * stride);
			src = src.and(MASK1);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 23));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 96 + i * stride);
			src = src.and(MASK1);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 224 + i * stride);
			src = src.and(MASK1);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 25));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 352 + i * stride);
			src = src.and(MASK1);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 26));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 480 + i * stride);
			src = src.and(MASK1);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 27));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 608 + i * stride);
			src = src.and(MASK1);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 28));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 736 + i * stride);
			src = src.and(MASK1);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 29));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 864 + i * stride);
			src = src.and(MASK1);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 30));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 992 + i * stride);
			src = src.and(MASK1);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 31));
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 1);
		}
	}

	public static void pack2(int[] input, int[] output) {
		int stride = IntVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 32;
		for (int i = 0; i < 32 / stride; i++) {
			IntVector src;
			IntVector tmp;
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 0 + i * stride);
			src = src.and(MASK2);
			tmp = src;
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 128 + i * stride);
			src = src.and(MASK2);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 2));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 256 + i * stride);
			src = src.and(MASK2);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 4));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 384 + i * stride);
			src = src.and(MASK2);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 6));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 512 + i * stride);
			src = src.and(MASK2);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 640 + i * stride);
			src = src.and(MASK2);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 10));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 768 + i * stride);
			src = src.and(MASK2);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 12));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 896 + i * stride);
			src = src.and(MASK2);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 14));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 64 + i * stride);
			src = src.and(MASK2);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 192 + i * stride);
			src = src.and(MASK2);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 18));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 320 + i * stride);
			src = src.and(MASK2);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 20));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 448 + i * stride);
			src = src.and(MASK2);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 22));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 576 + i * stride);
			src = src.and(MASK2);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 704 + i * stride);
			src = src.and(MASK2);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 26));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 832 + i * stride);
			src = src.and(MASK2);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 28));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 960 + i * stride);
			src = src.and(MASK2);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 30));
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 32 + i * stride);
			src = src.and(MASK2);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 160 + i * stride);
			src = src.and(MASK2);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 2));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 288 + i * stride);
			src = src.and(MASK2);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 4));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 416 + i * stride);
			src = src.and(MASK2);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 6));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 544 + i * stride);
			src = src.and(MASK2);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 672 + i * stride);
			src = src.and(MASK2);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 10));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 800 + i * stride);
			src = src.and(MASK2);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 12));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 928 + i * stride);
			src = src.and(MASK2);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 14));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 96 + i * stride);
			src = src.and(MASK2);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 224 + i * stride);
			src = src.and(MASK2);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 18));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 352 + i * stride);
			src = src.and(MASK2);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 20));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 480 + i * stride);
			src = src.and(MASK2);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 22));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 608 + i * stride);
			src = src.and(MASK2);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 736 + i * stride);
			src = src.and(MASK2);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 26));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 864 + i * stride);
			src = src.and(MASK2);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 28));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 992 + i * stride);
			src = src.and(MASK2);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 30));
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2);
		}
	}

	public static void pack3(int[] input, int[] output) {
		int stride = IntVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 32;
		for (int i = 0; i < 32 / stride; i++) {
			IntVector src;
			IntVector tmp;
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 0 + i * stride);
			src = src.and(MASK3);
			tmp = src;
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 128 + i * stride);
			src = src.and(MASK3);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 3));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 256 + i * stride);
			src = src.and(MASK3);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 6));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 384 + i * stride);
			src = src.and(MASK3);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 9));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 512 + i * stride);
			src = src.and(MASK3);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 12));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 640 + i * stride);
			src = src.and(MASK3);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 15));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 768 + i * stride);
			src = src.and(MASK3);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 18));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 896 + i * stride);
			src = src.and(MASK3);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 21));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 64 + i * stride);
			src = src.and(MASK3);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 192 + i * stride);
			src = src.and(MASK3);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 27));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 320 + i * stride);
			src = src.and(MASK3);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 30));
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 448 + i * stride);
			src = src.and(MASK3);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 1));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 576 + i * stride);
			src = src.and(MASK3);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 4));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 704 + i * stride);
			src = src.and(MASK3);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 7));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 832 + i * stride);
			src = src.and(MASK3);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 10));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 960 + i * stride);
			src = src.and(MASK3);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 13));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 32 + i * stride);
			src = src.and(MASK3);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 160 + i * stride);
			src = src.and(MASK3);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 19));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 288 + i * stride);
			src = src.and(MASK3);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 22));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 416 + i * stride);
			src = src.and(MASK3);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 25));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 544 + i * stride);
			src = src.and(MASK3);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 28));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 672 + i * stride);
			src = src.and(MASK3);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 31));
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 1);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 800 + i * stride);
			src = src.and(MASK3);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 2));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 928 + i * stride);
			src = src.and(MASK3);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 5));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 96 + i * stride);
			src = src.and(MASK3);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 224 + i * stride);
			src = src.and(MASK3);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 11));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 352 + i * stride);
			src = src.and(MASK3);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 14));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 480 + i * stride);
			src = src.and(MASK3);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 17));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 608 + i * stride);
			src = src.and(MASK3);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 20));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 736 + i * stride);
			src = src.and(MASK3);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 23));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 864 + i * stride);
			src = src.and(MASK3);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 26));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 992 + i * stride);
			src = src.and(MASK3);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 29));
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 3);
		}
	}

	public static void pack4(int[] input, int[] output) {
		int stride = IntVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 32;
		for (int i = 0; i < 32 / stride; i++) {
			IntVector src;
			IntVector tmp;
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 0 + i * stride);
			src = src.and(MASK4);
			tmp = src;
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 128 + i * stride);
			src = src.and(MASK4);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 4));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 256 + i * stride);
			src = src.and(MASK4);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 384 + i * stride);
			src = src.and(MASK4);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 12));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 512 + i * stride);
			src = src.and(MASK4);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 640 + i * stride);
			src = src.and(MASK4);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 20));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 768 + i * stride);
			src = src.and(MASK4);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 896 + i * stride);
			src = src.and(MASK4);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 28));
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 64 + i * stride);
			src = src.and(MASK4);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 192 + i * stride);
			src = src.and(MASK4);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 4));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 320 + i * stride);
			src = src.and(MASK4);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 448 + i * stride);
			src = src.and(MASK4);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 12));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 576 + i * stride);
			src = src.and(MASK4);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 704 + i * stride);
			src = src.and(MASK4);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 20));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 832 + i * stride);
			src = src.and(MASK4);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 960 + i * stride);
			src = src.and(MASK4);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 28));
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 32 + i * stride);
			src = src.and(MASK4);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 160 + i * stride);
			src = src.and(MASK4);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 4));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 288 + i * stride);
			src = src.and(MASK4);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 416 + i * stride);
			src = src.and(MASK4);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 12));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 544 + i * stride);
			src = src.and(MASK4);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 672 + i * stride);
			src = src.and(MASK4);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 20));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 800 + i * stride);
			src = src.and(MASK4);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 928 + i * stride);
			src = src.and(MASK4);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 28));
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 96 + i * stride);
			src = src.and(MASK4);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 224 + i * stride);
			src = src.and(MASK4);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 4));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 352 + i * stride);
			src = src.and(MASK4);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 480 + i * stride);
			src = src.and(MASK4);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 12));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 608 + i * stride);
			src = src.and(MASK4);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 736 + i * stride);
			src = src.and(MASK4);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 20));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 864 + i * stride);
			src = src.and(MASK4);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 992 + i * stride);
			src = src.and(MASK4);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 28));
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4);
		}
	}

	public static void pack5(int[] input, int[] output) {
		int stride = IntVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 32;
		for (int i = 0; i < 32 / stride; i++) {
			IntVector src;
			IntVector tmp;
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 0 + i * stride);
			src = src.and(MASK5);
			tmp = src;
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 128 + i * stride);
			src = src.and(MASK5);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 5));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 256 + i * stride);
			src = src.and(MASK5);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 10));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 384 + i * stride);
			src = src.and(MASK5);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 15));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 512 + i * stride);
			src = src.and(MASK5);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 20));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 640 + i * stride);
			src = src.and(MASK5);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 25));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 768 + i * stride);
			src = src.and(MASK5);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 30));
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 896 + i * stride);
			src = src.and(MASK5);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 3));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 64 + i * stride);
			src = src.and(MASK5);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 192 + i * stride);
			src = src.and(MASK5);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 13));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 320 + i * stride);
			src = src.and(MASK5);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 18));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 448 + i * stride);
			src = src.and(MASK5);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 23));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 576 + i * stride);
			src = src.and(MASK5);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 28));
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 704 + i * stride);
			src = src.and(MASK5);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 1));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 832 + i * stride);
			src = src.and(MASK5);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 6));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 960 + i * stride);
			src = src.and(MASK5);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 11));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 32 + i * stride);
			src = src.and(MASK5);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 160 + i * stride);
			src = src.and(MASK5);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 21));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 288 + i * stride);
			src = src.and(MASK5);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 26));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 416 + i * stride);
			src = src.and(MASK5);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 31));
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 1);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 544 + i * stride);
			src = src.and(MASK5);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 4));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 672 + i * stride);
			src = src.and(MASK5);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 9));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 800 + i * stride);
			src = src.and(MASK5);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 14));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 928 + i * stride);
			src = src.and(MASK5);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 19));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 96 + i * stride);
			src = src.and(MASK5);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 224 + i * stride);
			src = src.and(MASK5);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 29));
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 3);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 352 + i * stride);
			src = src.and(MASK5);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 2));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 480 + i * stride);
			src = src.and(MASK5);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 7));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 608 + i * stride);
			src = src.and(MASK5);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 12));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 736 + i * stride);
			src = src.and(MASK5);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 17));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 864 + i * stride);
			src = src.and(MASK5);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 22));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 992 + i * stride);
			src = src.and(MASK5);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 27));
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 5);
		}
	}

	public static void pack6(int[] input, int[] output) {
		int stride = IntVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 32;
		for (int i = 0; i < 32 / stride; i++) {
			IntVector src;
			IntVector tmp;
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 0 + i * stride);
			src = src.and(MASK6);
			tmp = src;
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 128 + i * stride);
			src = src.and(MASK6);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 6));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 256 + i * stride);
			src = src.and(MASK6);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 12));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 384 + i * stride);
			src = src.and(MASK6);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 18));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 512 + i * stride);
			src = src.and(MASK6);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 640 + i * stride);
			src = src.and(MASK6);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 30));
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 768 + i * stride);
			src = src.and(MASK6);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 4));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 896 + i * stride);
			src = src.and(MASK6);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 10));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 64 + i * stride);
			src = src.and(MASK6);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 192 + i * stride);
			src = src.and(MASK6);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 22));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 320 + i * stride);
			src = src.and(MASK6);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 28));
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 448 + i * stride);
			src = src.and(MASK6);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 2));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 576 + i * stride);
			src = src.and(MASK6);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 704 + i * stride);
			src = src.and(MASK6);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 14));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 832 + i * stride);
			src = src.and(MASK6);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 20));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 960 + i * stride);
			src = src.and(MASK6);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 26));
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 32 + i * stride);
			src = src.and(MASK6);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 160 + i * stride);
			src = src.and(MASK6);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 6));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 288 + i * stride);
			src = src.and(MASK6);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 12));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 416 + i * stride);
			src = src.and(MASK6);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 18));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 544 + i * stride);
			src = src.and(MASK6);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 672 + i * stride);
			src = src.and(MASK6);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 30));
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 800 + i * stride);
			src = src.and(MASK6);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 4));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 928 + i * stride);
			src = src.and(MASK6);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 10));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 96 + i * stride);
			src = src.and(MASK6);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 224 + i * stride);
			src = src.and(MASK6);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 22));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 352 + i * stride);
			src = src.and(MASK6);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 28));
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 480 + i * stride);
			src = src.and(MASK6);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 2));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 608 + i * stride);
			src = src.and(MASK6);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 736 + i * stride);
			src = src.and(MASK6);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 14));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 864 + i * stride);
			src = src.and(MASK6);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 20));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 992 + i * stride);
			src = src.and(MASK6);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 26));
			tmp.intoArray(output, 160 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6);
		}
	}

	public static void pack7(int[] input, int[] output) {
		int stride = IntVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 32;
		for (int i = 0; i < 32 / stride; i++) {
			IntVector src;
			IntVector tmp;
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 0 + i * stride);
			src = src.and(MASK7);
			tmp = src;
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 128 + i * stride);
			src = src.and(MASK7);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 7));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 256 + i * stride);
			src = src.and(MASK7);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 14));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 384 + i * stride);
			src = src.and(MASK7);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 21));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 512 + i * stride);
			src = src.and(MASK7);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 28));
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 640 + i * stride);
			src = src.and(MASK7);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 3));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 768 + i * stride);
			src = src.and(MASK7);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 10));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 896 + i * stride);
			src = src.and(MASK7);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 17));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 64 + i * stride);
			src = src.and(MASK7);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 192 + i * stride);
			src = src.and(MASK7);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 31));
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 1);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 320 + i * stride);
			src = src.and(MASK7);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 6));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 448 + i * stride);
			src = src.and(MASK7);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 13));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 576 + i * stride);
			src = src.and(MASK7);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 20));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 704 + i * stride);
			src = src.and(MASK7);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 27));
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 5);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 832 + i * stride);
			src = src.and(MASK7);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 2));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 960 + i * stride);
			src = src.and(MASK7);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 9));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 32 + i * stride);
			src = src.and(MASK7);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 160 + i * stride);
			src = src.and(MASK7);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 23));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 288 + i * stride);
			src = src.and(MASK7);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 30));
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 416 + i * stride);
			src = src.and(MASK7);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 5));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 544 + i * stride);
			src = src.and(MASK7);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 12));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 672 + i * stride);
			src = src.and(MASK7);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 19));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 800 + i * stride);
			src = src.and(MASK7);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 26));
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 928 + i * stride);
			src = src.and(MASK7);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 1));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 96 + i * stride);
			src = src.and(MASK7);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 224 + i * stride);
			src = src.and(MASK7);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 15));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 352 + i * stride);
			src = src.and(MASK7);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 22));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 480 + i * stride);
			src = src.and(MASK7);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 29));
			tmp.intoArray(output, 160 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 3);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 608 + i * stride);
			src = src.and(MASK7);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 4));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 736 + i * stride);
			src = src.and(MASK7);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 11));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 864 + i * stride);
			src = src.and(MASK7);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 18));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 992 + i * stride);
			src = src.and(MASK7);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 25));
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 7);
		}
	}

	public static void pack8(int[] input, int[] output) {
		int stride = IntVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 32;
		for (int i = 0; i < 32 / stride; i++) {
			IntVector src;
			IntVector tmp;
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 0 + i * stride);
			src = src.and(MASK8);
			tmp = src;
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 128 + i * stride);
			src = src.and(MASK8);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 256 + i * stride);
			src = src.and(MASK8);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 384 + i * stride);
			src = src.and(MASK8);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 512 + i * stride);
			src = src.and(MASK8);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 640 + i * stride);
			src = src.and(MASK8);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 768 + i * stride);
			src = src.and(MASK8);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 896 + i * stride);
			src = src.and(MASK8);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 64 + i * stride);
			src = src.and(MASK8);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 192 + i * stride);
			src = src.and(MASK8);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 320 + i * stride);
			src = src.and(MASK8);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 448 + i * stride);
			src = src.and(MASK8);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 576 + i * stride);
			src = src.and(MASK8);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 704 + i * stride);
			src = src.and(MASK8);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 832 + i * stride);
			src = src.and(MASK8);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 960 + i * stride);
			src = src.and(MASK8);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 32 + i * stride);
			src = src.and(MASK8);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 160 + i * stride);
			src = src.and(MASK8);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 288 + i * stride);
			src = src.and(MASK8);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 416 + i * stride);
			src = src.and(MASK8);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 544 + i * stride);
			src = src.and(MASK8);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 672 + i * stride);
			src = src.and(MASK8);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 800 + i * stride);
			src = src.and(MASK8);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 928 + i * stride);
			src = src.and(MASK8);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 160 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 96 + i * stride);
			src = src.and(MASK8);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 224 + i * stride);
			src = src.and(MASK8);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 352 + i * stride);
			src = src.and(MASK8);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 480 + i * stride);
			src = src.and(MASK8);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 608 + i * stride);
			src = src.and(MASK8);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 736 + i * stride);
			src = src.and(MASK8);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 864 + i * stride);
			src = src.and(MASK8);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 992 + i * stride);
			src = src.and(MASK8);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 224 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
		}
	}

	public static void pack9(int[] input, int[] output) {
		int stride = IntVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 32;
		for (int i = 0; i < 32 / stride; i++) {
			IntVector src;
			IntVector tmp;
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 0 + i * stride);
			src = src.and(MASK9);
			tmp = src;
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 128 + i * stride);
			src = src.and(MASK9);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 9));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 256 + i * stride);
			src = src.and(MASK9);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 18));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 384 + i * stride);
			src = src.and(MASK9);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 27));
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 5);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 512 + i * stride);
			src = src.and(MASK9);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 4));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 640 + i * stride);
			src = src.and(MASK9);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 13));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 768 + i * stride);
			src = src.and(MASK9);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 22));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 896 + i * stride);
			src = src.and(MASK9);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 31));
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 1);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 64 + i * stride);
			src = src.and(MASK9);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 192 + i * stride);
			src = src.and(MASK9);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 17));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 320 + i * stride);
			src = src.and(MASK9);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 26));
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 448 + i * stride);
			src = src.and(MASK9);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 3));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 576 + i * stride);
			src = src.and(MASK9);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 12));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 704 + i * stride);
			src = src.and(MASK9);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 21));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 832 + i * stride);
			src = src.and(MASK9);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 30));
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 960 + i * stride);
			src = src.and(MASK9);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 7));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 32 + i * stride);
			src = src.and(MASK9);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 160 + i * stride);
			src = src.and(MASK9);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 25));
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 7);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 288 + i * stride);
			src = src.and(MASK9);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 2));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 416 + i * stride);
			src = src.and(MASK9);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 11));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 544 + i * stride);
			src = src.and(MASK9);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 20));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 672 + i * stride);
			src = src.and(MASK9);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 29));
			tmp.intoArray(output, 160 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 3);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 800 + i * stride);
			src = src.and(MASK9);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 6));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 928 + i * stride);
			src = src.and(MASK9);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 15));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 96 + i * stride);
			src = src.and(MASK9);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 224 + i * stride);
			src = src.and(MASK9);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 1));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 352 + i * stride);
			src = src.and(MASK9);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 10));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 480 + i * stride);
			src = src.and(MASK9);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 19));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 608 + i * stride);
			src = src.and(MASK9);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 28));
			tmp.intoArray(output, 224 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 736 + i * stride);
			src = src.and(MASK9);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 5));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 864 + i * stride);
			src = src.and(MASK9);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 14));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 992 + i * stride);
			src = src.and(MASK9);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 23));
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 9);
		}
	}

	public static void pack10(int[] input, int[] output) {
		int stride = IntVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 32;
		for (int i = 0; i < 32 / stride; i++) {
			IntVector src;
			IntVector tmp;
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 0 + i * stride);
			src = src.and(MASK10);
			tmp = src;
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 128 + i * stride);
			src = src.and(MASK10);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 10));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 256 + i * stride);
			src = src.and(MASK10);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 20));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 384 + i * stride);
			src = src.and(MASK10);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 30));
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 512 + i * stride);
			src = src.and(MASK10);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 640 + i * stride);
			src = src.and(MASK10);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 18));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 768 + i * stride);
			src = src.and(MASK10);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 28));
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 896 + i * stride);
			src = src.and(MASK10);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 6));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 64 + i * stride);
			src = src.and(MASK10);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 192 + i * stride);
			src = src.and(MASK10);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 26));
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 320 + i * stride);
			src = src.and(MASK10);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 4));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 448 + i * stride);
			src = src.and(MASK10);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 14));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 576 + i * stride);
			src = src.and(MASK10);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 704 + i * stride);
			src = src.and(MASK10);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 2));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 832 + i * stride);
			src = src.and(MASK10);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 12));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 960 + i * stride);
			src = src.and(MASK10);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 22));
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 32 + i * stride);
			src = src.and(MASK10);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 160 + i * stride);
			src = src.and(MASK10);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 10));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 288 + i * stride);
			src = src.and(MASK10);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 20));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 416 + i * stride);
			src = src.and(MASK10);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 30));
			tmp.intoArray(output, 160 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 544 + i * stride);
			src = src.and(MASK10);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 672 + i * stride);
			src = src.and(MASK10);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 18));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 800 + i * stride);
			src = src.and(MASK10);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 28));
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 928 + i * stride);
			src = src.and(MASK10);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 6));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 96 + i * stride);
			src = src.and(MASK10);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 224 + i * stride);
			src = src.and(MASK10);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 26));
			tmp.intoArray(output, 224 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 352 + i * stride);
			src = src.and(MASK10);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 4));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 480 + i * stride);
			src = src.and(MASK10);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 14));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 608 + i * stride);
			src = src.and(MASK10);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 736 + i * stride);
			src = src.and(MASK10);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 2));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 864 + i * stride);
			src = src.and(MASK10);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 12));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 992 + i * stride);
			src = src.and(MASK10);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 22));
			tmp.intoArray(output, 288 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10);
		}
	}

	public static void pack11(int[] input, int[] output) {
		int stride = IntVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 32;
		for (int i = 0; i < 32 / stride; i++) {
			IntVector src;
			IntVector tmp;
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 0 + i * stride);
			src = src.and(MASK11);
			tmp = src;
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 128 + i * stride);
			src = src.and(MASK11);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 11));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 256 + i * stride);
			src = src.and(MASK11);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 22));
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 384 + i * stride);
			src = src.and(MASK11);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 1));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 512 + i * stride);
			src = src.and(MASK11);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 12));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 640 + i * stride);
			src = src.and(MASK11);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 23));
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 9);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 768 + i * stride);
			src = src.and(MASK11);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 2));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 896 + i * stride);
			src = src.and(MASK11);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 13));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 64 + i * stride);
			src = src.and(MASK11);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 192 + i * stride);
			src = src.and(MASK11);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 3));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 320 + i * stride);
			src = src.and(MASK11);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 14));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 448 + i * stride);
			src = src.and(MASK11);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 25));
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 7);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 576 + i * stride);
			src = src.and(MASK11);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 4));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 704 + i * stride);
			src = src.and(MASK11);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 15));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 832 + i * stride);
			src = src.and(MASK11);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 26));
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 960 + i * stride);
			src = src.and(MASK11);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 5));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 32 + i * stride);
			src = src.and(MASK11);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 160 + i * stride);
			src = src.and(MASK11);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 27));
			tmp.intoArray(output, 160 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 5);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 288 + i * stride);
			src = src.and(MASK11);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 6));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 416 + i * stride);
			src = src.and(MASK11);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 17));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 544 + i * stride);
			src = src.and(MASK11);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 28));
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 672 + i * stride);
			src = src.and(MASK11);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 7));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 800 + i * stride);
			src = src.and(MASK11);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 18));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 928 + i * stride);
			src = src.and(MASK11);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 29));
			tmp.intoArray(output, 224 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 3);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 96 + i * stride);
			src = src.and(MASK11);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 224 + i * stride);
			src = src.and(MASK11);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 19));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 352 + i * stride);
			src = src.and(MASK11);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 30));
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 480 + i * stride);
			src = src.and(MASK11);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 9));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 608 + i * stride);
			src = src.and(MASK11);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 20));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 736 + i * stride);
			src = src.and(MASK11);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 31));
			tmp.intoArray(output, 288 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 1);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 864 + i * stride);
			src = src.and(MASK11);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 10));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 992 + i * stride);
			src = src.and(MASK11);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 21));
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 11);
		}
	}

	public static void pack12(int[] input, int[] output) {
		int stride = IntVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 32;
		for (int i = 0; i < 32 / stride; i++) {
			IntVector src;
			IntVector tmp;
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 0 + i * stride);
			src = src.and(MASK12);
			tmp = src;
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 128 + i * stride);
			src = src.and(MASK12);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 12));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 256 + i * stride);
			src = src.and(MASK12);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 384 + i * stride);
			src = src.and(MASK12);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 4));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 512 + i * stride);
			src = src.and(MASK12);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 640 + i * stride);
			src = src.and(MASK12);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 28));
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 768 + i * stride);
			src = src.and(MASK12);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 896 + i * stride);
			src = src.and(MASK12);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 20));
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 64 + i * stride);
			src = src.and(MASK12);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 192 + i * stride);
			src = src.and(MASK12);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 12));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 320 + i * stride);
			src = src.and(MASK12);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 448 + i * stride);
			src = src.and(MASK12);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 4));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 576 + i * stride);
			src = src.and(MASK12);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 704 + i * stride);
			src = src.and(MASK12);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 28));
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 832 + i * stride);
			src = src.and(MASK12);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 960 + i * stride);
			src = src.and(MASK12);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 20));
			tmp.intoArray(output, 160 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 32 + i * stride);
			src = src.and(MASK12);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 160 + i * stride);
			src = src.and(MASK12);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 12));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 288 + i * stride);
			src = src.and(MASK12);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 416 + i * stride);
			src = src.and(MASK12);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 4));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 544 + i * stride);
			src = src.and(MASK12);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 672 + i * stride);
			src = src.and(MASK12);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 28));
			tmp.intoArray(output, 224 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 800 + i * stride);
			src = src.and(MASK12);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 928 + i * stride);
			src = src.and(MASK12);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 20));
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 96 + i * stride);
			src = src.and(MASK12);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 224 + i * stride);
			src = src.and(MASK12);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 12));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 352 + i * stride);
			src = src.and(MASK12);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 288 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 480 + i * stride);
			src = src.and(MASK12);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 4));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 608 + i * stride);
			src = src.and(MASK12);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 736 + i * stride);
			src = src.and(MASK12);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 28));
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 864 + i * stride);
			src = src.and(MASK12);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 992 + i * stride);
			src = src.and(MASK12);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 20));
			tmp.intoArray(output, 352 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12);
		}
	}

	public static void pack13(int[] input, int[] output) {
		int stride = IntVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 32;
		for (int i = 0; i < 32 / stride; i++) {
			IntVector src;
			IntVector tmp;
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 0 + i * stride);
			src = src.and(MASK13);
			tmp = src;
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 128 + i * stride);
			src = src.and(MASK13);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 13));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 256 + i * stride);
			src = src.and(MASK13);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 26));
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 384 + i * stride);
			src = src.and(MASK13);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 7));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 512 + i * stride);
			src = src.and(MASK13);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 20));
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 640 + i * stride);
			src = src.and(MASK13);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 1));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 768 + i * stride);
			src = src.and(MASK13);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 14));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 896 + i * stride);
			src = src.and(MASK13);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 27));
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 5);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 64 + i * stride);
			src = src.and(MASK13);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 192 + i * stride);
			src = src.and(MASK13);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 21));
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 11);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 320 + i * stride);
			src = src.and(MASK13);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 2));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 448 + i * stride);
			src = src.and(MASK13);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 15));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 576 + i * stride);
			src = src.and(MASK13);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 28));
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 704 + i * stride);
			src = src.and(MASK13);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 9));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 832 + i * stride);
			src = src.and(MASK13);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 22));
			tmp.intoArray(output, 160 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 960 + i * stride);
			src = src.and(MASK13);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 3));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 32 + i * stride);
			src = src.and(MASK13);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 160 + i * stride);
			src = src.and(MASK13);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 29));
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 3);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 288 + i * stride);
			src = src.and(MASK13);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 10));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 416 + i * stride);
			src = src.and(MASK13);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 23));
			tmp.intoArray(output, 224 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 9);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 544 + i * stride);
			src = src.and(MASK13);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 4));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 672 + i * stride);
			src = src.and(MASK13);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 17));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 800 + i * stride);
			src = src.and(MASK13);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 30));
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 928 + i * stride);
			src = src.and(MASK13);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 11));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 96 + i * stride);
			src = src.and(MASK13);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 288 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 224 + i * stride);
			src = src.and(MASK13);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 5));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 352 + i * stride);
			src = src.and(MASK13);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 18));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 480 + i * stride);
			src = src.and(MASK13);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 31));
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 1);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 608 + i * stride);
			src = src.and(MASK13);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 12));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 736 + i * stride);
			src = src.and(MASK13);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 25));
			tmp.intoArray(output, 352 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 7);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 864 + i * stride);
			src = src.and(MASK13);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 6));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 992 + i * stride);
			src = src.and(MASK13);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 19));
			tmp.intoArray(output, 384 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 13);
		}
	}

	public static void pack14(int[] input, int[] output) {
		int stride = IntVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 32;
		for (int i = 0; i < 32 / stride; i++) {
			IntVector src;
			IntVector tmp;
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 0 + i * stride);
			src = src.and(MASK14);
			tmp = src;
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 128 + i * stride);
			src = src.and(MASK14);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 14));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 256 + i * stride);
			src = src.and(MASK14);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 28));
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 384 + i * stride);
			src = src.and(MASK14);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 10));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 512 + i * stride);
			src = src.and(MASK14);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 640 + i * stride);
			src = src.and(MASK14);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 6));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 768 + i * stride);
			src = src.and(MASK14);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 20));
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 896 + i * stride);
			src = src.and(MASK14);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 2));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 64 + i * stride);
			src = src.and(MASK14);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 192 + i * stride);
			src = src.and(MASK14);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 30));
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 320 + i * stride);
			src = src.and(MASK14);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 12));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 448 + i * stride);
			src = src.and(MASK14);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 26));
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 576 + i * stride);
			src = src.and(MASK14);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 704 + i * stride);
			src = src.and(MASK14);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 22));
			tmp.intoArray(output, 160 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 832 + i * stride);
			src = src.and(MASK14);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 4));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 960 + i * stride);
			src = src.and(MASK14);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 18));
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 32 + i * stride);
			src = src.and(MASK14);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 160 + i * stride);
			src = src.and(MASK14);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 14));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 288 + i * stride);
			src = src.and(MASK14);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 28));
			tmp.intoArray(output, 224 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 416 + i * stride);
			src = src.and(MASK14);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 10));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 544 + i * stride);
			src = src.and(MASK14);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 672 + i * stride);
			src = src.and(MASK14);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 6));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 800 + i * stride);
			src = src.and(MASK14);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 20));
			tmp.intoArray(output, 288 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 928 + i * stride);
			src = src.and(MASK14);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 2));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 96 + i * stride);
			src = src.and(MASK14);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 224 + i * stride);
			src = src.and(MASK14);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 30));
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 352 + i * stride);
			src = src.and(MASK14);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 12));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 480 + i * stride);
			src = src.and(MASK14);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 26));
			tmp.intoArray(output, 352 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 608 + i * stride);
			src = src.and(MASK14);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 736 + i * stride);
			src = src.and(MASK14);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 22));
			tmp.intoArray(output, 384 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 864 + i * stride);
			src = src.and(MASK14);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 4));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 992 + i * stride);
			src = src.and(MASK14);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 18));
			tmp.intoArray(output, 416 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14);
		}
	}

	public static void pack15(int[] input, int[] output) {
		int stride = IntVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 32;
		for (int i = 0; i < 32 / stride; i++) {
			IntVector src;
			IntVector tmp;
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 0 + i * stride);
			src = src.and(MASK15);
			tmp = src;
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 128 + i * stride);
			src = src.and(MASK15);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 15));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 256 + i * stride);
			src = src.and(MASK15);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 30));
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 384 + i * stride);
			src = src.and(MASK15);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 13));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 512 + i * stride);
			src = src.and(MASK15);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 28));
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 640 + i * stride);
			src = src.and(MASK15);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 11));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 768 + i * stride);
			src = src.and(MASK15);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 26));
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 896 + i * stride);
			src = src.and(MASK15);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 9));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 64 + i * stride);
			src = src.and(MASK15);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 192 + i * stride);
			src = src.and(MASK15);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 7));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 320 + i * stride);
			src = src.and(MASK15);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 22));
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 448 + i * stride);
			src = src.and(MASK15);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 5));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 576 + i * stride);
			src = src.and(MASK15);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 20));
			tmp.intoArray(output, 160 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 704 + i * stride);
			src = src.and(MASK15);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 3));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 832 + i * stride);
			src = src.and(MASK15);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 18));
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 960 + i * stride);
			src = src.and(MASK15);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 1));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 32 + i * stride);
			src = src.and(MASK15);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 160 + i * stride);
			src = src.and(MASK15);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 31));
			tmp.intoArray(output, 224 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 1);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 288 + i * stride);
			src = src.and(MASK15);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 14));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 416 + i * stride);
			src = src.and(MASK15);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 29));
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 3);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 544 + i * stride);
			src = src.and(MASK15);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 12));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 672 + i * stride);
			src = src.and(MASK15);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 27));
			tmp.intoArray(output, 288 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 5);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 800 + i * stride);
			src = src.and(MASK15);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 10));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 928 + i * stride);
			src = src.and(MASK15);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 25));
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 7);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 96 + i * stride);
			src = src.and(MASK15);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 224 + i * stride);
			src = src.and(MASK15);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 23));
			tmp.intoArray(output, 352 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 9);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 352 + i * stride);
			src = src.and(MASK15);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 6));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 480 + i * stride);
			src = src.and(MASK15);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 21));
			tmp.intoArray(output, 384 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 11);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 608 + i * stride);
			src = src.and(MASK15);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 4));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 736 + i * stride);
			src = src.and(MASK15);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 19));
			tmp.intoArray(output, 416 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 13);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 864 + i * stride);
			src = src.and(MASK15);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 2));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 992 + i * stride);
			src = src.and(MASK15);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 17));
			tmp.intoArray(output, 448 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 15);
		}
	}

	public static void pack16(int[] input, int[] output) {
		int stride = IntVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 32;
		for (int i = 0; i < 32 / stride; i++) {
			IntVector src;
			IntVector tmp;
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 0 + i * stride);
			src = src.and(MASK16);
			tmp = src;
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 128 + i * stride);
			src = src.and(MASK16);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 256 + i * stride);
			src = src.and(MASK16);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 384 + i * stride);
			src = src.and(MASK16);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 512 + i * stride);
			src = src.and(MASK16);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 640 + i * stride);
			src = src.and(MASK16);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 768 + i * stride);
			src = src.and(MASK16);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 896 + i * stride);
			src = src.and(MASK16);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 64 + i * stride);
			src = src.and(MASK16);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 192 + i * stride);
			src = src.and(MASK16);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 320 + i * stride);
			src = src.and(MASK16);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 448 + i * stride);
			src = src.and(MASK16);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 160 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 576 + i * stride);
			src = src.and(MASK16);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 704 + i * stride);
			src = src.and(MASK16);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 832 + i * stride);
			src = src.and(MASK16);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 960 + i * stride);
			src = src.and(MASK16);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 224 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 32 + i * stride);
			src = src.and(MASK16);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 160 + i * stride);
			src = src.and(MASK16);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 288 + i * stride);
			src = src.and(MASK16);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 416 + i * stride);
			src = src.and(MASK16);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 288 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 544 + i * stride);
			src = src.and(MASK16);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 672 + i * stride);
			src = src.and(MASK16);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 800 + i * stride);
			src = src.and(MASK16);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 928 + i * stride);
			src = src.and(MASK16);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 352 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 96 + i * stride);
			src = src.and(MASK16);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 224 + i * stride);
			src = src.and(MASK16);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 384 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 352 + i * stride);
			src = src.and(MASK16);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 480 + i * stride);
			src = src.and(MASK16);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 416 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 608 + i * stride);
			src = src.and(MASK16);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 736 + i * stride);
			src = src.and(MASK16);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 448 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 864 + i * stride);
			src = src.and(MASK16);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 992 + i * stride);
			src = src.and(MASK16);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 480 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16);
		}
	}

	public static void pack17(int[] input, int[] output) {
		int stride = IntVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 32;
		for (int i = 0; i < 32 / stride; i++) {
			IntVector src;
			IntVector tmp;
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 0 + i * stride);
			src = src.and(MASK17);
			tmp = src;
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 128 + i * stride);
			src = src.and(MASK17);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 17));
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 15);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 256 + i * stride);
			src = src.and(MASK17);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 2));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 384 + i * stride);
			src = src.and(MASK17);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 19));
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 13);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 512 + i * stride);
			src = src.and(MASK17);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 4));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 640 + i * stride);
			src = src.and(MASK17);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 21));
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 11);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 768 + i * stride);
			src = src.and(MASK17);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 6));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 896 + i * stride);
			src = src.and(MASK17);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 23));
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 9);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 64 + i * stride);
			src = src.and(MASK17);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 192 + i * stride);
			src = src.and(MASK17);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 25));
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 7);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 320 + i * stride);
			src = src.and(MASK17);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 10));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 448 + i * stride);
			src = src.and(MASK17);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 27));
			tmp.intoArray(output, 160 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 5);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 576 + i * stride);
			src = src.and(MASK17);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 12));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 704 + i * stride);
			src = src.and(MASK17);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 29));
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 3);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 832 + i * stride);
			src = src.and(MASK17);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 14));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 960 + i * stride);
			src = src.and(MASK17);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 31));
			tmp.intoArray(output, 224 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 1);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 32 + i * stride);
			src = src.and(MASK17);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 160 + i * stride);
			src = src.and(MASK17);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 1));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 288 + i * stride);
			src = src.and(MASK17);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 18));
			tmp.intoArray(output, 288 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 416 + i * stride);
			src = src.and(MASK17);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 3));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 544 + i * stride);
			src = src.and(MASK17);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 20));
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 672 + i * stride);
			src = src.and(MASK17);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 5));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 800 + i * stride);
			src = src.and(MASK17);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 22));
			tmp.intoArray(output, 352 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 928 + i * stride);
			src = src.and(MASK17);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 7));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 96 + i * stride);
			src = src.and(MASK17);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 384 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 224 + i * stride);
			src = src.and(MASK17);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 9));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 352 + i * stride);
			src = src.and(MASK17);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 26));
			tmp.intoArray(output, 416 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 480 + i * stride);
			src = src.and(MASK17);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 11));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 608 + i * stride);
			src = src.and(MASK17);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 28));
			tmp.intoArray(output, 448 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 736 + i * stride);
			src = src.and(MASK17);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 13));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 864 + i * stride);
			src = src.and(MASK17);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 30));
			tmp.intoArray(output, 480 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 992 + i * stride);
			src = src.and(MASK17);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 15));
			tmp.intoArray(output, 512 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 17);
		}
	}

	public static void pack18(int[] input, int[] output) {
		int stride = IntVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 32;
		for (int i = 0; i < 32 / stride; i++) {
			IntVector src;
			IntVector tmp;
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 0 + i * stride);
			src = src.and(MASK18);
			tmp = src;
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 128 + i * stride);
			src = src.and(MASK18);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 18));
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 256 + i * stride);
			src = src.and(MASK18);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 4));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 384 + i * stride);
			src = src.and(MASK18);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 22));
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 512 + i * stride);
			src = src.and(MASK18);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 640 + i * stride);
			src = src.and(MASK18);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 26));
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 768 + i * stride);
			src = src.and(MASK18);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 12));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 896 + i * stride);
			src = src.and(MASK18);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 30));
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 64 + i * stride);
			src = src.and(MASK18);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 192 + i * stride);
			src = src.and(MASK18);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 2));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 320 + i * stride);
			src = src.and(MASK18);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 20));
			tmp.intoArray(output, 160 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 448 + i * stride);
			src = src.and(MASK18);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 6));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 576 + i * stride);
			src = src.and(MASK18);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 704 + i * stride);
			src = src.and(MASK18);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 10));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 832 + i * stride);
			src = src.and(MASK18);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 28));
			tmp.intoArray(output, 224 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 960 + i * stride);
			src = src.and(MASK18);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 14));
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 18);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 32 + i * stride);
			src = src.and(MASK18);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 160 + i * stride);
			src = src.and(MASK18);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 18));
			tmp.intoArray(output, 288 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 288 + i * stride);
			src = src.and(MASK18);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 4));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 416 + i * stride);
			src = src.and(MASK18);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 22));
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 544 + i * stride);
			src = src.and(MASK18);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 672 + i * stride);
			src = src.and(MASK18);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 26));
			tmp.intoArray(output, 352 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 800 + i * stride);
			src = src.and(MASK18);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 12));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 928 + i * stride);
			src = src.and(MASK18);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 30));
			tmp.intoArray(output, 384 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 96 + i * stride);
			src = src.and(MASK18);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 416 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 224 + i * stride);
			src = src.and(MASK18);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 2));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 352 + i * stride);
			src = src.and(MASK18);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 20));
			tmp.intoArray(output, 448 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 480 + i * stride);
			src = src.and(MASK18);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 6));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 608 + i * stride);
			src = src.and(MASK18);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 480 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 736 + i * stride);
			src = src.and(MASK18);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 10));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 864 + i * stride);
			src = src.and(MASK18);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 28));
			tmp.intoArray(output, 512 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 992 + i * stride);
			src = src.and(MASK18);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 14));
			tmp.intoArray(output, 544 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 18);
		}
	}

	public static void pack19(int[] input, int[] output) {
		int stride = IntVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 32;
		for (int i = 0; i < 32 / stride; i++) {
			IntVector src;
			IntVector tmp;
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 0 + i * stride);
			src = src.and(MASK19);
			tmp = src;
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 128 + i * stride);
			src = src.and(MASK19);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 19));
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 13);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 256 + i * stride);
			src = src.and(MASK19);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 6));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 384 + i * stride);
			src = src.and(MASK19);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 25));
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 7);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 512 + i * stride);
			src = src.and(MASK19);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 12));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 640 + i * stride);
			src = src.and(MASK19);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 31));
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 1);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 768 + i * stride);
			src = src.and(MASK19);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 18));
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 896 + i * stride);
			src = src.and(MASK19);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 5));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 64 + i * stride);
			src = src.and(MASK19);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 192 + i * stride);
			src = src.and(MASK19);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 11));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 320 + i * stride);
			src = src.and(MASK19);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 30));
			tmp.intoArray(output, 160 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 448 + i * stride);
			src = src.and(MASK19);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 17));
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 15);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 576 + i * stride);
			src = src.and(MASK19);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 4));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 704 + i * stride);
			src = src.and(MASK19);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 23));
			tmp.intoArray(output, 224 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 9);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 832 + i * stride);
			src = src.and(MASK19);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 10));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 960 + i * stride);
			src = src.and(MASK19);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 29));
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 3);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 32 + i * stride);
			src = src.and(MASK19);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 288 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 160 + i * stride);
			src = src.and(MASK19);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 3));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 288 + i * stride);
			src = src.and(MASK19);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 22));
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 416 + i * stride);
			src = src.and(MASK19);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 9));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 544 + i * stride);
			src = src.and(MASK19);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 28));
			tmp.intoArray(output, 352 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 672 + i * stride);
			src = src.and(MASK19);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 15));
			tmp.intoArray(output, 384 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 17);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 800 + i * stride);
			src = src.and(MASK19);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 2));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 928 + i * stride);
			src = src.and(MASK19);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 21));
			tmp.intoArray(output, 416 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 11);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 96 + i * stride);
			src = src.and(MASK19);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 224 + i * stride);
			src = src.and(MASK19);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 27));
			tmp.intoArray(output, 448 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 5);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 352 + i * stride);
			src = src.and(MASK19);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 14));
			tmp.intoArray(output, 480 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 18);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 480 + i * stride);
			src = src.and(MASK19);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 1));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 608 + i * stride);
			src = src.and(MASK19);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 20));
			tmp.intoArray(output, 512 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 736 + i * stride);
			src = src.and(MASK19);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 7));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 864 + i * stride);
			src = src.and(MASK19);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 26));
			tmp.intoArray(output, 544 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 992 + i * stride);
			src = src.and(MASK19);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 13));
			tmp.intoArray(output, 576 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 19);
		}
	}

	public static void pack20(int[] input, int[] output) {
		int stride = IntVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 32;
		for (int i = 0; i < 32 / stride; i++) {
			IntVector src;
			IntVector tmp;
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 0 + i * stride);
			src = src.and(MASK20);
			tmp = src;
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 128 + i * stride);
			src = src.and(MASK20);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 20));
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 256 + i * stride);
			src = src.and(MASK20);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 384 + i * stride);
			src = src.and(MASK20);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 28));
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 512 + i * stride);
			src = src.and(MASK20);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 640 + i * stride);
			src = src.and(MASK20);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 4));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 768 + i * stride);
			src = src.and(MASK20);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 896 + i * stride);
			src = src.and(MASK20);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 64 + i * stride);
			src = src.and(MASK20);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 192 + i * stride);
			src = src.and(MASK20);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 20));
			tmp.intoArray(output, 160 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 320 + i * stride);
			src = src.and(MASK20);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 448 + i * stride);
			src = src.and(MASK20);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 28));
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 576 + i * stride);
			src = src.and(MASK20);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 224 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 704 + i * stride);
			src = src.and(MASK20);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 4));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 832 + i * stride);
			src = src.and(MASK20);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 960 + i * stride);
			src = src.and(MASK20);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 288 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 32 + i * stride);
			src = src.and(MASK20);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 160 + i * stride);
			src = src.and(MASK20);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 20));
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 288 + i * stride);
			src = src.and(MASK20);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 416 + i * stride);
			src = src.and(MASK20);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 28));
			tmp.intoArray(output, 352 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 544 + i * stride);
			src = src.and(MASK20);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 384 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 672 + i * stride);
			src = src.and(MASK20);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 4));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 800 + i * stride);
			src = src.and(MASK20);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 416 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 928 + i * stride);
			src = src.and(MASK20);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 448 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 96 + i * stride);
			src = src.and(MASK20);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 224 + i * stride);
			src = src.and(MASK20);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 20));
			tmp.intoArray(output, 480 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 352 + i * stride);
			src = src.and(MASK20);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 480 + i * stride);
			src = src.and(MASK20);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 28));
			tmp.intoArray(output, 512 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 608 + i * stride);
			src = src.and(MASK20);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 544 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 736 + i * stride);
			src = src.and(MASK20);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 4));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 864 + i * stride);
			src = src.and(MASK20);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 576 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 992 + i * stride);
			src = src.and(MASK20);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 608 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20);
		}
	}

	public static void pack21(int[] input, int[] output) {
		int stride = IntVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 32;
		for (int i = 0; i < 32 / stride; i++) {
			IntVector src;
			IntVector tmp;
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 0 + i * stride);
			src = src.and(MASK21);
			tmp = src;
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 128 + i * stride);
			src = src.and(MASK21);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 21));
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 11);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 256 + i * stride);
			src = src.and(MASK21);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 10));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 384 + i * stride);
			src = src.and(MASK21);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 31));
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 1);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 512 + i * stride);
			src = src.and(MASK21);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 20));
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 640 + i * stride);
			src = src.and(MASK21);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 9));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 768 + i * stride);
			src = src.and(MASK21);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 30));
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 896 + i * stride);
			src = src.and(MASK21);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 19));
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 13);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 64 + i * stride);
			src = src.and(MASK21);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 192 + i * stride);
			src = src.and(MASK21);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 29));
			tmp.intoArray(output, 160 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 3);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 320 + i * stride);
			src = src.and(MASK21);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 18));
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 448 + i * stride);
			src = src.and(MASK21);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 7));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 576 + i * stride);
			src = src.and(MASK21);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 28));
			tmp.intoArray(output, 224 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 704 + i * stride);
			src = src.and(MASK21);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 17));
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 15);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 832 + i * stride);
			src = src.and(MASK21);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 6));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 960 + i * stride);
			src = src.and(MASK21);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 27));
			tmp.intoArray(output, 288 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 5);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 32 + i * stride);
			src = src.and(MASK21);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 160 + i * stride);
			src = src.and(MASK21);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 5));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 288 + i * stride);
			src = src.and(MASK21);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 26));
			tmp.intoArray(output, 352 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 416 + i * stride);
			src = src.and(MASK21);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 15));
			tmp.intoArray(output, 384 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 17);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 544 + i * stride);
			src = src.and(MASK21);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 4));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 672 + i * stride);
			src = src.and(MASK21);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 25));
			tmp.intoArray(output, 416 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 7);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 800 + i * stride);
			src = src.and(MASK21);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 14));
			tmp.intoArray(output, 448 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 18);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 928 + i * stride);
			src = src.and(MASK21);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 3));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 96 + i * stride);
			src = src.and(MASK21);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 480 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 224 + i * stride);
			src = src.and(MASK21);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 13));
			tmp.intoArray(output, 512 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 19);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 352 + i * stride);
			src = src.and(MASK21);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 2));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 480 + i * stride);
			src = src.and(MASK21);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 23));
			tmp.intoArray(output, 544 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 9);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 608 + i * stride);
			src = src.and(MASK21);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 576 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 736 + i * stride);
			src = src.and(MASK21);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 1));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 864 + i * stride);
			src = src.and(MASK21);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 22));
			tmp.intoArray(output, 608 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 992 + i * stride);
			src = src.and(MASK21);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 11));
			tmp.intoArray(output, 640 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 21);
		}
	}

	public static void pack22(int[] input, int[] output) {
		int stride = IntVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 32;
		for (int i = 0; i < 32 / stride; i++) {
			IntVector src;
			IntVector tmp;
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 0 + i * stride);
			src = src.and(MASK22);
			tmp = src;
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 128 + i * stride);
			src = src.and(MASK22);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 22));
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 256 + i * stride);
			src = src.and(MASK22);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 384 + i * stride);
			src = src.and(MASK22);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 2));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 512 + i * stride);
			src = src.and(MASK22);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 640 + i * stride);
			src = src.and(MASK22);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 14));
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 18);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 768 + i * stride);
			src = src.and(MASK22);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 4));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 896 + i * stride);
			src = src.and(MASK22);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 26));
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 64 + i * stride);
			src = src.and(MASK22);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 160 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 192 + i * stride);
			src = src.and(MASK22);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 6));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 320 + i * stride);
			src = src.and(MASK22);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 28));
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 448 + i * stride);
			src = src.and(MASK22);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 18));
			tmp.intoArray(output, 224 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 576 + i * stride);
			src = src.and(MASK22);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 704 + i * stride);
			src = src.and(MASK22);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 30));
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 832 + i * stride);
			src = src.and(MASK22);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 20));
			tmp.intoArray(output, 288 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 960 + i * stride);
			src = src.and(MASK22);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 10));
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 22);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 32 + i * stride);
			src = src.and(MASK22);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 160 + i * stride);
			src = src.and(MASK22);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 22));
			tmp.intoArray(output, 352 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 288 + i * stride);
			src = src.and(MASK22);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 384 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 416 + i * stride);
			src = src.and(MASK22);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 2));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 544 + i * stride);
			src = src.and(MASK22);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 416 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 672 + i * stride);
			src = src.and(MASK22);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 14));
			tmp.intoArray(output, 448 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 18);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 800 + i * stride);
			src = src.and(MASK22);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 4));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 928 + i * stride);
			src = src.and(MASK22);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 26));
			tmp.intoArray(output, 480 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 96 + i * stride);
			src = src.and(MASK22);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 512 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 224 + i * stride);
			src = src.and(MASK22);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 6));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 352 + i * stride);
			src = src.and(MASK22);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 28));
			tmp.intoArray(output, 544 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 480 + i * stride);
			src = src.and(MASK22);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 18));
			tmp.intoArray(output, 576 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 608 + i * stride);
			src = src.and(MASK22);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 736 + i * stride);
			src = src.and(MASK22);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 30));
			tmp.intoArray(output, 608 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 864 + i * stride);
			src = src.and(MASK22);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 20));
			tmp.intoArray(output, 640 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 992 + i * stride);
			src = src.and(MASK22);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 10));
			tmp.intoArray(output, 672 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 22);
		}
	}

	public static void pack23(int[] input, int[] output) {
		int stride = IntVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 32;
		for (int i = 0; i < 32 / stride; i++) {
			IntVector src;
			IntVector tmp;
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 0 + i * stride);
			src = src.and(MASK23);
			tmp = src;
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 128 + i * stride);
			src = src.and(MASK23);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 23));
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 9);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 256 + i * stride);
			src = src.and(MASK23);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 14));
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 18);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 384 + i * stride);
			src = src.and(MASK23);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 5));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 512 + i * stride);
			src = src.and(MASK23);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 28));
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 640 + i * stride);
			src = src.and(MASK23);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 19));
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 13);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 768 + i * stride);
			src = src.and(MASK23);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 10));
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 22);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 896 + i * stride);
			src = src.and(MASK23);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 1));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 64 + i * stride);
			src = src.and(MASK23);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 160 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 192 + i * stride);
			src = src.and(MASK23);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 15));
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 17);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 320 + i * stride);
			src = src.and(MASK23);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 6));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 448 + i * stride);
			src = src.and(MASK23);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 29));
			tmp.intoArray(output, 224 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 3);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 576 + i * stride);
			src = src.and(MASK23);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 20));
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 704 + i * stride);
			src = src.and(MASK23);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 11));
			tmp.intoArray(output, 288 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 21);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 832 + i * stride);
			src = src.and(MASK23);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 2));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 960 + i * stride);
			src = src.and(MASK23);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 25));
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 7);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 32 + i * stride);
			src = src.and(MASK23);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 352 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 160 + i * stride);
			src = src.and(MASK23);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 7));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 288 + i * stride);
			src = src.and(MASK23);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 30));
			tmp.intoArray(output, 384 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 416 + i * stride);
			src = src.and(MASK23);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 21));
			tmp.intoArray(output, 416 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 11);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 544 + i * stride);
			src = src.and(MASK23);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 448 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 672 + i * stride);
			src = src.and(MASK23);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 3));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 800 + i * stride);
			src = src.and(MASK23);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 26));
			tmp.intoArray(output, 480 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 928 + i * stride);
			src = src.and(MASK23);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 17));
			tmp.intoArray(output, 512 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 15);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 96 + i * stride);
			src = src.and(MASK23);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 224 + i * stride);
			src = src.and(MASK23);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 31));
			tmp.intoArray(output, 544 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 1);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 352 + i * stride);
			src = src.and(MASK23);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 22));
			tmp.intoArray(output, 576 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 480 + i * stride);
			src = src.and(MASK23);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 13));
			tmp.intoArray(output, 608 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 19);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 608 + i * stride);
			src = src.and(MASK23);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 4));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 736 + i * stride);
			src = src.and(MASK23);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 27));
			tmp.intoArray(output, 640 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 5);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 864 + i * stride);
			src = src.and(MASK23);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 18));
			tmp.intoArray(output, 672 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 992 + i * stride);
			src = src.and(MASK23);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 9));
			tmp.intoArray(output, 704 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 23);
		}
	}

	public static void pack24(int[] input, int[] output) {
		int stride = IntVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 32;
		for (int i = 0; i < 32 / stride; i++) {
			IntVector src;
			IntVector tmp;
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 0 + i * stride);
			src = src.and(MASK24);
			tmp = src;
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 128 + i * stride);
			src = src.and(MASK24);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 256 + i * stride);
			src = src.and(MASK24);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 384 + i * stride);
			src = src.and(MASK24);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 512 + i * stride);
			src = src.and(MASK24);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 640 + i * stride);
			src = src.and(MASK24);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 768 + i * stride);
			src = src.and(MASK24);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 896 + i * stride);
			src = src.and(MASK24);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 160 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 64 + i * stride);
			src = src.and(MASK24);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 192 + i * stride);
			src = src.and(MASK24);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 320 + i * stride);
			src = src.and(MASK24);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 224 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 448 + i * stride);
			src = src.and(MASK24);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 576 + i * stride);
			src = src.and(MASK24);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 704 + i * stride);
			src = src.and(MASK24);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 288 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 832 + i * stride);
			src = src.and(MASK24);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 960 + i * stride);
			src = src.and(MASK24);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 352 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 32 + i * stride);
			src = src.and(MASK24);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 160 + i * stride);
			src = src.and(MASK24);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 384 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 288 + i * stride);
			src = src.and(MASK24);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 416 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 416 + i * stride);
			src = src.and(MASK24);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 448 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 544 + i * stride);
			src = src.and(MASK24);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 672 + i * stride);
			src = src.and(MASK24);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 480 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 800 + i * stride);
			src = src.and(MASK24);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 512 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 928 + i * stride);
			src = src.and(MASK24);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 544 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 96 + i * stride);
			src = src.and(MASK24);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 224 + i * stride);
			src = src.and(MASK24);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 576 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 352 + i * stride);
			src = src.and(MASK24);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 608 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 480 + i * stride);
			src = src.and(MASK24);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 640 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 608 + i * stride);
			src = src.and(MASK24);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 736 + i * stride);
			src = src.and(MASK24);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 672 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 864 + i * stride);
			src = src.and(MASK24);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 704 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 992 + i * stride);
			src = src.and(MASK24);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 736 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24);
		}
	}

	public static void pack25(int[] input, int[] output) {
		int stride = IntVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 32;
		for (int i = 0; i < 32 / stride; i++) {
			IntVector src;
			IntVector tmp;
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 0 + i * stride);
			src = src.and(MASK25);
			tmp = src;
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 128 + i * stride);
			src = src.and(MASK25);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 25));
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 7);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 256 + i * stride);
			src = src.and(MASK25);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 18));
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 384 + i * stride);
			src = src.and(MASK25);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 11));
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 21);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 512 + i * stride);
			src = src.and(MASK25);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 4));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 640 + i * stride);
			src = src.and(MASK25);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 29));
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 3);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 768 + i * stride);
			src = src.and(MASK25);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 22));
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 896 + i * stride);
			src = src.and(MASK25);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 15));
			tmp.intoArray(output, 160 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 17);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 64 + i * stride);
			src = src.and(MASK25);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 192 + i * stride);
			src = src.and(MASK25);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 1));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 320 + i * stride);
			src = src.and(MASK25);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 26));
			tmp.intoArray(output, 224 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 448 + i * stride);
			src = src.and(MASK25);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 19));
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 13);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 576 + i * stride);
			src = src.and(MASK25);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 288 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 704 + i * stride);
			src = src.and(MASK25);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 5));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 832 + i * stride);
			src = src.and(MASK25);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 30));
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 960 + i * stride);
			src = src.and(MASK25);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 23));
			tmp.intoArray(output, 352 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 9);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 32 + i * stride);
			src = src.and(MASK25);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 384 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 160 + i * stride);
			src = src.and(MASK25);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 9));
			tmp.intoArray(output, 416 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 23);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 288 + i * stride);
			src = src.and(MASK25);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 2));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 416 + i * stride);
			src = src.and(MASK25);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 27));
			tmp.intoArray(output, 448 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 5);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 544 + i * stride);
			src = src.and(MASK25);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 20));
			tmp.intoArray(output, 480 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 672 + i * stride);
			src = src.and(MASK25);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 13));
			tmp.intoArray(output, 512 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 19);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 800 + i * stride);
			src = src.and(MASK25);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 6));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 928 + i * stride);
			src = src.and(MASK25);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 31));
			tmp.intoArray(output, 544 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 1);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 96 + i * stride);
			src = src.and(MASK25);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 576 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 224 + i * stride);
			src = src.and(MASK25);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 17));
			tmp.intoArray(output, 608 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 15);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 352 + i * stride);
			src = src.and(MASK25);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 10));
			tmp.intoArray(output, 640 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 22);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 480 + i * stride);
			src = src.and(MASK25);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 3));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 608 + i * stride);
			src = src.and(MASK25);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 28));
			tmp.intoArray(output, 672 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 736 + i * stride);
			src = src.and(MASK25);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 21));
			tmp.intoArray(output, 704 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 11);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 864 + i * stride);
			src = src.and(MASK25);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 14));
			tmp.intoArray(output, 736 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 18);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 992 + i * stride);
			src = src.and(MASK25);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 7));
			tmp.intoArray(output, 768 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 25);
		}
	}

	public static void pack26(int[] input, int[] output) {
		int stride = IntVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 32;
		for (int i = 0; i < 32 / stride; i++) {
			IntVector src;
			IntVector tmp;
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 0 + i * stride);
			src = src.and(MASK26);
			tmp = src;
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 128 + i * stride);
			src = src.and(MASK26);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 26));
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 256 + i * stride);
			src = src.and(MASK26);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 20));
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 384 + i * stride);
			src = src.and(MASK26);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 14));
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 18);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 512 + i * stride);
			src = src.and(MASK26);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 640 + i * stride);
			src = src.and(MASK26);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 2));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 768 + i * stride);
			src = src.and(MASK26);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 28));
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 896 + i * stride);
			src = src.and(MASK26);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 22));
			tmp.intoArray(output, 160 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 64 + i * stride);
			src = src.and(MASK26);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 192 + i * stride);
			src = src.and(MASK26);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 10));
			tmp.intoArray(output, 224 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 22);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 320 + i * stride);
			src = src.and(MASK26);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 4));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 448 + i * stride);
			src = src.and(MASK26);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 30));
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 576 + i * stride);
			src = src.and(MASK26);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 288 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 704 + i * stride);
			src = src.and(MASK26);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 18));
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 832 + i * stride);
			src = src.and(MASK26);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 352 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 960 + i * stride);
			src = src.and(MASK26);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 6));
			tmp.intoArray(output, 384 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 26);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 32 + i * stride);
			src = src.and(MASK26);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 160 + i * stride);
			src = src.and(MASK26);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 26));
			tmp.intoArray(output, 416 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 288 + i * stride);
			src = src.and(MASK26);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 20));
			tmp.intoArray(output, 448 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 416 + i * stride);
			src = src.and(MASK26);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 14));
			tmp.intoArray(output, 480 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 18);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 544 + i * stride);
			src = src.and(MASK26);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 512 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 672 + i * stride);
			src = src.and(MASK26);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 2));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 800 + i * stride);
			src = src.and(MASK26);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 28));
			tmp.intoArray(output, 544 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 928 + i * stride);
			src = src.and(MASK26);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 22));
			tmp.intoArray(output, 576 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 96 + i * stride);
			src = src.and(MASK26);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 608 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 224 + i * stride);
			src = src.and(MASK26);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 10));
			tmp.intoArray(output, 640 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 22);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 352 + i * stride);
			src = src.and(MASK26);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 4));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 480 + i * stride);
			src = src.and(MASK26);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 30));
			tmp.intoArray(output, 672 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 608 + i * stride);
			src = src.and(MASK26);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 704 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 736 + i * stride);
			src = src.and(MASK26);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 18));
			tmp.intoArray(output, 736 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 864 + i * stride);
			src = src.and(MASK26);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 768 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 992 + i * stride);
			src = src.and(MASK26);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 6));
			tmp.intoArray(output, 800 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 26);
		}
	}

	public static void pack27(int[] input, int[] output) {
		int stride = IntVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 32;
		for (int i = 0; i < 32 / stride; i++) {
			IntVector src;
			IntVector tmp;
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 0 + i * stride);
			src = src.and(MASK27);
			tmp = src;
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 128 + i * stride);
			src = src.and(MASK27);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 27));
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 5);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 256 + i * stride);
			src = src.and(MASK27);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 22));
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 384 + i * stride);
			src = src.and(MASK27);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 17));
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 15);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 512 + i * stride);
			src = src.and(MASK27);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 640 + i * stride);
			src = src.and(MASK27);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 7));
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 25);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 768 + i * stride);
			src = src.and(MASK27);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 2));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 896 + i * stride);
			src = src.and(MASK27);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 29));
			tmp.intoArray(output, 160 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 3);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 64 + i * stride);
			src = src.and(MASK27);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 192 + i * stride);
			src = src.and(MASK27);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 19));
			tmp.intoArray(output, 224 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 13);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 320 + i * stride);
			src = src.and(MASK27);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 14));
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 18);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 448 + i * stride);
			src = src.and(MASK27);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 9));
			tmp.intoArray(output, 288 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 23);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 576 + i * stride);
			src = src.and(MASK27);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 4));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 704 + i * stride);
			src = src.and(MASK27);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 31));
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 1);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 832 + i * stride);
			src = src.and(MASK27);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 26));
			tmp.intoArray(output, 352 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 960 + i * stride);
			src = src.and(MASK27);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 21));
			tmp.intoArray(output, 384 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 11);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 32 + i * stride);
			src = src.and(MASK27);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 416 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 160 + i * stride);
			src = src.and(MASK27);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 11));
			tmp.intoArray(output, 448 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 21);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 288 + i * stride);
			src = src.and(MASK27);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 6));
			tmp.intoArray(output, 480 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 26);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 416 + i * stride);
			src = src.and(MASK27);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 1));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 544 + i * stride);
			src = src.and(MASK27);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 28));
			tmp.intoArray(output, 512 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 672 + i * stride);
			src = src.and(MASK27);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 23));
			tmp.intoArray(output, 544 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 9);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 800 + i * stride);
			src = src.and(MASK27);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 18));
			tmp.intoArray(output, 576 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 928 + i * stride);
			src = src.and(MASK27);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 13));
			tmp.intoArray(output, 608 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 19);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 96 + i * stride);
			src = src.and(MASK27);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 640 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 224 + i * stride);
			src = src.and(MASK27);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 3));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 352 + i * stride);
			src = src.and(MASK27);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 30));
			tmp.intoArray(output, 672 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 480 + i * stride);
			src = src.and(MASK27);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 25));
			tmp.intoArray(output, 704 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 7);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 608 + i * stride);
			src = src.and(MASK27);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 20));
			tmp.intoArray(output, 736 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 736 + i * stride);
			src = src.and(MASK27);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 15));
			tmp.intoArray(output, 768 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 17);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 864 + i * stride);
			src = src.and(MASK27);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 10));
			tmp.intoArray(output, 800 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 22);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 992 + i * stride);
			src = src.and(MASK27);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 5));
			tmp.intoArray(output, 832 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 27);
		}
	}

	public static void pack28(int[] input, int[] output) {
		int stride = IntVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 32;
		for (int i = 0; i < 32 / stride; i++) {
			IntVector src;
			IntVector tmp;
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 0 + i * stride);
			src = src.and(MASK28);
			tmp = src;
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 128 + i * stride);
			src = src.and(MASK28);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 28));
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 256 + i * stride);
			src = src.and(MASK28);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 384 + i * stride);
			src = src.and(MASK28);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 20));
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 512 + i * stride);
			src = src.and(MASK28);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 640 + i * stride);
			src = src.and(MASK28);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 768 + i * stride);
			src = src.and(MASK28);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 160 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 896 + i * stride);
			src = src.and(MASK28);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 64 + i * stride);
			src = src.and(MASK28);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 192 + i * stride);
			src = src.and(MASK28);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 28));
			tmp.intoArray(output, 224 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 320 + i * stride);
			src = src.and(MASK28);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 448 + i * stride);
			src = src.and(MASK28);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 20));
			tmp.intoArray(output, 288 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 576 + i * stride);
			src = src.and(MASK28);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 704 + i * stride);
			src = src.and(MASK28);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 352 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 832 + i * stride);
			src = src.and(MASK28);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 384 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 960 + i * stride);
			src = src.and(MASK28);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 416 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 32 + i * stride);
			src = src.and(MASK28);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 160 + i * stride);
			src = src.and(MASK28);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 28));
			tmp.intoArray(output, 448 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 288 + i * stride);
			src = src.and(MASK28);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 480 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 416 + i * stride);
			src = src.and(MASK28);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 20));
			tmp.intoArray(output, 512 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 544 + i * stride);
			src = src.and(MASK28);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 544 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 672 + i * stride);
			src = src.and(MASK28);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 576 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 800 + i * stride);
			src = src.and(MASK28);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 608 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 928 + i * stride);
			src = src.and(MASK28);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 640 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 96 + i * stride);
			src = src.and(MASK28);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 224 + i * stride);
			src = src.and(MASK28);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 28));
			tmp.intoArray(output, 672 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 352 + i * stride);
			src = src.and(MASK28);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 704 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 480 + i * stride);
			src = src.and(MASK28);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 20));
			tmp.intoArray(output, 736 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 608 + i * stride);
			src = src.and(MASK28);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 768 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 736 + i * stride);
			src = src.and(MASK28);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 800 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 864 + i * stride);
			src = src.and(MASK28);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 832 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 992 + i * stride);
			src = src.and(MASK28);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 864 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28);
		}
	}

	public static void pack29(int[] input, int[] output) {
		int stride = IntVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 32;
		for (int i = 0; i < 32 / stride; i++) {
			IntVector src;
			IntVector tmp;
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 0 + i * stride);
			src = src.and(MASK29);
			tmp = src;
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 128 + i * stride);
			src = src.and(MASK29);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 29));
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 3);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 256 + i * stride);
			src = src.and(MASK29);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 26));
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 384 + i * stride);
			src = src.and(MASK29);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 23));
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 9);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 512 + i * stride);
			src = src.and(MASK29);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 20));
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 640 + i * stride);
			src = src.and(MASK29);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 17));
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 15);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 768 + i * stride);
			src = src.and(MASK29);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 14));
			tmp.intoArray(output, 160 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 18);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 896 + i * stride);
			src = src.and(MASK29);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 11));
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 21);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 64 + i * stride);
			src = src.and(MASK29);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 224 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 192 + i * stride);
			src = src.and(MASK29);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 5));
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 27);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 320 + i * stride);
			src = src.and(MASK29);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 2));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 448 + i * stride);
			src = src.and(MASK29);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 31));
			tmp.intoArray(output, 288 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 1);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 576 + i * stride);
			src = src.and(MASK29);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 28));
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 704 + i * stride);
			src = src.and(MASK29);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 25));
			tmp.intoArray(output, 352 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 7);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 832 + i * stride);
			src = src.and(MASK29);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 22));
			tmp.intoArray(output, 384 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 960 + i * stride);
			src = src.and(MASK29);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 19));
			tmp.intoArray(output, 416 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 13);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 32 + i * stride);
			src = src.and(MASK29);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 448 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 160 + i * stride);
			src = src.and(MASK29);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 13));
			tmp.intoArray(output, 480 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 19);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 288 + i * stride);
			src = src.and(MASK29);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 10));
			tmp.intoArray(output, 512 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 22);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 416 + i * stride);
			src = src.and(MASK29);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 7));
			tmp.intoArray(output, 544 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 25);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 544 + i * stride);
			src = src.and(MASK29);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 576 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 672 + i * stride);
			src = src.and(MASK29);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 1));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 800 + i * stride);
			src = src.and(MASK29);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 30));
			tmp.intoArray(output, 608 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 928 + i * stride);
			src = src.and(MASK29);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 27));
			tmp.intoArray(output, 640 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 5);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 96 + i * stride);
			src = src.and(MASK29);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 672 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 224 + i * stride);
			src = src.and(MASK29);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 21));
			tmp.intoArray(output, 704 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 11);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 352 + i * stride);
			src = src.and(MASK29);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 18));
			tmp.intoArray(output, 736 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 480 + i * stride);
			src = src.and(MASK29);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 15));
			tmp.intoArray(output, 768 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 17);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 608 + i * stride);
			src = src.and(MASK29);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 800 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 736 + i * stride);
			src = src.and(MASK29);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 9));
			tmp.intoArray(output, 832 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 23);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 864 + i * stride);
			src = src.and(MASK29);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 6));
			tmp.intoArray(output, 864 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 26);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 992 + i * stride);
			src = src.and(MASK29);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 3));
			tmp.intoArray(output, 896 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 29);
		}
	}

	public static void pack30(int[] input, int[] output) {
		int stride = IntVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 32;
		for (int i = 0; i < 32 / stride; i++) {
			IntVector src;
			IntVector tmp;
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 0 + i * stride);
			src = src.and(MASK30);
			tmp = src;
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 128 + i * stride);
			src = src.and(MASK30);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 30));
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 256 + i * stride);
			src = src.and(MASK30);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 28));
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 384 + i * stride);
			src = src.and(MASK30);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 26));
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 512 + i * stride);
			src = src.and(MASK30);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 640 + i * stride);
			src = src.and(MASK30);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 22));
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 768 + i * stride);
			src = src.and(MASK30);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 20));
			tmp.intoArray(output, 160 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 896 + i * stride);
			src = src.and(MASK30);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 18));
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 64 + i * stride);
			src = src.and(MASK30);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 224 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 192 + i * stride);
			src = src.and(MASK30);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 14));
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 18);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 320 + i * stride);
			src = src.and(MASK30);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 288 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 448 + i * stride);
			src = src.and(MASK30);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 10));
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 22);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 576 + i * stride);
			src = src.and(MASK30);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 352 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 704 + i * stride);
			src = src.and(MASK30);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 6));
			tmp.intoArray(output, 384 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 26);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 832 + i * stride);
			src = src.and(MASK30);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 416 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 960 + i * stride);
			src = src.and(MASK30);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 2));
			tmp.intoArray(output, 448 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 30);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 32 + i * stride);
			src = src.and(MASK30);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 160 + i * stride);
			src = src.and(MASK30);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 30));
			tmp.intoArray(output, 480 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 288 + i * stride);
			src = src.and(MASK30);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 28));
			tmp.intoArray(output, 512 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 416 + i * stride);
			src = src.and(MASK30);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 26));
			tmp.intoArray(output, 544 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 544 + i * stride);
			src = src.and(MASK30);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 576 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 672 + i * stride);
			src = src.and(MASK30);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 22));
			tmp.intoArray(output, 608 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 800 + i * stride);
			src = src.and(MASK30);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 20));
			tmp.intoArray(output, 640 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 928 + i * stride);
			src = src.and(MASK30);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 18));
			tmp.intoArray(output, 672 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 96 + i * stride);
			src = src.and(MASK30);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 704 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 224 + i * stride);
			src = src.and(MASK30);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 14));
			tmp.intoArray(output, 736 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 18);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 352 + i * stride);
			src = src.and(MASK30);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 768 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 480 + i * stride);
			src = src.and(MASK30);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 10));
			tmp.intoArray(output, 800 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 22);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 608 + i * stride);
			src = src.and(MASK30);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 832 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 736 + i * stride);
			src = src.and(MASK30);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 6));
			tmp.intoArray(output, 864 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 26);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 864 + i * stride);
			src = src.and(MASK30);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 896 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 992 + i * stride);
			src = src.and(MASK30);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 2));
			tmp.intoArray(output, 928 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 30);
		}
	}

	public static void pack31(int[] input, int[] output) {
		int stride = IntVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 32;
		for (int i = 0; i < 32 / stride; i++) {
			IntVector src;
			IntVector tmp;
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 0 + i * stride);
			src = src.and(MASK31);
			tmp = src;
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 128 + i * stride);
			src = src.and(MASK31);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 31));
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 1);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 256 + i * stride);
			src = src.and(MASK31);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 30));
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 384 + i * stride);
			src = src.and(MASK31);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 29));
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 3);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 512 + i * stride);
			src = src.and(MASK31);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 28));
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 640 + i * stride);
			src = src.and(MASK31);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 27));
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 5);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 768 + i * stride);
			src = src.and(MASK31);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 26));
			tmp.intoArray(output, 160 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 896 + i * stride);
			src = src.and(MASK31);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 25));
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 7);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 64 + i * stride);
			src = src.and(MASK31);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 224 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 192 + i * stride);
			src = src.and(MASK31);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 23));
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 9);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 320 + i * stride);
			src = src.and(MASK31);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 22));
			tmp.intoArray(output, 288 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 448 + i * stride);
			src = src.and(MASK31);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 21));
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 11);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 576 + i * stride);
			src = src.and(MASK31);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 20));
			tmp.intoArray(output, 352 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 704 + i * stride);
			src = src.and(MASK31);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 19));
			tmp.intoArray(output, 384 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 13);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 832 + i * stride);
			src = src.and(MASK31);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 18));
			tmp.intoArray(output, 416 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 960 + i * stride);
			src = src.and(MASK31);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 17));
			tmp.intoArray(output, 448 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 15);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 32 + i * stride);
			src = src.and(MASK31);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 480 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 160 + i * stride);
			src = src.and(MASK31);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 15));
			tmp.intoArray(output, 512 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 17);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 288 + i * stride);
			src = src.and(MASK31);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 14));
			tmp.intoArray(output, 544 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 18);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 416 + i * stride);
			src = src.and(MASK31);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 13));
			tmp.intoArray(output, 576 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 19);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 544 + i * stride);
			src = src.and(MASK31);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 608 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 672 + i * stride);
			src = src.and(MASK31);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 11));
			tmp.intoArray(output, 640 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 21);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 800 + i * stride);
			src = src.and(MASK31);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 10));
			tmp.intoArray(output, 672 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 22);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 928 + i * stride);
			src = src.and(MASK31);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 9));
			tmp.intoArray(output, 704 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 23);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 96 + i * stride);
			src = src.and(MASK31);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 736 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 224 + i * stride);
			src = src.and(MASK31);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 7));
			tmp.intoArray(output, 768 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 25);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 352 + i * stride);
			src = src.and(MASK31);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 6));
			tmp.intoArray(output, 800 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 26);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 480 + i * stride);
			src = src.and(MASK31);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 5));
			tmp.intoArray(output, 832 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 27);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 608 + i * stride);
			src = src.and(MASK31);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 864 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 736 + i * stride);
			src = src.and(MASK31);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 3));
			tmp.intoArray(output, 896 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 29);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 864 + i * stride);
			src = src.and(MASK31);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 2));
			tmp.intoArray(output, 928 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 30);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 992 + i * stride);
			src = src.and(MASK31);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 1));
			tmp.intoArray(output, 960 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 31);
		}
	}

	public static void pack32(int[] input, int[] output) {
		int stride = IntVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 32;
		for (int i = 0; i < 32 / stride; i++) {
			IntVector src;
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 0 + i * stride);
			src.intoArray(output, 0 + i * stride);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 128 + i * stride);
			src.intoArray(output, 32 + i * stride);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 256 + i * stride);
			src.intoArray(output, 64 + i * stride);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 384 + i * stride);
			src.intoArray(output, 96 + i * stride);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 512 + i * stride);
			src.intoArray(output, 128 + i * stride);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 640 + i * stride);
			src.intoArray(output, 160 + i * stride);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 768 + i * stride);
			src.intoArray(output, 192 + i * stride);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 896 + i * stride);
			src.intoArray(output, 224 + i * stride);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 64 + i * stride);
			src.intoArray(output, 256 + i * stride);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 192 + i * stride);
			src.intoArray(output, 288 + i * stride);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 320 + i * stride);
			src.intoArray(output, 320 + i * stride);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 448 + i * stride);
			src.intoArray(output, 352 + i * stride);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 576 + i * stride);
			src.intoArray(output, 384 + i * stride);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 704 + i * stride);
			src.intoArray(output, 416 + i * stride);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 832 + i * stride);
			src.intoArray(output, 448 + i * stride);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 960 + i * stride);
			src.intoArray(output, 480 + i * stride);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 32 + i * stride);
			src.intoArray(output, 512 + i * stride);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 160 + i * stride);
			src.intoArray(output, 544 + i * stride);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 288 + i * stride);
			src.intoArray(output, 576 + i * stride);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 416 + i * stride);
			src.intoArray(output, 608 + i * stride);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 544 + i * stride);
			src.intoArray(output, 640 + i * stride);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 672 + i * stride);
			src.intoArray(output, 672 + i * stride);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 800 + i * stride);
			src.intoArray(output, 704 + i * stride);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 928 + i * stride);
			src.intoArray(output, 736 + i * stride);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 96 + i * stride);
			src.intoArray(output, 768 + i * stride);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 224 + i * stride);
			src.intoArray(output, 800 + i * stride);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 352 + i * stride);
			src.intoArray(output, 832 + i * stride);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 480 + i * stride);
			src.intoArray(output, 864 + i * stride);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 608 + i * stride);
			src.intoArray(output, 896 + i * stride);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 736 + i * stride);
			src.intoArray(output, 928 + i * stride);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 864 + i * stride);
			src.intoArray(output, 960 + i * stride);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 992 + i * stride);
			src.intoArray(output, 992 + i * stride);
		}
	}

	public static void pack(int[] input, int width, int[] output) {
		switch (width) {
			case 0: pack0(input, output); break;
			case 1: pack1(input, output); break;
			case 2: pack2(input, output); break;
			case 3: pack3(input, output); break;
			case 4: pack4(input, output); break;
			case 5: pack5(input, output); break;
			case 6: pack6(input, output); break;
			case 7: pack7(input, output); break;
			case 8: pack8(input, output); break;
			case 9: pack9(input, output); break;
			case 10: pack10(input, output); break;
			case 11: pack11(input, output); break;
			case 12: pack12(input, output); break;
			case 13: pack13(input, output); break;
			case 14: pack14(input, output); break;
			case 15: pack15(input, output); break;
			case 16: pack16(input, output); break;
			case 17: pack17(input, output); break;
			case 18: pack18(input, output); break;
			case 19: pack19(input, output); break;
			case 20: pack20(input, output); break;
			case 21: pack21(input, output); break;
			case 22: pack22(input, output); break;
			case 23: pack23(input, output); break;
			case 24: pack24(input, output); break;
			case 25: pack25(input, output); break;
			case 26: pack26(input, output); break;
			case 27: pack27(input, output); break;
			case 28: pack28(input, output); break;
			case 29: pack29(input, output); break;
			case 30: pack30(input, output); break;
			case 31: pack31(input, output); break;
			case 32: pack32(input, output); break;
			default: throw new IllegalArgumentException();
		}
	}

	public static void unpack0(int[] input, int[] output) {
		int stride = IntVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 32;
		for (int i = 0; i < 32 / stride; i++) {
			Arrays.fill(output, (int) 0);
		}
	}

	public static void unpack1(int[] input, int[] output) {
		int stride = IntVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 32;
		for (int i = 0; i < 32 / stride; i++) {
			IntVector src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, i * stride);
			IntVector tmp;
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK1);
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 1).and(MASK1);
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2).and(MASK1);
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 3).and(MASK1);
			tmp.intoArray(output, 384 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4).and(MASK1);
			tmp.intoArray(output, 512 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 5).and(MASK1);
			tmp.intoArray(output, 640 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6).and(MASK1);
			tmp.intoArray(output, 768 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 7).and(MASK1);
			tmp.intoArray(output, 896 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK1);
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 9).and(MASK1);
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10).and(MASK1);
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 11).and(MASK1);
			tmp.intoArray(output, 448 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12).and(MASK1);
			tmp.intoArray(output, 576 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 13).and(MASK1);
			tmp.intoArray(output, 704 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14).and(MASK1);
			tmp.intoArray(output, 832 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 15).and(MASK1);
			tmp.intoArray(output, 960 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK1);
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 17).and(MASK1);
			tmp.intoArray(output, 160 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 18).and(MASK1);
			tmp.intoArray(output, 288 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 19).and(MASK1);
			tmp.intoArray(output, 416 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20).and(MASK1);
			tmp.intoArray(output, 544 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 21).and(MASK1);
			tmp.intoArray(output, 672 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 22).and(MASK1);
			tmp.intoArray(output, 800 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 23).and(MASK1);
			tmp.intoArray(output, 928 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK1);
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 25).and(MASK1);
			tmp.intoArray(output, 224 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 26).and(MASK1);
			tmp.intoArray(output, 352 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 27).and(MASK1);
			tmp.intoArray(output, 480 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28).and(MASK1);
			tmp.intoArray(output, 608 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 29).and(MASK1);
			tmp.intoArray(output, 736 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 30).and(MASK1);
			tmp.intoArray(output, 864 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 31).and(MASK1);
			tmp.intoArray(output, 992 + i * stride);
		}
	}

	public static void unpack2(int[] input, int[] output) {
		int stride = IntVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 32;
		for (int i = 0; i < 32 / stride; i++) {
			IntVector src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, i * stride);
			IntVector tmp;
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK2);
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2).and(MASK2);
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4).and(MASK2);
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6).and(MASK2);
			tmp.intoArray(output, 384 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK2);
			tmp.intoArray(output, 512 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10).and(MASK2);
			tmp.intoArray(output, 640 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12).and(MASK2);
			tmp.intoArray(output, 768 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14).and(MASK2);
			tmp.intoArray(output, 896 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK2);
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 18).and(MASK2);
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20).and(MASK2);
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 22).and(MASK2);
			tmp.intoArray(output, 448 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK2);
			tmp.intoArray(output, 576 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 26).and(MASK2);
			tmp.intoArray(output, 704 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28).and(MASK2);
			tmp.intoArray(output, 832 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 30).and(MASK2);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 32 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 2));
			tmp.intoArray(output, 960 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK2);
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2).and(MASK2);
			tmp.intoArray(output, 160 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4).and(MASK2);
			tmp.intoArray(output, 288 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6).and(MASK2);
			tmp.intoArray(output, 416 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK2);
			tmp.intoArray(output, 544 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10).and(MASK2);
			tmp.intoArray(output, 672 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12).and(MASK2);
			tmp.intoArray(output, 800 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14).and(MASK2);
			tmp.intoArray(output, 928 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK2);
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 18).and(MASK2);
			tmp.intoArray(output, 224 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20).and(MASK2);
			tmp.intoArray(output, 352 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 22).and(MASK2);
			tmp.intoArray(output, 480 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK2);
			tmp.intoArray(output, 608 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 26).and(MASK2);
			tmp.intoArray(output, 736 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28).and(MASK2);
			tmp.intoArray(output, 864 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 30).and(MASK2);
			tmp.intoArray(output, 992 + i * stride);
		}
	}

	public static void unpack3(int[] input, int[] output) {
		int stride = IntVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 32;
		for (int i = 0; i < 32 / stride; i++) {
			IntVector src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, i * stride);
			IntVector tmp;
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK3);
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 3).and(MASK3);
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6).and(MASK3);
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 9).and(MASK3);
			tmp.intoArray(output, 384 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12).and(MASK3);
			tmp.intoArray(output, 512 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 15).and(MASK3);
			tmp.intoArray(output, 640 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 18).and(MASK3);
			tmp.intoArray(output, 768 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 21).and(MASK3);
			tmp.intoArray(output, 896 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK3);
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 27).and(MASK3);
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 30).and(MASK2);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 32 + i * stride);
			tmp = tmp.or(src.and(MASK1).lanewise(VectorOperators.LSHL, 2));
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 1).and(MASK3);
			tmp.intoArray(output, 448 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4).and(MASK3);
			tmp.intoArray(output, 576 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 7).and(MASK3);
			tmp.intoArray(output, 704 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10).and(MASK3);
			tmp.intoArray(output, 832 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 13).and(MASK3);
			tmp.intoArray(output, 960 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK3);
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 19).and(MASK3);
			tmp.intoArray(output, 160 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 22).and(MASK3);
			tmp.intoArray(output, 288 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 25).and(MASK3);
			tmp.intoArray(output, 416 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28).and(MASK3);
			tmp.intoArray(output, 544 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 31).and(MASK1);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 64 + i * stride);
			tmp = tmp.or(src.and(MASK2).lanewise(VectorOperators.LSHL, 1));
			tmp.intoArray(output, 672 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2).and(MASK3);
			tmp.intoArray(output, 800 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 5).and(MASK3);
			tmp.intoArray(output, 928 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK3);
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 11).and(MASK3);
			tmp.intoArray(output, 224 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14).and(MASK3);
			tmp.intoArray(output, 352 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 17).and(MASK3);
			tmp.intoArray(output, 480 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20).and(MASK3);
			tmp.intoArray(output, 608 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 23).and(MASK3);
			tmp.intoArray(output, 736 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 26).and(MASK3);
			tmp.intoArray(output, 864 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 29).and(MASK3);
			tmp.intoArray(output, 992 + i * stride);
		}
	}

	public static void unpack4(int[] input, int[] output) {
		int stride = IntVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 32;
		for (int i = 0; i < 32 / stride; i++) {
			IntVector src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, i * stride);
			IntVector tmp;
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK4);
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4).and(MASK4);
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK4);
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12).and(MASK4);
			tmp.intoArray(output, 384 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK4);
			tmp.intoArray(output, 512 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20).and(MASK4);
			tmp.intoArray(output, 640 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK4);
			tmp.intoArray(output, 768 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28).and(MASK4);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 32 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 896 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK4);
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4).and(MASK4);
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK4);
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12).and(MASK4);
			tmp.intoArray(output, 448 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK4);
			tmp.intoArray(output, 576 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20).and(MASK4);
			tmp.intoArray(output, 704 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK4);
			tmp.intoArray(output, 832 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28).and(MASK4);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 64 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 960 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK4);
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4).and(MASK4);
			tmp.intoArray(output, 160 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK4);
			tmp.intoArray(output, 288 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12).and(MASK4);
			tmp.intoArray(output, 416 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK4);
			tmp.intoArray(output, 544 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20).and(MASK4);
			tmp.intoArray(output, 672 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK4);
			tmp.intoArray(output, 800 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28).and(MASK4);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 96 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 928 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK4);
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4).and(MASK4);
			tmp.intoArray(output, 224 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK4);
			tmp.intoArray(output, 352 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12).and(MASK4);
			tmp.intoArray(output, 480 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK4);
			tmp.intoArray(output, 608 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20).and(MASK4);
			tmp.intoArray(output, 736 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK4);
			tmp.intoArray(output, 864 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28).and(MASK4);
			tmp.intoArray(output, 992 + i * stride);
		}
	}

	public static void unpack5(int[] input, int[] output) {
		int stride = IntVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 32;
		for (int i = 0; i < 32 / stride; i++) {
			IntVector src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, i * stride);
			IntVector tmp;
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK5);
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 5).and(MASK5);
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10).and(MASK5);
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 15).and(MASK5);
			tmp.intoArray(output, 384 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20).and(MASK5);
			tmp.intoArray(output, 512 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 25).and(MASK5);
			tmp.intoArray(output, 640 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 30).and(MASK2);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 32 + i * stride);
			tmp = tmp.or(src.and(MASK3).lanewise(VectorOperators.LSHL, 2));
			tmp.intoArray(output, 768 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 3).and(MASK5);
			tmp.intoArray(output, 896 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK5);
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 13).and(MASK5);
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 18).and(MASK5);
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 23).and(MASK5);
			tmp.intoArray(output, 448 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28).and(MASK4);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 64 + i * stride);
			tmp = tmp.or(src.and(MASK1).lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 576 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 1).and(MASK5);
			tmp.intoArray(output, 704 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6).and(MASK5);
			tmp.intoArray(output, 832 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 11).and(MASK5);
			tmp.intoArray(output, 960 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK5);
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 21).and(MASK5);
			tmp.intoArray(output, 160 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 26).and(MASK5);
			tmp.intoArray(output, 288 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 31).and(MASK1);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 96 + i * stride);
			tmp = tmp.or(src.and(MASK4).lanewise(VectorOperators.LSHL, 1));
			tmp.intoArray(output, 416 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4).and(MASK5);
			tmp.intoArray(output, 544 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 9).and(MASK5);
			tmp.intoArray(output, 672 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14).and(MASK5);
			tmp.intoArray(output, 800 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 19).and(MASK5);
			tmp.intoArray(output, 928 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK5);
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 29).and(MASK3);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 128 + i * stride);
			tmp = tmp.or(src.and(MASK2).lanewise(VectorOperators.LSHL, 3));
			tmp.intoArray(output, 224 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2).and(MASK5);
			tmp.intoArray(output, 352 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 7).and(MASK5);
			tmp.intoArray(output, 480 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12).and(MASK5);
			tmp.intoArray(output, 608 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 17).and(MASK5);
			tmp.intoArray(output, 736 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 22).and(MASK5);
			tmp.intoArray(output, 864 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 27).and(MASK5);
			tmp.intoArray(output, 992 + i * stride);
		}
	}

	public static void unpack6(int[] input, int[] output) {
		int stride = IntVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 32;
		for (int i = 0; i < 32 / stride; i++) {
			IntVector src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, i * stride);
			IntVector tmp;
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK6);
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6).and(MASK6);
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12).and(MASK6);
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 18).and(MASK6);
			tmp.intoArray(output, 384 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK6);
			tmp.intoArray(output, 512 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 30).and(MASK2);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 32 + i * stride);
			tmp = tmp.or(src.and(MASK4).lanewise(VectorOperators.LSHL, 2));
			tmp.intoArray(output, 640 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4).and(MASK6);
			tmp.intoArray(output, 768 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10).and(MASK6);
			tmp.intoArray(output, 896 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK6);
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 22).and(MASK6);
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28).and(MASK4);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 64 + i * stride);
			tmp = tmp.or(src.and(MASK2).lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2).and(MASK6);
			tmp.intoArray(output, 448 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK6);
			tmp.intoArray(output, 576 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14).and(MASK6);
			tmp.intoArray(output, 704 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20).and(MASK6);
			tmp.intoArray(output, 832 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 26).and(MASK6);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 96 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 6));
			tmp.intoArray(output, 960 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK6);
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6).and(MASK6);
			tmp.intoArray(output, 160 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12).and(MASK6);
			tmp.intoArray(output, 288 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 18).and(MASK6);
			tmp.intoArray(output, 416 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK6);
			tmp.intoArray(output, 544 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 30).and(MASK2);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 128 + i * stride);
			tmp = tmp.or(src.and(MASK4).lanewise(VectorOperators.LSHL, 2));
			tmp.intoArray(output, 672 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4).and(MASK6);
			tmp.intoArray(output, 800 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10).and(MASK6);
			tmp.intoArray(output, 928 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK6);
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 22).and(MASK6);
			tmp.intoArray(output, 224 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28).and(MASK4);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 160 + i * stride);
			tmp = tmp.or(src.and(MASK2).lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 352 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2).and(MASK6);
			tmp.intoArray(output, 480 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK6);
			tmp.intoArray(output, 608 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14).and(MASK6);
			tmp.intoArray(output, 736 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20).and(MASK6);
			tmp.intoArray(output, 864 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 26).and(MASK6);
			tmp.intoArray(output, 992 + i * stride);
		}
	}

	public static void unpack7(int[] input, int[] output) {
		int stride = IntVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 32;
		for (int i = 0; i < 32 / stride; i++) {
			IntVector src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, i * stride);
			IntVector tmp;
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK7);
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 7).and(MASK7);
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14).and(MASK7);
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 21).and(MASK7);
			tmp.intoArray(output, 384 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28).and(MASK4);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 32 + i * stride);
			tmp = tmp.or(src.and(MASK3).lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 512 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 3).and(MASK7);
			tmp.intoArray(output, 640 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10).and(MASK7);
			tmp.intoArray(output, 768 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 17).and(MASK7);
			tmp.intoArray(output, 896 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK7);
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 31).and(MASK1);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 64 + i * stride);
			tmp = tmp.or(src.and(MASK6).lanewise(VectorOperators.LSHL, 1));
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6).and(MASK7);
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 13).and(MASK7);
			tmp.intoArray(output, 448 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20).and(MASK7);
			tmp.intoArray(output, 576 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 27).and(MASK5);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 96 + i * stride);
			tmp = tmp.or(src.and(MASK2).lanewise(VectorOperators.LSHL, 5));
			tmp.intoArray(output, 704 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2).and(MASK7);
			tmp.intoArray(output, 832 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 9).and(MASK7);
			tmp.intoArray(output, 960 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK7);
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 23).and(MASK7);
			tmp.intoArray(output, 160 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 30).and(MASK2);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 128 + i * stride);
			tmp = tmp.or(src.and(MASK5).lanewise(VectorOperators.LSHL, 2));
			tmp.intoArray(output, 288 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 5).and(MASK7);
			tmp.intoArray(output, 416 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12).and(MASK7);
			tmp.intoArray(output, 544 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 19).and(MASK7);
			tmp.intoArray(output, 672 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 26).and(MASK6);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 160 + i * stride);
			tmp = tmp.or(src.and(MASK1).lanewise(VectorOperators.LSHL, 6));
			tmp.intoArray(output, 800 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 1).and(MASK7);
			tmp.intoArray(output, 928 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK7);
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 15).and(MASK7);
			tmp.intoArray(output, 224 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 22).and(MASK7);
			tmp.intoArray(output, 352 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 29).and(MASK3);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 192 + i * stride);
			tmp = tmp.or(src.and(MASK4).lanewise(VectorOperators.LSHL, 3));
			tmp.intoArray(output, 480 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4).and(MASK7);
			tmp.intoArray(output, 608 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 11).and(MASK7);
			tmp.intoArray(output, 736 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 18).and(MASK7);
			tmp.intoArray(output, 864 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 25).and(MASK7);
			tmp.intoArray(output, 992 + i * stride);
		}
	}

	public static void unpack8(int[] input, int[] output) {
		int stride = IntVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 32;
		for (int i = 0; i < 32 / stride; i++) {
			IntVector src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, i * stride);
			IntVector tmp;
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK8);
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK8);
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK8);
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK8);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 32 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 384 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK8);
			tmp.intoArray(output, 512 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK8);
			tmp.intoArray(output, 640 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK8);
			tmp.intoArray(output, 768 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK8);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 64 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 896 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK8);
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK8);
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK8);
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK8);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 96 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 448 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK8);
			tmp.intoArray(output, 576 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK8);
			tmp.intoArray(output, 704 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK8);
			tmp.intoArray(output, 832 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK8);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 128 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 960 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK8);
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK8);
			tmp.intoArray(output, 160 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK8);
			tmp.intoArray(output, 288 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK8);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 160 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 416 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK8);
			tmp.intoArray(output, 544 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK8);
			tmp.intoArray(output, 672 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK8);
			tmp.intoArray(output, 800 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK8);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 192 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 928 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK8);
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK8);
			tmp.intoArray(output, 224 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK8);
			tmp.intoArray(output, 352 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK8);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 224 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 480 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK8);
			tmp.intoArray(output, 608 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK8);
			tmp.intoArray(output, 736 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK8);
			tmp.intoArray(output, 864 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK8);
			tmp.intoArray(output, 992 + i * stride);
		}
	}

	public static void unpack9(int[] input, int[] output) {
		int stride = IntVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 32;
		for (int i = 0; i < 32 / stride; i++) {
			IntVector src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, i * stride);
			IntVector tmp;
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK9);
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 9).and(MASK9);
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 18).and(MASK9);
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 27).and(MASK5);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 32 + i * stride);
			tmp = tmp.or(src.and(MASK4).lanewise(VectorOperators.LSHL, 5));
			tmp.intoArray(output, 384 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4).and(MASK9);
			tmp.intoArray(output, 512 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 13).and(MASK9);
			tmp.intoArray(output, 640 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 22).and(MASK9);
			tmp.intoArray(output, 768 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 31).and(MASK1);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 64 + i * stride);
			tmp = tmp.or(src.and(MASK8).lanewise(VectorOperators.LSHL, 1));
			tmp.intoArray(output, 896 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK9);
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 17).and(MASK9);
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 26).and(MASK6);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 96 + i * stride);
			tmp = tmp.or(src.and(MASK3).lanewise(VectorOperators.LSHL, 6));
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 3).and(MASK9);
			tmp.intoArray(output, 448 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12).and(MASK9);
			tmp.intoArray(output, 576 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 21).and(MASK9);
			tmp.intoArray(output, 704 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 30).and(MASK2);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 128 + i * stride);
			tmp = tmp.or(src.and(MASK7).lanewise(VectorOperators.LSHL, 2));
			tmp.intoArray(output, 832 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 7).and(MASK9);
			tmp.intoArray(output, 960 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK9);
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 25).and(MASK7);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 160 + i * stride);
			tmp = tmp.or(src.and(MASK2).lanewise(VectorOperators.LSHL, 7));
			tmp.intoArray(output, 160 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2).and(MASK9);
			tmp.intoArray(output, 288 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 11).and(MASK9);
			tmp.intoArray(output, 416 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20).and(MASK9);
			tmp.intoArray(output, 544 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 29).and(MASK3);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 192 + i * stride);
			tmp = tmp.or(src.and(MASK6).lanewise(VectorOperators.LSHL, 3));
			tmp.intoArray(output, 672 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6).and(MASK9);
			tmp.intoArray(output, 800 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 15).and(MASK9);
			tmp.intoArray(output, 928 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK8);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 224 + i * stride);
			tmp = tmp.or(src.and(MASK1).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 1).and(MASK9);
			tmp.intoArray(output, 224 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10).and(MASK9);
			tmp.intoArray(output, 352 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 19).and(MASK9);
			tmp.intoArray(output, 480 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28).and(MASK4);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 256 + i * stride);
			tmp = tmp.or(src.and(MASK5).lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 608 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 5).and(MASK9);
			tmp.intoArray(output, 736 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14).and(MASK9);
			tmp.intoArray(output, 864 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 23).and(MASK9);
			tmp.intoArray(output, 992 + i * stride);
		}
	}

	public static void unpack10(int[] input, int[] output) {
		int stride = IntVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 32;
		for (int i = 0; i < 32 / stride; i++) {
			IntVector src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, i * stride);
			IntVector tmp;
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK10);
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10).and(MASK10);
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20).and(MASK10);
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 30).and(MASK2);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 32 + i * stride);
			tmp = tmp.or(src.and(MASK8).lanewise(VectorOperators.LSHL, 2));
			tmp.intoArray(output, 384 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK10);
			tmp.intoArray(output, 512 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 18).and(MASK10);
			tmp.intoArray(output, 640 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28).and(MASK4);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 64 + i * stride);
			tmp = tmp.or(src.and(MASK6).lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 768 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6).and(MASK10);
			tmp.intoArray(output, 896 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK10);
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 26).and(MASK6);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 96 + i * stride);
			tmp = tmp.or(src.and(MASK4).lanewise(VectorOperators.LSHL, 6));
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4).and(MASK10);
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14).and(MASK10);
			tmp.intoArray(output, 448 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK8);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 128 + i * stride);
			tmp = tmp.or(src.and(MASK2).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 576 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2).and(MASK10);
			tmp.intoArray(output, 704 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12).and(MASK10);
			tmp.intoArray(output, 832 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 22).and(MASK10);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 160 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 10));
			tmp.intoArray(output, 960 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK10);
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10).and(MASK10);
			tmp.intoArray(output, 160 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20).and(MASK10);
			tmp.intoArray(output, 288 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 30).and(MASK2);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 192 + i * stride);
			tmp = tmp.or(src.and(MASK8).lanewise(VectorOperators.LSHL, 2));
			tmp.intoArray(output, 416 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK10);
			tmp.intoArray(output, 544 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 18).and(MASK10);
			tmp.intoArray(output, 672 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28).and(MASK4);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 224 + i * stride);
			tmp = tmp.or(src.and(MASK6).lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 800 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6).and(MASK10);
			tmp.intoArray(output, 928 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK10);
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 26).and(MASK6);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 256 + i * stride);
			tmp = tmp.or(src.and(MASK4).lanewise(VectorOperators.LSHL, 6));
			tmp.intoArray(output, 224 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4).and(MASK10);
			tmp.intoArray(output, 352 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14).and(MASK10);
			tmp.intoArray(output, 480 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK8);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 288 + i * stride);
			tmp = tmp.or(src.and(MASK2).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 608 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2).and(MASK10);
			tmp.intoArray(output, 736 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12).and(MASK10);
			tmp.intoArray(output, 864 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 22).and(MASK10);
			tmp.intoArray(output, 992 + i * stride);
		}
	}

	public static void unpack11(int[] input, int[] output) {
		int stride = IntVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 32;
		for (int i = 0; i < 32 / stride; i++) {
			IntVector src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, i * stride);
			IntVector tmp;
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK11);
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 11).and(MASK11);
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 22).and(MASK10);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 32 + i * stride);
			tmp = tmp.or(src.and(MASK1).lanewise(VectorOperators.LSHL, 10));
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 1).and(MASK11);
			tmp.intoArray(output, 384 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12).and(MASK11);
			tmp.intoArray(output, 512 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 23).and(MASK9);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 64 + i * stride);
			tmp = tmp.or(src.and(MASK2).lanewise(VectorOperators.LSHL, 9));
			tmp.intoArray(output, 640 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2).and(MASK11);
			tmp.intoArray(output, 768 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 13).and(MASK11);
			tmp.intoArray(output, 896 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK8);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 96 + i * stride);
			tmp = tmp.or(src.and(MASK3).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 3).and(MASK11);
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14).and(MASK11);
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 25).and(MASK7);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 128 + i * stride);
			tmp = tmp.or(src.and(MASK4).lanewise(VectorOperators.LSHL, 7));
			tmp.intoArray(output, 448 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4).and(MASK11);
			tmp.intoArray(output, 576 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 15).and(MASK11);
			tmp.intoArray(output, 704 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 26).and(MASK6);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 160 + i * stride);
			tmp = tmp.or(src.and(MASK5).lanewise(VectorOperators.LSHL, 6));
			tmp.intoArray(output, 832 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 5).and(MASK11);
			tmp.intoArray(output, 960 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK11);
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 27).and(MASK5);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 192 + i * stride);
			tmp = tmp.or(src.and(MASK6).lanewise(VectorOperators.LSHL, 5));
			tmp.intoArray(output, 160 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6).and(MASK11);
			tmp.intoArray(output, 288 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 17).and(MASK11);
			tmp.intoArray(output, 416 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28).and(MASK4);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 224 + i * stride);
			tmp = tmp.or(src.and(MASK7).lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 544 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 7).and(MASK11);
			tmp.intoArray(output, 672 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 18).and(MASK11);
			tmp.intoArray(output, 800 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 29).and(MASK3);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 256 + i * stride);
			tmp = tmp.or(src.and(MASK8).lanewise(VectorOperators.LSHL, 3));
			tmp.intoArray(output, 928 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK11);
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 19).and(MASK11);
			tmp.intoArray(output, 224 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 30).and(MASK2);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 288 + i * stride);
			tmp = tmp.or(src.and(MASK9).lanewise(VectorOperators.LSHL, 2));
			tmp.intoArray(output, 352 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 9).and(MASK11);
			tmp.intoArray(output, 480 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20).and(MASK11);
			tmp.intoArray(output, 608 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 31).and(MASK1);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 320 + i * stride);
			tmp = tmp.or(src.and(MASK10).lanewise(VectorOperators.LSHL, 1));
			tmp.intoArray(output, 736 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10).and(MASK11);
			tmp.intoArray(output, 864 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 21).and(MASK11);
			tmp.intoArray(output, 992 + i * stride);
		}
	}

	public static void unpack12(int[] input, int[] output) {
		int stride = IntVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 32;
		for (int i = 0; i < 32 / stride; i++) {
			IntVector src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, i * stride);
			IntVector tmp;
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK12);
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12).and(MASK12);
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK8);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 32 + i * stride);
			tmp = tmp.or(src.and(MASK4).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4).and(MASK12);
			tmp.intoArray(output, 384 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK12);
			tmp.intoArray(output, 512 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28).and(MASK4);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 64 + i * stride);
			tmp = tmp.or(src.and(MASK8).lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 640 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK12);
			tmp.intoArray(output, 768 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20).and(MASK12);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 96 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 896 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK12);
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12).and(MASK12);
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK8);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 128 + i * stride);
			tmp = tmp.or(src.and(MASK4).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4).and(MASK12);
			tmp.intoArray(output, 448 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK12);
			tmp.intoArray(output, 576 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28).and(MASK4);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 160 + i * stride);
			tmp = tmp.or(src.and(MASK8).lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 704 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK12);
			tmp.intoArray(output, 832 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20).and(MASK12);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 192 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 960 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK12);
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12).and(MASK12);
			tmp.intoArray(output, 160 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK8);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 224 + i * stride);
			tmp = tmp.or(src.and(MASK4).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 288 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4).and(MASK12);
			tmp.intoArray(output, 416 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK12);
			tmp.intoArray(output, 544 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28).and(MASK4);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 256 + i * stride);
			tmp = tmp.or(src.and(MASK8).lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 672 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK12);
			tmp.intoArray(output, 800 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20).and(MASK12);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 288 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 928 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK12);
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12).and(MASK12);
			tmp.intoArray(output, 224 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK8);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 320 + i * stride);
			tmp = tmp.or(src.and(MASK4).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 352 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4).and(MASK12);
			tmp.intoArray(output, 480 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK12);
			tmp.intoArray(output, 608 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28).and(MASK4);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 352 + i * stride);
			tmp = tmp.or(src.and(MASK8).lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 736 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK12);
			tmp.intoArray(output, 864 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20).and(MASK12);
			tmp.intoArray(output, 992 + i * stride);
		}
	}

	public static void unpack13(int[] input, int[] output) {
		int stride = IntVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 32;
		for (int i = 0; i < 32 / stride; i++) {
			IntVector src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, i * stride);
			IntVector tmp;
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK13);
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 13).and(MASK13);
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 26).and(MASK6);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 32 + i * stride);
			tmp = tmp.or(src.and(MASK7).lanewise(VectorOperators.LSHL, 6));
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 7).and(MASK13);
			tmp.intoArray(output, 384 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20).and(MASK12);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 64 + i * stride);
			tmp = tmp.or(src.and(MASK1).lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 512 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 1).and(MASK13);
			tmp.intoArray(output, 640 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14).and(MASK13);
			tmp.intoArray(output, 768 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 27).and(MASK5);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 96 + i * stride);
			tmp = tmp.or(src.and(MASK8).lanewise(VectorOperators.LSHL, 5));
			tmp.intoArray(output, 896 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK13);
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 21).and(MASK11);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 128 + i * stride);
			tmp = tmp.or(src.and(MASK2).lanewise(VectorOperators.LSHL, 11));
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2).and(MASK13);
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 15).and(MASK13);
			tmp.intoArray(output, 448 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28).and(MASK4);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 160 + i * stride);
			tmp = tmp.or(src.and(MASK9).lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 576 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 9).and(MASK13);
			tmp.intoArray(output, 704 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 22).and(MASK10);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 192 + i * stride);
			tmp = tmp.or(src.and(MASK3).lanewise(VectorOperators.LSHL, 10));
			tmp.intoArray(output, 832 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 3).and(MASK13);
			tmp.intoArray(output, 960 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK13);
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 29).and(MASK3);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 224 + i * stride);
			tmp = tmp.or(src.and(MASK10).lanewise(VectorOperators.LSHL, 3));
			tmp.intoArray(output, 160 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10).and(MASK13);
			tmp.intoArray(output, 288 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 23).and(MASK9);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 256 + i * stride);
			tmp = tmp.or(src.and(MASK4).lanewise(VectorOperators.LSHL, 9));
			tmp.intoArray(output, 416 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4).and(MASK13);
			tmp.intoArray(output, 544 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 17).and(MASK13);
			tmp.intoArray(output, 672 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 30).and(MASK2);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 288 + i * stride);
			tmp = tmp.or(src.and(MASK11).lanewise(VectorOperators.LSHL, 2));
			tmp.intoArray(output, 800 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 11).and(MASK13);
			tmp.intoArray(output, 928 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK8);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 320 + i * stride);
			tmp = tmp.or(src.and(MASK5).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 5).and(MASK13);
			tmp.intoArray(output, 224 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 18).and(MASK13);
			tmp.intoArray(output, 352 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 31).and(MASK1);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 352 + i * stride);
			tmp = tmp.or(src.and(MASK12).lanewise(VectorOperators.LSHL, 1));
			tmp.intoArray(output, 480 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12).and(MASK13);
			tmp.intoArray(output, 608 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 25).and(MASK7);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 384 + i * stride);
			tmp = tmp.or(src.and(MASK6).lanewise(VectorOperators.LSHL, 7));
			tmp.intoArray(output, 736 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6).and(MASK13);
			tmp.intoArray(output, 864 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 19).and(MASK13);
			tmp.intoArray(output, 992 + i * stride);
		}
	}

	public static void unpack14(int[] input, int[] output) {
		int stride = IntVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 32;
		for (int i = 0; i < 32 / stride; i++) {
			IntVector src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, i * stride);
			IntVector tmp;
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK14);
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14).and(MASK14);
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28).and(MASK4);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 32 + i * stride);
			tmp = tmp.or(src.and(MASK10).lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10).and(MASK14);
			tmp.intoArray(output, 384 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK8);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 64 + i * stride);
			tmp = tmp.or(src.and(MASK6).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 512 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6).and(MASK14);
			tmp.intoArray(output, 640 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20).and(MASK12);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 96 + i * stride);
			tmp = tmp.or(src.and(MASK2).lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 768 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2).and(MASK14);
			tmp.intoArray(output, 896 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK14);
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 30).and(MASK2);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 128 + i * stride);
			tmp = tmp.or(src.and(MASK12).lanewise(VectorOperators.LSHL, 2));
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12).and(MASK14);
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 26).and(MASK6);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 160 + i * stride);
			tmp = tmp.or(src.and(MASK8).lanewise(VectorOperators.LSHL, 6));
			tmp.intoArray(output, 448 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK14);
			tmp.intoArray(output, 576 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 22).and(MASK10);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 192 + i * stride);
			tmp = tmp.or(src.and(MASK4).lanewise(VectorOperators.LSHL, 10));
			tmp.intoArray(output, 704 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4).and(MASK14);
			tmp.intoArray(output, 832 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 18).and(MASK14);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 224 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 14));
			tmp.intoArray(output, 960 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK14);
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14).and(MASK14);
			tmp.intoArray(output, 160 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28).and(MASK4);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 256 + i * stride);
			tmp = tmp.or(src.and(MASK10).lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 288 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10).and(MASK14);
			tmp.intoArray(output, 416 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK8);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 288 + i * stride);
			tmp = tmp.or(src.and(MASK6).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 544 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6).and(MASK14);
			tmp.intoArray(output, 672 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20).and(MASK12);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 320 + i * stride);
			tmp = tmp.or(src.and(MASK2).lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 800 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2).and(MASK14);
			tmp.intoArray(output, 928 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK14);
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 30).and(MASK2);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 352 + i * stride);
			tmp = tmp.or(src.and(MASK12).lanewise(VectorOperators.LSHL, 2));
			tmp.intoArray(output, 224 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12).and(MASK14);
			tmp.intoArray(output, 352 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 26).and(MASK6);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 384 + i * stride);
			tmp = tmp.or(src.and(MASK8).lanewise(VectorOperators.LSHL, 6));
			tmp.intoArray(output, 480 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK14);
			tmp.intoArray(output, 608 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 22).and(MASK10);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 416 + i * stride);
			tmp = tmp.or(src.and(MASK4).lanewise(VectorOperators.LSHL, 10));
			tmp.intoArray(output, 736 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4).and(MASK14);
			tmp.intoArray(output, 864 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 18).and(MASK14);
			tmp.intoArray(output, 992 + i * stride);
		}
	}

	public static void unpack15(int[] input, int[] output) {
		int stride = IntVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 32;
		for (int i = 0; i < 32 / stride; i++) {
			IntVector src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, i * stride);
			IntVector tmp;
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK15);
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 15).and(MASK15);
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 30).and(MASK2);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 32 + i * stride);
			tmp = tmp.or(src.and(MASK13).lanewise(VectorOperators.LSHL, 2));
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 13).and(MASK15);
			tmp.intoArray(output, 384 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28).and(MASK4);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 64 + i * stride);
			tmp = tmp.or(src.and(MASK11).lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 512 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 11).and(MASK15);
			tmp.intoArray(output, 640 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 26).and(MASK6);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 96 + i * stride);
			tmp = tmp.or(src.and(MASK9).lanewise(VectorOperators.LSHL, 6));
			tmp.intoArray(output, 768 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 9).and(MASK15);
			tmp.intoArray(output, 896 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK8);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 128 + i * stride);
			tmp = tmp.or(src.and(MASK7).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 7).and(MASK15);
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 22).and(MASK10);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 160 + i * stride);
			tmp = tmp.or(src.and(MASK5).lanewise(VectorOperators.LSHL, 10));
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 5).and(MASK15);
			tmp.intoArray(output, 448 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20).and(MASK12);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 192 + i * stride);
			tmp = tmp.or(src.and(MASK3).lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 576 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 3).and(MASK15);
			tmp.intoArray(output, 704 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 18).and(MASK14);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 224 + i * stride);
			tmp = tmp.or(src.and(MASK1).lanewise(VectorOperators.LSHL, 14));
			tmp.intoArray(output, 832 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 1).and(MASK15);
			tmp.intoArray(output, 960 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK15);
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 31).and(MASK1);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 256 + i * stride);
			tmp = tmp.or(src.and(MASK14).lanewise(VectorOperators.LSHL, 1));
			tmp.intoArray(output, 160 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14).and(MASK15);
			tmp.intoArray(output, 288 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 29).and(MASK3);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 288 + i * stride);
			tmp = tmp.or(src.and(MASK12).lanewise(VectorOperators.LSHL, 3));
			tmp.intoArray(output, 416 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12).and(MASK15);
			tmp.intoArray(output, 544 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 27).and(MASK5);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 320 + i * stride);
			tmp = tmp.or(src.and(MASK10).lanewise(VectorOperators.LSHL, 5));
			tmp.intoArray(output, 672 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10).and(MASK15);
			tmp.intoArray(output, 800 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 25).and(MASK7);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 352 + i * stride);
			tmp = tmp.or(src.and(MASK8).lanewise(VectorOperators.LSHL, 7));
			tmp.intoArray(output, 928 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK15);
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 23).and(MASK9);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 384 + i * stride);
			tmp = tmp.or(src.and(MASK6).lanewise(VectorOperators.LSHL, 9));
			tmp.intoArray(output, 224 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6).and(MASK15);
			tmp.intoArray(output, 352 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 21).and(MASK11);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 416 + i * stride);
			tmp = tmp.or(src.and(MASK4).lanewise(VectorOperators.LSHL, 11));
			tmp.intoArray(output, 480 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4).and(MASK15);
			tmp.intoArray(output, 608 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 19).and(MASK13);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 448 + i * stride);
			tmp = tmp.or(src.and(MASK2).lanewise(VectorOperators.LSHL, 13));
			tmp.intoArray(output, 736 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2).and(MASK15);
			tmp.intoArray(output, 864 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 17).and(MASK15);
			tmp.intoArray(output, 992 + i * stride);
		}
	}

	public static void unpack16(int[] input, int[] output) {
		int stride = IntVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 32;
		for (int i = 0; i < 32 / stride; i++) {
			IntVector src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, i * stride);
			IntVector tmp;
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK16);
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK16);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 32 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK16);
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK16);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 64 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 384 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK16);
			tmp.intoArray(output, 512 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK16);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 96 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 640 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK16);
			tmp.intoArray(output, 768 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK16);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 128 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 896 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK16);
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK16);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 160 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK16);
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK16);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 192 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 448 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK16);
			tmp.intoArray(output, 576 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK16);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 224 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 704 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK16);
			tmp.intoArray(output, 832 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK16);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 256 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 960 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK16);
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK16);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 288 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 160 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK16);
			tmp.intoArray(output, 288 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK16);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 320 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 416 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK16);
			tmp.intoArray(output, 544 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK16);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 352 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 672 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK16);
			tmp.intoArray(output, 800 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK16);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 384 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 928 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK16);
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK16);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 416 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 224 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK16);
			tmp.intoArray(output, 352 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK16);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 448 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 480 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK16);
			tmp.intoArray(output, 608 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK16);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 480 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 736 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK16);
			tmp.intoArray(output, 864 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK16);
			tmp.intoArray(output, 992 + i * stride);
		}
	}

	public static void unpack17(int[] input, int[] output) {
		int stride = IntVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 32;
		for (int i = 0; i < 32 / stride; i++) {
			IntVector src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, i * stride);
			IntVector tmp;
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK17);
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 17).and(MASK15);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 32 + i * stride);
			tmp = tmp.or(src.and(MASK2).lanewise(VectorOperators.LSHL, 15));
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2).and(MASK17);
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 19).and(MASK13);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 64 + i * stride);
			tmp = tmp.or(src.and(MASK4).lanewise(VectorOperators.LSHL, 13));
			tmp.intoArray(output, 384 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4).and(MASK17);
			tmp.intoArray(output, 512 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 21).and(MASK11);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 96 + i * stride);
			tmp = tmp.or(src.and(MASK6).lanewise(VectorOperators.LSHL, 11));
			tmp.intoArray(output, 640 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6).and(MASK17);
			tmp.intoArray(output, 768 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 23).and(MASK9);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 128 + i * stride);
			tmp = tmp.or(src.and(MASK8).lanewise(VectorOperators.LSHL, 9));
			tmp.intoArray(output, 896 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK17);
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 25).and(MASK7);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 160 + i * stride);
			tmp = tmp.or(src.and(MASK10).lanewise(VectorOperators.LSHL, 7));
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10).and(MASK17);
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 27).and(MASK5);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 192 + i * stride);
			tmp = tmp.or(src.and(MASK12).lanewise(VectorOperators.LSHL, 5));
			tmp.intoArray(output, 448 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12).and(MASK17);
			tmp.intoArray(output, 576 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 29).and(MASK3);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 224 + i * stride);
			tmp = tmp.or(src.and(MASK14).lanewise(VectorOperators.LSHL, 3));
			tmp.intoArray(output, 704 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14).and(MASK17);
			tmp.intoArray(output, 832 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 31).and(MASK1);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 256 + i * stride);
			tmp = tmp.or(src.and(MASK16).lanewise(VectorOperators.LSHL, 1));
			tmp.intoArray(output, 960 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK16);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 288 + i * stride);
			tmp = tmp.or(src.and(MASK1).lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 1).and(MASK17);
			tmp.intoArray(output, 160 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 18).and(MASK14);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 320 + i * stride);
			tmp = tmp.or(src.and(MASK3).lanewise(VectorOperators.LSHL, 14));
			tmp.intoArray(output, 288 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 3).and(MASK17);
			tmp.intoArray(output, 416 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20).and(MASK12);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 352 + i * stride);
			tmp = tmp.or(src.and(MASK5).lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 544 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 5).and(MASK17);
			tmp.intoArray(output, 672 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 22).and(MASK10);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 384 + i * stride);
			tmp = tmp.or(src.and(MASK7).lanewise(VectorOperators.LSHL, 10));
			tmp.intoArray(output, 800 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 7).and(MASK17);
			tmp.intoArray(output, 928 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK8);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 416 + i * stride);
			tmp = tmp.or(src.and(MASK9).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 9).and(MASK17);
			tmp.intoArray(output, 224 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 26).and(MASK6);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 448 + i * stride);
			tmp = tmp.or(src.and(MASK11).lanewise(VectorOperators.LSHL, 6));
			tmp.intoArray(output, 352 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 11).and(MASK17);
			tmp.intoArray(output, 480 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28).and(MASK4);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 480 + i * stride);
			tmp = tmp.or(src.and(MASK13).lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 608 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 13).and(MASK17);
			tmp.intoArray(output, 736 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 30).and(MASK2);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 512 + i * stride);
			tmp = tmp.or(src.and(MASK15).lanewise(VectorOperators.LSHL, 2));
			tmp.intoArray(output, 864 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 15).and(MASK17);
			tmp.intoArray(output, 992 + i * stride);
		}
	}

	public static void unpack18(int[] input, int[] output) {
		int stride = IntVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 32;
		for (int i = 0; i < 32 / stride; i++) {
			IntVector src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, i * stride);
			IntVector tmp;
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK18);
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 18).and(MASK14);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 32 + i * stride);
			tmp = tmp.or(src.and(MASK4).lanewise(VectorOperators.LSHL, 14));
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4).and(MASK18);
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 22).and(MASK10);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 64 + i * stride);
			tmp = tmp.or(src.and(MASK8).lanewise(VectorOperators.LSHL, 10));
			tmp.intoArray(output, 384 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK18);
			tmp.intoArray(output, 512 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 26).and(MASK6);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 96 + i * stride);
			tmp = tmp.or(src.and(MASK12).lanewise(VectorOperators.LSHL, 6));
			tmp.intoArray(output, 640 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12).and(MASK18);
			tmp.intoArray(output, 768 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 30).and(MASK2);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 128 + i * stride);
			tmp = tmp.or(src.and(MASK16).lanewise(VectorOperators.LSHL, 2));
			tmp.intoArray(output, 896 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK16);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 160 + i * stride);
			tmp = tmp.or(src.and(MASK2).lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2).and(MASK18);
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20).and(MASK12);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 192 + i * stride);
			tmp = tmp.or(src.and(MASK6).lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6).and(MASK18);
			tmp.intoArray(output, 448 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK8);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 224 + i * stride);
			tmp = tmp.or(src.and(MASK10).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 576 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10).and(MASK18);
			tmp.intoArray(output, 704 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28).and(MASK4);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 256 + i * stride);
			tmp = tmp.or(src.and(MASK14).lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 832 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14).and(MASK18);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 288 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 18));
			tmp.intoArray(output, 960 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK18);
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 18).and(MASK14);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 320 + i * stride);
			tmp = tmp.or(src.and(MASK4).lanewise(VectorOperators.LSHL, 14));
			tmp.intoArray(output, 160 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4).and(MASK18);
			tmp.intoArray(output, 288 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 22).and(MASK10);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 352 + i * stride);
			tmp = tmp.or(src.and(MASK8).lanewise(VectorOperators.LSHL, 10));
			tmp.intoArray(output, 416 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK18);
			tmp.intoArray(output, 544 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 26).and(MASK6);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 384 + i * stride);
			tmp = tmp.or(src.and(MASK12).lanewise(VectorOperators.LSHL, 6));
			tmp.intoArray(output, 672 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12).and(MASK18);
			tmp.intoArray(output, 800 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 30).and(MASK2);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 416 + i * stride);
			tmp = tmp.or(src.and(MASK16).lanewise(VectorOperators.LSHL, 2));
			tmp.intoArray(output, 928 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK16);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 448 + i * stride);
			tmp = tmp.or(src.and(MASK2).lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2).and(MASK18);
			tmp.intoArray(output, 224 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20).and(MASK12);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 480 + i * stride);
			tmp = tmp.or(src.and(MASK6).lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 352 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6).and(MASK18);
			tmp.intoArray(output, 480 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK8);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 512 + i * stride);
			tmp = tmp.or(src.and(MASK10).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 608 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10).and(MASK18);
			tmp.intoArray(output, 736 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28).and(MASK4);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 544 + i * stride);
			tmp = tmp.or(src.and(MASK14).lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 864 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14).and(MASK18);
			tmp.intoArray(output, 992 + i * stride);
		}
	}

	public static void unpack19(int[] input, int[] output) {
		int stride = IntVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 32;
		for (int i = 0; i < 32 / stride; i++) {
			IntVector src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, i * stride);
			IntVector tmp;
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK19);
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 19).and(MASK13);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 32 + i * stride);
			tmp = tmp.or(src.and(MASK6).lanewise(VectorOperators.LSHL, 13));
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6).and(MASK19);
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 25).and(MASK7);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 64 + i * stride);
			tmp = tmp.or(src.and(MASK12).lanewise(VectorOperators.LSHL, 7));
			tmp.intoArray(output, 384 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12).and(MASK19);
			tmp.intoArray(output, 512 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 31).and(MASK1);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 96 + i * stride);
			tmp = tmp.or(src.and(MASK18).lanewise(VectorOperators.LSHL, 1));
			tmp.intoArray(output, 640 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 18).and(MASK14);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 128 + i * stride);
			tmp = tmp.or(src.and(MASK5).lanewise(VectorOperators.LSHL, 14));
			tmp.intoArray(output, 768 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 5).and(MASK19);
			tmp.intoArray(output, 896 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK8);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 160 + i * stride);
			tmp = tmp.or(src.and(MASK11).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 11).and(MASK19);
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 30).and(MASK2);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 192 + i * stride);
			tmp = tmp.or(src.and(MASK17).lanewise(VectorOperators.LSHL, 2));
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 17).and(MASK15);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 224 + i * stride);
			tmp = tmp.or(src.and(MASK4).lanewise(VectorOperators.LSHL, 15));
			tmp.intoArray(output, 448 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4).and(MASK19);
			tmp.intoArray(output, 576 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 23).and(MASK9);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 256 + i * stride);
			tmp = tmp.or(src.and(MASK10).lanewise(VectorOperators.LSHL, 9));
			tmp.intoArray(output, 704 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10).and(MASK19);
			tmp.intoArray(output, 832 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 29).and(MASK3);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 288 + i * stride);
			tmp = tmp.or(src.and(MASK16).lanewise(VectorOperators.LSHL, 3));
			tmp.intoArray(output, 960 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK16);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 320 + i * stride);
			tmp = tmp.or(src.and(MASK3).lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 3).and(MASK19);
			tmp.intoArray(output, 160 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 22).and(MASK10);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 352 + i * stride);
			tmp = tmp.or(src.and(MASK9).lanewise(VectorOperators.LSHL, 10));
			tmp.intoArray(output, 288 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 9).and(MASK19);
			tmp.intoArray(output, 416 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28).and(MASK4);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 384 + i * stride);
			tmp = tmp.or(src.and(MASK15).lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 544 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 15).and(MASK17);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 416 + i * stride);
			tmp = tmp.or(src.and(MASK2).lanewise(VectorOperators.LSHL, 17));
			tmp.intoArray(output, 672 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2).and(MASK19);
			tmp.intoArray(output, 800 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 21).and(MASK11);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 448 + i * stride);
			tmp = tmp.or(src.and(MASK8).lanewise(VectorOperators.LSHL, 11));
			tmp.intoArray(output, 928 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK19);
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 27).and(MASK5);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 480 + i * stride);
			tmp = tmp.or(src.and(MASK14).lanewise(VectorOperators.LSHL, 5));
			tmp.intoArray(output, 224 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14).and(MASK18);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 512 + i * stride);
			tmp = tmp.or(src.and(MASK1).lanewise(VectorOperators.LSHL, 18));
			tmp.intoArray(output, 352 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 1).and(MASK19);
			tmp.intoArray(output, 480 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20).and(MASK12);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 544 + i * stride);
			tmp = tmp.or(src.and(MASK7).lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 608 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 7).and(MASK19);
			tmp.intoArray(output, 736 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 26).and(MASK6);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 576 + i * stride);
			tmp = tmp.or(src.and(MASK13).lanewise(VectorOperators.LSHL, 6));
			tmp.intoArray(output, 864 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 13).and(MASK19);
			tmp.intoArray(output, 992 + i * stride);
		}
	}

	public static void unpack20(int[] input, int[] output) {
		int stride = IntVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 32;
		for (int i = 0; i < 32 / stride; i++) {
			IntVector src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, i * stride);
			IntVector tmp;
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK20);
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20).and(MASK12);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 32 + i * stride);
			tmp = tmp.or(src.and(MASK8).lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK20);
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28).and(MASK4);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 64 + i * stride);
			tmp = tmp.or(src.and(MASK16).lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 384 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK16);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 96 + i * stride);
			tmp = tmp.or(src.and(MASK4).lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 512 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4).and(MASK20);
			tmp.intoArray(output, 640 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK8);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 128 + i * stride);
			tmp = tmp.or(src.and(MASK12).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 768 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12).and(MASK20);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 160 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 20));
			tmp.intoArray(output, 896 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK20);
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20).and(MASK12);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 192 + i * stride);
			tmp = tmp.or(src.and(MASK8).lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK20);
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28).and(MASK4);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 224 + i * stride);
			tmp = tmp.or(src.and(MASK16).lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 448 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK16);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 256 + i * stride);
			tmp = tmp.or(src.and(MASK4).lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 576 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4).and(MASK20);
			tmp.intoArray(output, 704 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK8);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 288 + i * stride);
			tmp = tmp.or(src.and(MASK12).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 832 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12).and(MASK20);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 320 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 20));
			tmp.intoArray(output, 960 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK20);
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20).and(MASK12);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 352 + i * stride);
			tmp = tmp.or(src.and(MASK8).lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 160 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK20);
			tmp.intoArray(output, 288 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28).and(MASK4);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 384 + i * stride);
			tmp = tmp.or(src.and(MASK16).lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 416 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK16);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 416 + i * stride);
			tmp = tmp.or(src.and(MASK4).lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 544 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4).and(MASK20);
			tmp.intoArray(output, 672 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK8);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 448 + i * stride);
			tmp = tmp.or(src.and(MASK12).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 800 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12).and(MASK20);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 480 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 20));
			tmp.intoArray(output, 928 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK20);
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20).and(MASK12);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 512 + i * stride);
			tmp = tmp.or(src.and(MASK8).lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 224 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK20);
			tmp.intoArray(output, 352 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28).and(MASK4);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 544 + i * stride);
			tmp = tmp.or(src.and(MASK16).lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 480 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK16);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 576 + i * stride);
			tmp = tmp.or(src.and(MASK4).lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 608 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4).and(MASK20);
			tmp.intoArray(output, 736 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK8);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 608 + i * stride);
			tmp = tmp.or(src.and(MASK12).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 864 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12).and(MASK20);
			tmp.intoArray(output, 992 + i * stride);
		}
	}

	public static void unpack21(int[] input, int[] output) {
		int stride = IntVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 32;
		for (int i = 0; i < 32 / stride; i++) {
			IntVector src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, i * stride);
			IntVector tmp;
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK21);
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 21).and(MASK11);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 32 + i * stride);
			tmp = tmp.or(src.and(MASK10).lanewise(VectorOperators.LSHL, 11));
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10).and(MASK21);
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 31).and(MASK1);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 64 + i * stride);
			tmp = tmp.or(src.and(MASK20).lanewise(VectorOperators.LSHL, 1));
			tmp.intoArray(output, 384 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20).and(MASK12);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 96 + i * stride);
			tmp = tmp.or(src.and(MASK9).lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 512 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 9).and(MASK21);
			tmp.intoArray(output, 640 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 30).and(MASK2);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 128 + i * stride);
			tmp = tmp.or(src.and(MASK19).lanewise(VectorOperators.LSHL, 2));
			tmp.intoArray(output, 768 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 19).and(MASK13);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 160 + i * stride);
			tmp = tmp.or(src.and(MASK8).lanewise(VectorOperators.LSHL, 13));
			tmp.intoArray(output, 896 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK21);
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 29).and(MASK3);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 192 + i * stride);
			tmp = tmp.or(src.and(MASK18).lanewise(VectorOperators.LSHL, 3));
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 18).and(MASK14);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 224 + i * stride);
			tmp = tmp.or(src.and(MASK7).lanewise(VectorOperators.LSHL, 14));
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 7).and(MASK21);
			tmp.intoArray(output, 448 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28).and(MASK4);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 256 + i * stride);
			tmp = tmp.or(src.and(MASK17).lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 576 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 17).and(MASK15);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 288 + i * stride);
			tmp = tmp.or(src.and(MASK6).lanewise(VectorOperators.LSHL, 15));
			tmp.intoArray(output, 704 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6).and(MASK21);
			tmp.intoArray(output, 832 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 27).and(MASK5);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 320 + i * stride);
			tmp = tmp.or(src.and(MASK16).lanewise(VectorOperators.LSHL, 5));
			tmp.intoArray(output, 960 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK16);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 352 + i * stride);
			tmp = tmp.or(src.and(MASK5).lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 5).and(MASK21);
			tmp.intoArray(output, 160 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 26).and(MASK6);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 384 + i * stride);
			tmp = tmp.or(src.and(MASK15).lanewise(VectorOperators.LSHL, 6));
			tmp.intoArray(output, 288 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 15).and(MASK17);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 416 + i * stride);
			tmp = tmp.or(src.and(MASK4).lanewise(VectorOperators.LSHL, 17));
			tmp.intoArray(output, 416 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4).and(MASK21);
			tmp.intoArray(output, 544 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 25).and(MASK7);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 448 + i * stride);
			tmp = tmp.or(src.and(MASK14).lanewise(VectorOperators.LSHL, 7));
			tmp.intoArray(output, 672 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14).and(MASK18);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 480 + i * stride);
			tmp = tmp.or(src.and(MASK3).lanewise(VectorOperators.LSHL, 18));
			tmp.intoArray(output, 800 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 3).and(MASK21);
			tmp.intoArray(output, 928 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK8);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 512 + i * stride);
			tmp = tmp.or(src.and(MASK13).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 13).and(MASK19);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 544 + i * stride);
			tmp = tmp.or(src.and(MASK2).lanewise(VectorOperators.LSHL, 19));
			tmp.intoArray(output, 224 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2).and(MASK21);
			tmp.intoArray(output, 352 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 23).and(MASK9);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 576 + i * stride);
			tmp = tmp.or(src.and(MASK12).lanewise(VectorOperators.LSHL, 9));
			tmp.intoArray(output, 480 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12).and(MASK20);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 608 + i * stride);
			tmp = tmp.or(src.and(MASK1).lanewise(VectorOperators.LSHL, 20));
			tmp.intoArray(output, 608 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 1).and(MASK21);
			tmp.intoArray(output, 736 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 22).and(MASK10);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 640 + i * stride);
			tmp = tmp.or(src.and(MASK11).lanewise(VectorOperators.LSHL, 10));
			tmp.intoArray(output, 864 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 11).and(MASK21);
			tmp.intoArray(output, 992 + i * stride);
		}
	}

	public static void unpack22(int[] input, int[] output) {
		int stride = IntVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 32;
		for (int i = 0; i < 32 / stride; i++) {
			IntVector src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, i * stride);
			IntVector tmp;
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK22);
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 22).and(MASK10);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 32 + i * stride);
			tmp = tmp.or(src.and(MASK12).lanewise(VectorOperators.LSHL, 10));
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12).and(MASK20);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 64 + i * stride);
			tmp = tmp.or(src.and(MASK2).lanewise(VectorOperators.LSHL, 20));
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2).and(MASK22);
			tmp.intoArray(output, 384 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK8);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 96 + i * stride);
			tmp = tmp.or(src.and(MASK14).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 512 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14).and(MASK18);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 128 + i * stride);
			tmp = tmp.or(src.and(MASK4).lanewise(VectorOperators.LSHL, 18));
			tmp.intoArray(output, 640 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4).and(MASK22);
			tmp.intoArray(output, 768 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 26).and(MASK6);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 160 + i * stride);
			tmp = tmp.or(src.and(MASK16).lanewise(VectorOperators.LSHL, 6));
			tmp.intoArray(output, 896 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK16);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 192 + i * stride);
			tmp = tmp.or(src.and(MASK6).lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6).and(MASK22);
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28).and(MASK4);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 224 + i * stride);
			tmp = tmp.or(src.and(MASK18).lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 18).and(MASK14);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 256 + i * stride);
			tmp = tmp.or(src.and(MASK8).lanewise(VectorOperators.LSHL, 14));
			tmp.intoArray(output, 448 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK22);
			tmp.intoArray(output, 576 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 30).and(MASK2);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 288 + i * stride);
			tmp = tmp.or(src.and(MASK20).lanewise(VectorOperators.LSHL, 2));
			tmp.intoArray(output, 704 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20).and(MASK12);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 320 + i * stride);
			tmp = tmp.or(src.and(MASK10).lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 832 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10).and(MASK22);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 352 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 22));
			tmp.intoArray(output, 960 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK22);
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 22).and(MASK10);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 384 + i * stride);
			tmp = tmp.or(src.and(MASK12).lanewise(VectorOperators.LSHL, 10));
			tmp.intoArray(output, 160 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12).and(MASK20);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 416 + i * stride);
			tmp = tmp.or(src.and(MASK2).lanewise(VectorOperators.LSHL, 20));
			tmp.intoArray(output, 288 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2).and(MASK22);
			tmp.intoArray(output, 416 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK8);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 448 + i * stride);
			tmp = tmp.or(src.and(MASK14).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 544 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14).and(MASK18);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 480 + i * stride);
			tmp = tmp.or(src.and(MASK4).lanewise(VectorOperators.LSHL, 18));
			tmp.intoArray(output, 672 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4).and(MASK22);
			tmp.intoArray(output, 800 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 26).and(MASK6);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 512 + i * stride);
			tmp = tmp.or(src.and(MASK16).lanewise(VectorOperators.LSHL, 6));
			tmp.intoArray(output, 928 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK16);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 544 + i * stride);
			tmp = tmp.or(src.and(MASK6).lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6).and(MASK22);
			tmp.intoArray(output, 224 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28).and(MASK4);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 576 + i * stride);
			tmp = tmp.or(src.and(MASK18).lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 352 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 18).and(MASK14);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 608 + i * stride);
			tmp = tmp.or(src.and(MASK8).lanewise(VectorOperators.LSHL, 14));
			tmp.intoArray(output, 480 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK22);
			tmp.intoArray(output, 608 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 30).and(MASK2);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 640 + i * stride);
			tmp = tmp.or(src.and(MASK20).lanewise(VectorOperators.LSHL, 2));
			tmp.intoArray(output, 736 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20).and(MASK12);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 672 + i * stride);
			tmp = tmp.or(src.and(MASK10).lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 864 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10).and(MASK22);
			tmp.intoArray(output, 992 + i * stride);
		}
	}

	public static void unpack23(int[] input, int[] output) {
		int stride = IntVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 32;
		for (int i = 0; i < 32 / stride; i++) {
			IntVector src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, i * stride);
			IntVector tmp;
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK23);
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 23).and(MASK9);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 32 + i * stride);
			tmp = tmp.or(src.and(MASK14).lanewise(VectorOperators.LSHL, 9));
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14).and(MASK18);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 64 + i * stride);
			tmp = tmp.or(src.and(MASK5).lanewise(VectorOperators.LSHL, 18));
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 5).and(MASK23);
			tmp.intoArray(output, 384 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28).and(MASK4);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 96 + i * stride);
			tmp = tmp.or(src.and(MASK19).lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 512 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 19).and(MASK13);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 128 + i * stride);
			tmp = tmp.or(src.and(MASK10).lanewise(VectorOperators.LSHL, 13));
			tmp.intoArray(output, 640 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10).and(MASK22);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 160 + i * stride);
			tmp = tmp.or(src.and(MASK1).lanewise(VectorOperators.LSHL, 22));
			tmp.intoArray(output, 768 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 1).and(MASK23);
			tmp.intoArray(output, 896 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK8);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 192 + i * stride);
			tmp = tmp.or(src.and(MASK15).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 15).and(MASK17);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 224 + i * stride);
			tmp = tmp.or(src.and(MASK6).lanewise(VectorOperators.LSHL, 17));
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6).and(MASK23);
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 29).and(MASK3);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 256 + i * stride);
			tmp = tmp.or(src.and(MASK20).lanewise(VectorOperators.LSHL, 3));
			tmp.intoArray(output, 448 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20).and(MASK12);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 288 + i * stride);
			tmp = tmp.or(src.and(MASK11).lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 576 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 11).and(MASK21);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 320 + i * stride);
			tmp = tmp.or(src.and(MASK2).lanewise(VectorOperators.LSHL, 21));
			tmp.intoArray(output, 704 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2).and(MASK23);
			tmp.intoArray(output, 832 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 25).and(MASK7);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 352 + i * stride);
			tmp = tmp.or(src.and(MASK16).lanewise(VectorOperators.LSHL, 7));
			tmp.intoArray(output, 960 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK16);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 384 + i * stride);
			tmp = tmp.or(src.and(MASK7).lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 7).and(MASK23);
			tmp.intoArray(output, 160 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 30).and(MASK2);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 416 + i * stride);
			tmp = tmp.or(src.and(MASK21).lanewise(VectorOperators.LSHL, 2));
			tmp.intoArray(output, 288 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 21).and(MASK11);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 448 + i * stride);
			tmp = tmp.or(src.and(MASK12).lanewise(VectorOperators.LSHL, 11));
			tmp.intoArray(output, 416 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12).and(MASK20);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 480 + i * stride);
			tmp = tmp.or(src.and(MASK3).lanewise(VectorOperators.LSHL, 20));
			tmp.intoArray(output, 544 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 3).and(MASK23);
			tmp.intoArray(output, 672 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 26).and(MASK6);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 512 + i * stride);
			tmp = tmp.or(src.and(MASK17).lanewise(VectorOperators.LSHL, 6));
			tmp.intoArray(output, 800 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 17).and(MASK15);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 544 + i * stride);
			tmp = tmp.or(src.and(MASK8).lanewise(VectorOperators.LSHL, 15));
			tmp.intoArray(output, 928 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK23);
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 31).and(MASK1);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 576 + i * stride);
			tmp = tmp.or(src.and(MASK22).lanewise(VectorOperators.LSHL, 1));
			tmp.intoArray(output, 224 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 22).and(MASK10);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 608 + i * stride);
			tmp = tmp.or(src.and(MASK13).lanewise(VectorOperators.LSHL, 10));
			tmp.intoArray(output, 352 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 13).and(MASK19);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 640 + i * stride);
			tmp = tmp.or(src.and(MASK4).lanewise(VectorOperators.LSHL, 19));
			tmp.intoArray(output, 480 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4).and(MASK23);
			tmp.intoArray(output, 608 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 27).and(MASK5);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 672 + i * stride);
			tmp = tmp.or(src.and(MASK18).lanewise(VectorOperators.LSHL, 5));
			tmp.intoArray(output, 736 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 18).and(MASK14);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 704 + i * stride);
			tmp = tmp.or(src.and(MASK9).lanewise(VectorOperators.LSHL, 14));
			tmp.intoArray(output, 864 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 9).and(MASK23);
			tmp.intoArray(output, 992 + i * stride);
		}
	}

	public static void unpack24(int[] input, int[] output) {
		int stride = IntVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 32;
		for (int i = 0; i < 32 / stride; i++) {
			IntVector src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, i * stride);
			IntVector tmp;
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK24);
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK8);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 32 + i * stride);
			tmp = tmp.or(src.and(MASK16).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK16);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 64 + i * stride);
			tmp = tmp.or(src.and(MASK8).lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK24);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 96 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 384 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK24);
			tmp.intoArray(output, 512 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK8);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 128 + i * stride);
			tmp = tmp.or(src.and(MASK16).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 640 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK16);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 160 + i * stride);
			tmp = tmp.or(src.and(MASK8).lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 768 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK24);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 192 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 896 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK24);
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK8);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 224 + i * stride);
			tmp = tmp.or(src.and(MASK16).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK16);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 256 + i * stride);
			tmp = tmp.or(src.and(MASK8).lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK24);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 288 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 448 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK24);
			tmp.intoArray(output, 576 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK8);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 320 + i * stride);
			tmp = tmp.or(src.and(MASK16).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 704 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK16);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 352 + i * stride);
			tmp = tmp.or(src.and(MASK8).lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 832 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK24);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 384 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 960 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK24);
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK8);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 416 + i * stride);
			tmp = tmp.or(src.and(MASK16).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 160 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK16);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 448 + i * stride);
			tmp = tmp.or(src.and(MASK8).lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 288 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK24);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 480 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 416 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK24);
			tmp.intoArray(output, 544 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK8);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 512 + i * stride);
			tmp = tmp.or(src.and(MASK16).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 672 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK16);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 544 + i * stride);
			tmp = tmp.or(src.and(MASK8).lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 800 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK24);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 576 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 928 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK24);
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK8);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 608 + i * stride);
			tmp = tmp.or(src.and(MASK16).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 224 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK16);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 640 + i * stride);
			tmp = tmp.or(src.and(MASK8).lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 352 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK24);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 672 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 480 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK24);
			tmp.intoArray(output, 608 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK8);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 704 + i * stride);
			tmp = tmp.or(src.and(MASK16).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 736 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK16);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 736 + i * stride);
			tmp = tmp.or(src.and(MASK8).lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 864 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK24);
			tmp.intoArray(output, 992 + i * stride);
		}
	}

	public static void unpack25(int[] input, int[] output) {
		int stride = IntVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 32;
		for (int i = 0; i < 32 / stride; i++) {
			IntVector src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, i * stride);
			IntVector tmp;
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK25);
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 25).and(MASK7);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 32 + i * stride);
			tmp = tmp.or(src.and(MASK18).lanewise(VectorOperators.LSHL, 7));
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 18).and(MASK14);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 64 + i * stride);
			tmp = tmp.or(src.and(MASK11).lanewise(VectorOperators.LSHL, 14));
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 11).and(MASK21);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 96 + i * stride);
			tmp = tmp.or(src.and(MASK4).lanewise(VectorOperators.LSHL, 21));
			tmp.intoArray(output, 384 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4).and(MASK25);
			tmp.intoArray(output, 512 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 29).and(MASK3);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 128 + i * stride);
			tmp = tmp.or(src.and(MASK22).lanewise(VectorOperators.LSHL, 3));
			tmp.intoArray(output, 640 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 22).and(MASK10);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 160 + i * stride);
			tmp = tmp.or(src.and(MASK15).lanewise(VectorOperators.LSHL, 10));
			tmp.intoArray(output, 768 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 15).and(MASK17);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 192 + i * stride);
			tmp = tmp.or(src.and(MASK8).lanewise(VectorOperators.LSHL, 17));
			tmp.intoArray(output, 896 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK24);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 224 + i * stride);
			tmp = tmp.or(src.and(MASK1).lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 1).and(MASK25);
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 26).and(MASK6);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 256 + i * stride);
			tmp = tmp.or(src.and(MASK19).lanewise(VectorOperators.LSHL, 6));
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 19).and(MASK13);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 288 + i * stride);
			tmp = tmp.or(src.and(MASK12).lanewise(VectorOperators.LSHL, 13));
			tmp.intoArray(output, 448 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12).and(MASK20);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 320 + i * stride);
			tmp = tmp.or(src.and(MASK5).lanewise(VectorOperators.LSHL, 20));
			tmp.intoArray(output, 576 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 5).and(MASK25);
			tmp.intoArray(output, 704 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 30).and(MASK2);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 352 + i * stride);
			tmp = tmp.or(src.and(MASK23).lanewise(VectorOperators.LSHL, 2));
			tmp.intoArray(output, 832 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 23).and(MASK9);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 384 + i * stride);
			tmp = tmp.or(src.and(MASK16).lanewise(VectorOperators.LSHL, 9));
			tmp.intoArray(output, 960 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK16);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 416 + i * stride);
			tmp = tmp.or(src.and(MASK9).lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 9).and(MASK23);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 448 + i * stride);
			tmp = tmp.or(src.and(MASK2).lanewise(VectorOperators.LSHL, 23));
			tmp.intoArray(output, 160 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2).and(MASK25);
			tmp.intoArray(output, 288 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 27).and(MASK5);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 480 + i * stride);
			tmp = tmp.or(src.and(MASK20).lanewise(VectorOperators.LSHL, 5));
			tmp.intoArray(output, 416 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20).and(MASK12);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 512 + i * stride);
			tmp = tmp.or(src.and(MASK13).lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 544 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 13).and(MASK19);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 544 + i * stride);
			tmp = tmp.or(src.and(MASK6).lanewise(VectorOperators.LSHL, 19));
			tmp.intoArray(output, 672 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6).and(MASK25);
			tmp.intoArray(output, 800 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 31).and(MASK1);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 576 + i * stride);
			tmp = tmp.or(src.and(MASK24).lanewise(VectorOperators.LSHL, 1));
			tmp.intoArray(output, 928 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK8);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 608 + i * stride);
			tmp = tmp.or(src.and(MASK17).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 17).and(MASK15);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 640 + i * stride);
			tmp = tmp.or(src.and(MASK10).lanewise(VectorOperators.LSHL, 15));
			tmp.intoArray(output, 224 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10).and(MASK22);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 672 + i * stride);
			tmp = tmp.or(src.and(MASK3).lanewise(VectorOperators.LSHL, 22));
			tmp.intoArray(output, 352 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 3).and(MASK25);
			tmp.intoArray(output, 480 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28).and(MASK4);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 704 + i * stride);
			tmp = tmp.or(src.and(MASK21).lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 608 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 21).and(MASK11);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 736 + i * stride);
			tmp = tmp.or(src.and(MASK14).lanewise(VectorOperators.LSHL, 11));
			tmp.intoArray(output, 736 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14).and(MASK18);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 768 + i * stride);
			tmp = tmp.or(src.and(MASK7).lanewise(VectorOperators.LSHL, 18));
			tmp.intoArray(output, 864 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 7).and(MASK25);
			tmp.intoArray(output, 992 + i * stride);
		}
	}

	public static void unpack26(int[] input, int[] output) {
		int stride = IntVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 32;
		for (int i = 0; i < 32 / stride; i++) {
			IntVector src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, i * stride);
			IntVector tmp;
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK26);
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 26).and(MASK6);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 32 + i * stride);
			tmp = tmp.or(src.and(MASK20).lanewise(VectorOperators.LSHL, 6));
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20).and(MASK12);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 64 + i * stride);
			tmp = tmp.or(src.and(MASK14).lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14).and(MASK18);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 96 + i * stride);
			tmp = tmp.or(src.and(MASK8).lanewise(VectorOperators.LSHL, 18));
			tmp.intoArray(output, 384 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK24);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 128 + i * stride);
			tmp = tmp.or(src.and(MASK2).lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 512 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2).and(MASK26);
			tmp.intoArray(output, 640 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28).and(MASK4);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 160 + i * stride);
			tmp = tmp.or(src.and(MASK22).lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 768 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 22).and(MASK10);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 192 + i * stride);
			tmp = tmp.or(src.and(MASK16).lanewise(VectorOperators.LSHL, 10));
			tmp.intoArray(output, 896 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK16);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 224 + i * stride);
			tmp = tmp.or(src.and(MASK10).lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10).and(MASK22);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 256 + i * stride);
			tmp = tmp.or(src.and(MASK4).lanewise(VectorOperators.LSHL, 22));
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4).and(MASK26);
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 30).and(MASK2);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 288 + i * stride);
			tmp = tmp.or(src.and(MASK24).lanewise(VectorOperators.LSHL, 2));
			tmp.intoArray(output, 448 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK8);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 320 + i * stride);
			tmp = tmp.or(src.and(MASK18).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 576 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 18).and(MASK14);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 352 + i * stride);
			tmp = tmp.or(src.and(MASK12).lanewise(VectorOperators.LSHL, 14));
			tmp.intoArray(output, 704 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12).and(MASK20);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 384 + i * stride);
			tmp = tmp.or(src.and(MASK6).lanewise(VectorOperators.LSHL, 20));
			tmp.intoArray(output, 832 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6).and(MASK26);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 416 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 26));
			tmp.intoArray(output, 960 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK26);
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 26).and(MASK6);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 448 + i * stride);
			tmp = tmp.or(src.and(MASK20).lanewise(VectorOperators.LSHL, 6));
			tmp.intoArray(output, 160 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20).and(MASK12);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 480 + i * stride);
			tmp = tmp.or(src.and(MASK14).lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 288 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14).and(MASK18);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 512 + i * stride);
			tmp = tmp.or(src.and(MASK8).lanewise(VectorOperators.LSHL, 18));
			tmp.intoArray(output, 416 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK24);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 544 + i * stride);
			tmp = tmp.or(src.and(MASK2).lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 544 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2).and(MASK26);
			tmp.intoArray(output, 672 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28).and(MASK4);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 576 + i * stride);
			tmp = tmp.or(src.and(MASK22).lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 800 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 22).and(MASK10);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 608 + i * stride);
			tmp = tmp.or(src.and(MASK16).lanewise(VectorOperators.LSHL, 10));
			tmp.intoArray(output, 928 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK16);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 640 + i * stride);
			tmp = tmp.or(src.and(MASK10).lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10).and(MASK22);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 672 + i * stride);
			tmp = tmp.or(src.and(MASK4).lanewise(VectorOperators.LSHL, 22));
			tmp.intoArray(output, 224 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4).and(MASK26);
			tmp.intoArray(output, 352 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 30).and(MASK2);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 704 + i * stride);
			tmp = tmp.or(src.and(MASK24).lanewise(VectorOperators.LSHL, 2));
			tmp.intoArray(output, 480 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK8);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 736 + i * stride);
			tmp = tmp.or(src.and(MASK18).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 608 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 18).and(MASK14);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 768 + i * stride);
			tmp = tmp.or(src.and(MASK12).lanewise(VectorOperators.LSHL, 14));
			tmp.intoArray(output, 736 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12).and(MASK20);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 800 + i * stride);
			tmp = tmp.or(src.and(MASK6).lanewise(VectorOperators.LSHL, 20));
			tmp.intoArray(output, 864 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6).and(MASK26);
			tmp.intoArray(output, 992 + i * stride);
		}
	}

	public static void unpack27(int[] input, int[] output) {
		int stride = IntVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 32;
		for (int i = 0; i < 32 / stride; i++) {
			IntVector src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, i * stride);
			IntVector tmp;
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK27);
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 27).and(MASK5);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 32 + i * stride);
			tmp = tmp.or(src.and(MASK22).lanewise(VectorOperators.LSHL, 5));
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 22).and(MASK10);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 64 + i * stride);
			tmp = tmp.or(src.and(MASK17).lanewise(VectorOperators.LSHL, 10));
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 17).and(MASK15);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 96 + i * stride);
			tmp = tmp.or(src.and(MASK12).lanewise(VectorOperators.LSHL, 15));
			tmp.intoArray(output, 384 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12).and(MASK20);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 128 + i * stride);
			tmp = tmp.or(src.and(MASK7).lanewise(VectorOperators.LSHL, 20));
			tmp.intoArray(output, 512 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 7).and(MASK25);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 160 + i * stride);
			tmp = tmp.or(src.and(MASK2).lanewise(VectorOperators.LSHL, 25));
			tmp.intoArray(output, 640 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2).and(MASK27);
			tmp.intoArray(output, 768 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 29).and(MASK3);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 192 + i * stride);
			tmp = tmp.or(src.and(MASK24).lanewise(VectorOperators.LSHL, 3));
			tmp.intoArray(output, 896 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK8);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 224 + i * stride);
			tmp = tmp.or(src.and(MASK19).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 19).and(MASK13);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 256 + i * stride);
			tmp = tmp.or(src.and(MASK14).lanewise(VectorOperators.LSHL, 13));
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14).and(MASK18);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 288 + i * stride);
			tmp = tmp.or(src.and(MASK9).lanewise(VectorOperators.LSHL, 18));
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 9).and(MASK23);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 320 + i * stride);
			tmp = tmp.or(src.and(MASK4).lanewise(VectorOperators.LSHL, 23));
			tmp.intoArray(output, 448 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4).and(MASK27);
			tmp.intoArray(output, 576 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 31).and(MASK1);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 352 + i * stride);
			tmp = tmp.or(src.and(MASK26).lanewise(VectorOperators.LSHL, 1));
			tmp.intoArray(output, 704 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 26).and(MASK6);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 384 + i * stride);
			tmp = tmp.or(src.and(MASK21).lanewise(VectorOperators.LSHL, 6));
			tmp.intoArray(output, 832 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 21).and(MASK11);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 416 + i * stride);
			tmp = tmp.or(src.and(MASK16).lanewise(VectorOperators.LSHL, 11));
			tmp.intoArray(output, 960 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK16);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 448 + i * stride);
			tmp = tmp.or(src.and(MASK11).lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 11).and(MASK21);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 480 + i * stride);
			tmp = tmp.or(src.and(MASK6).lanewise(VectorOperators.LSHL, 21));
			tmp.intoArray(output, 160 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6).and(MASK26);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 512 + i * stride);
			tmp = tmp.or(src.and(MASK1).lanewise(VectorOperators.LSHL, 26));
			tmp.intoArray(output, 288 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 1).and(MASK27);
			tmp.intoArray(output, 416 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28).and(MASK4);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 544 + i * stride);
			tmp = tmp.or(src.and(MASK23).lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 544 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 23).and(MASK9);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 576 + i * stride);
			tmp = tmp.or(src.and(MASK18).lanewise(VectorOperators.LSHL, 9));
			tmp.intoArray(output, 672 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 18).and(MASK14);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 608 + i * stride);
			tmp = tmp.or(src.and(MASK13).lanewise(VectorOperators.LSHL, 14));
			tmp.intoArray(output, 800 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 13).and(MASK19);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 640 + i * stride);
			tmp = tmp.or(src.and(MASK8).lanewise(VectorOperators.LSHL, 19));
			tmp.intoArray(output, 928 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK24);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 672 + i * stride);
			tmp = tmp.or(src.and(MASK3).lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 3).and(MASK27);
			tmp.intoArray(output, 224 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 30).and(MASK2);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 704 + i * stride);
			tmp = tmp.or(src.and(MASK25).lanewise(VectorOperators.LSHL, 2));
			tmp.intoArray(output, 352 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 25).and(MASK7);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 736 + i * stride);
			tmp = tmp.or(src.and(MASK20).lanewise(VectorOperators.LSHL, 7));
			tmp.intoArray(output, 480 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20).and(MASK12);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 768 + i * stride);
			tmp = tmp.or(src.and(MASK15).lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 608 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 15).and(MASK17);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 800 + i * stride);
			tmp = tmp.or(src.and(MASK10).lanewise(VectorOperators.LSHL, 17));
			tmp.intoArray(output, 736 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10).and(MASK22);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 832 + i * stride);
			tmp = tmp.or(src.and(MASK5).lanewise(VectorOperators.LSHL, 22));
			tmp.intoArray(output, 864 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 5).and(MASK27);
			tmp.intoArray(output, 992 + i * stride);
		}
	}

	public static void unpack28(int[] input, int[] output) {
		int stride = IntVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 32;
		for (int i = 0; i < 32 / stride; i++) {
			IntVector src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, i * stride);
			IntVector tmp;
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK28);
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28).and(MASK4);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 32 + i * stride);
			tmp = tmp.or(src.and(MASK24).lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK8);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 64 + i * stride);
			tmp = tmp.or(src.and(MASK20).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20).and(MASK12);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 96 + i * stride);
			tmp = tmp.or(src.and(MASK16).lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 384 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK16);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 128 + i * stride);
			tmp = tmp.or(src.and(MASK12).lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 512 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12).and(MASK20);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 160 + i * stride);
			tmp = tmp.or(src.and(MASK8).lanewise(VectorOperators.LSHL, 20));
			tmp.intoArray(output, 640 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK24);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 192 + i * stride);
			tmp = tmp.or(src.and(MASK4).lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 768 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4).and(MASK28);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 224 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 28));
			tmp.intoArray(output, 896 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK28);
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28).and(MASK4);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 256 + i * stride);
			tmp = tmp.or(src.and(MASK24).lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK8);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 288 + i * stride);
			tmp = tmp.or(src.and(MASK20).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20).and(MASK12);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 320 + i * stride);
			tmp = tmp.or(src.and(MASK16).lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 448 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK16);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 352 + i * stride);
			tmp = tmp.or(src.and(MASK12).lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 576 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12).and(MASK20);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 384 + i * stride);
			tmp = tmp.or(src.and(MASK8).lanewise(VectorOperators.LSHL, 20));
			tmp.intoArray(output, 704 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK24);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 416 + i * stride);
			tmp = tmp.or(src.and(MASK4).lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 832 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4).and(MASK28);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 448 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 28));
			tmp.intoArray(output, 960 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK28);
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28).and(MASK4);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 480 + i * stride);
			tmp = tmp.or(src.and(MASK24).lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 160 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK8);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 512 + i * stride);
			tmp = tmp.or(src.and(MASK20).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 288 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20).and(MASK12);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 544 + i * stride);
			tmp = tmp.or(src.and(MASK16).lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 416 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK16);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 576 + i * stride);
			tmp = tmp.or(src.and(MASK12).lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 544 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12).and(MASK20);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 608 + i * stride);
			tmp = tmp.or(src.and(MASK8).lanewise(VectorOperators.LSHL, 20));
			tmp.intoArray(output, 672 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK24);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 640 + i * stride);
			tmp = tmp.or(src.and(MASK4).lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 800 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4).and(MASK28);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 672 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 28));
			tmp.intoArray(output, 928 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK28);
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28).and(MASK4);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 704 + i * stride);
			tmp = tmp.or(src.and(MASK24).lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 224 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK8);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 736 + i * stride);
			tmp = tmp.or(src.and(MASK20).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 352 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20).and(MASK12);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 768 + i * stride);
			tmp = tmp.or(src.and(MASK16).lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 480 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK16);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 800 + i * stride);
			tmp = tmp.or(src.and(MASK12).lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 608 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12).and(MASK20);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 832 + i * stride);
			tmp = tmp.or(src.and(MASK8).lanewise(VectorOperators.LSHL, 20));
			tmp.intoArray(output, 736 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK24);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 864 + i * stride);
			tmp = tmp.or(src.and(MASK4).lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 864 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4).and(MASK28);
			tmp.intoArray(output, 992 + i * stride);
		}
	}

	public static void unpack29(int[] input, int[] output) {
		int stride = IntVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 32;
		for (int i = 0; i < 32 / stride; i++) {
			IntVector src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, i * stride);
			IntVector tmp;
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK29);
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 29).and(MASK3);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 32 + i * stride);
			tmp = tmp.or(src.and(MASK26).lanewise(VectorOperators.LSHL, 3));
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 26).and(MASK6);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 64 + i * stride);
			tmp = tmp.or(src.and(MASK23).lanewise(VectorOperators.LSHL, 6));
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 23).and(MASK9);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 96 + i * stride);
			tmp = tmp.or(src.and(MASK20).lanewise(VectorOperators.LSHL, 9));
			tmp.intoArray(output, 384 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20).and(MASK12);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 128 + i * stride);
			tmp = tmp.or(src.and(MASK17).lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 512 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 17).and(MASK15);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 160 + i * stride);
			tmp = tmp.or(src.and(MASK14).lanewise(VectorOperators.LSHL, 15));
			tmp.intoArray(output, 640 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14).and(MASK18);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 192 + i * stride);
			tmp = tmp.or(src.and(MASK11).lanewise(VectorOperators.LSHL, 18));
			tmp.intoArray(output, 768 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 11).and(MASK21);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 224 + i * stride);
			tmp = tmp.or(src.and(MASK8).lanewise(VectorOperators.LSHL, 21));
			tmp.intoArray(output, 896 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK24);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 256 + i * stride);
			tmp = tmp.or(src.and(MASK5).lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 5).and(MASK27);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 288 + i * stride);
			tmp = tmp.or(src.and(MASK2).lanewise(VectorOperators.LSHL, 27));
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2).and(MASK29);
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 31).and(MASK1);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 320 + i * stride);
			tmp = tmp.or(src.and(MASK28).lanewise(VectorOperators.LSHL, 1));
			tmp.intoArray(output, 448 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28).and(MASK4);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 352 + i * stride);
			tmp = tmp.or(src.and(MASK25).lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 576 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 25).and(MASK7);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 384 + i * stride);
			tmp = tmp.or(src.and(MASK22).lanewise(VectorOperators.LSHL, 7));
			tmp.intoArray(output, 704 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 22).and(MASK10);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 416 + i * stride);
			tmp = tmp.or(src.and(MASK19).lanewise(VectorOperators.LSHL, 10));
			tmp.intoArray(output, 832 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 19).and(MASK13);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 448 + i * stride);
			tmp = tmp.or(src.and(MASK16).lanewise(VectorOperators.LSHL, 13));
			tmp.intoArray(output, 960 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK16);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 480 + i * stride);
			tmp = tmp.or(src.and(MASK13).lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 13).and(MASK19);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 512 + i * stride);
			tmp = tmp.or(src.and(MASK10).lanewise(VectorOperators.LSHL, 19));
			tmp.intoArray(output, 160 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10).and(MASK22);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 544 + i * stride);
			tmp = tmp.or(src.and(MASK7).lanewise(VectorOperators.LSHL, 22));
			tmp.intoArray(output, 288 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 7).and(MASK25);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 576 + i * stride);
			tmp = tmp.or(src.and(MASK4).lanewise(VectorOperators.LSHL, 25));
			tmp.intoArray(output, 416 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4).and(MASK28);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 608 + i * stride);
			tmp = tmp.or(src.and(MASK1).lanewise(VectorOperators.LSHL, 28));
			tmp.intoArray(output, 544 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 1).and(MASK29);
			tmp.intoArray(output, 672 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 30).and(MASK2);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 640 + i * stride);
			tmp = tmp.or(src.and(MASK27).lanewise(VectorOperators.LSHL, 2));
			tmp.intoArray(output, 800 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 27).and(MASK5);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 672 + i * stride);
			tmp = tmp.or(src.and(MASK24).lanewise(VectorOperators.LSHL, 5));
			tmp.intoArray(output, 928 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK8);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 704 + i * stride);
			tmp = tmp.or(src.and(MASK21).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 21).and(MASK11);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 736 + i * stride);
			tmp = tmp.or(src.and(MASK18).lanewise(VectorOperators.LSHL, 11));
			tmp.intoArray(output, 224 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 18).and(MASK14);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 768 + i * stride);
			tmp = tmp.or(src.and(MASK15).lanewise(VectorOperators.LSHL, 14));
			tmp.intoArray(output, 352 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 15).and(MASK17);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 800 + i * stride);
			tmp = tmp.or(src.and(MASK12).lanewise(VectorOperators.LSHL, 17));
			tmp.intoArray(output, 480 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12).and(MASK20);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 832 + i * stride);
			tmp = tmp.or(src.and(MASK9).lanewise(VectorOperators.LSHL, 20));
			tmp.intoArray(output, 608 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 9).and(MASK23);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 864 + i * stride);
			tmp = tmp.or(src.and(MASK6).lanewise(VectorOperators.LSHL, 23));
			tmp.intoArray(output, 736 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6).and(MASK26);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 896 + i * stride);
			tmp = tmp.or(src.and(MASK3).lanewise(VectorOperators.LSHL, 26));
			tmp.intoArray(output, 864 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 3).and(MASK29);
			tmp.intoArray(output, 992 + i * stride);
		}
	}

	public static void unpack30(int[] input, int[] output) {
		int stride = IntVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 32;
		for (int i = 0; i < 32 / stride; i++) {
			IntVector src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, i * stride);
			IntVector tmp;
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK30);
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 30).and(MASK2);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 32 + i * stride);
			tmp = tmp.or(src.and(MASK28).lanewise(VectorOperators.LSHL, 2));
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28).and(MASK4);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 64 + i * stride);
			tmp = tmp.or(src.and(MASK26).lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 26).and(MASK6);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 96 + i * stride);
			tmp = tmp.or(src.and(MASK24).lanewise(VectorOperators.LSHL, 6));
			tmp.intoArray(output, 384 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK8);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 128 + i * stride);
			tmp = tmp.or(src.and(MASK22).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 512 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 22).and(MASK10);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 160 + i * stride);
			tmp = tmp.or(src.and(MASK20).lanewise(VectorOperators.LSHL, 10));
			tmp.intoArray(output, 640 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20).and(MASK12);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 192 + i * stride);
			tmp = tmp.or(src.and(MASK18).lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 768 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 18).and(MASK14);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 224 + i * stride);
			tmp = tmp.or(src.and(MASK16).lanewise(VectorOperators.LSHL, 14));
			tmp.intoArray(output, 896 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK16);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 256 + i * stride);
			tmp = tmp.or(src.and(MASK14).lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14).and(MASK18);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 288 + i * stride);
			tmp = tmp.or(src.and(MASK12).lanewise(VectorOperators.LSHL, 18));
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12).and(MASK20);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 320 + i * stride);
			tmp = tmp.or(src.and(MASK10).lanewise(VectorOperators.LSHL, 20));
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10).and(MASK22);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 352 + i * stride);
			tmp = tmp.or(src.and(MASK8).lanewise(VectorOperators.LSHL, 22));
			tmp.intoArray(output, 448 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK24);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 384 + i * stride);
			tmp = tmp.or(src.and(MASK6).lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 576 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6).and(MASK26);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 416 + i * stride);
			tmp = tmp.or(src.and(MASK4).lanewise(VectorOperators.LSHL, 26));
			tmp.intoArray(output, 704 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4).and(MASK28);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 448 + i * stride);
			tmp = tmp.or(src.and(MASK2).lanewise(VectorOperators.LSHL, 28));
			tmp.intoArray(output, 832 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2).and(MASK30);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 480 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 30));
			tmp.intoArray(output, 960 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK30);
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 30).and(MASK2);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 512 + i * stride);
			tmp = tmp.or(src.and(MASK28).lanewise(VectorOperators.LSHL, 2));
			tmp.intoArray(output, 160 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28).and(MASK4);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 544 + i * stride);
			tmp = tmp.or(src.and(MASK26).lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 288 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 26).and(MASK6);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 576 + i * stride);
			tmp = tmp.or(src.and(MASK24).lanewise(VectorOperators.LSHL, 6));
			tmp.intoArray(output, 416 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK8);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 608 + i * stride);
			tmp = tmp.or(src.and(MASK22).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 544 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 22).and(MASK10);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 640 + i * stride);
			tmp = tmp.or(src.and(MASK20).lanewise(VectorOperators.LSHL, 10));
			tmp.intoArray(output, 672 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20).and(MASK12);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 672 + i * stride);
			tmp = tmp.or(src.and(MASK18).lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 800 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 18).and(MASK14);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 704 + i * stride);
			tmp = tmp.or(src.and(MASK16).lanewise(VectorOperators.LSHL, 14));
			tmp.intoArray(output, 928 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK16);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 736 + i * stride);
			tmp = tmp.or(src.and(MASK14).lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14).and(MASK18);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 768 + i * stride);
			tmp = tmp.or(src.and(MASK12).lanewise(VectorOperators.LSHL, 18));
			tmp.intoArray(output, 224 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12).and(MASK20);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 800 + i * stride);
			tmp = tmp.or(src.and(MASK10).lanewise(VectorOperators.LSHL, 20));
			tmp.intoArray(output, 352 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10).and(MASK22);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 832 + i * stride);
			tmp = tmp.or(src.and(MASK8).lanewise(VectorOperators.LSHL, 22));
			tmp.intoArray(output, 480 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK24);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 864 + i * stride);
			tmp = tmp.or(src.and(MASK6).lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 608 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6).and(MASK26);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 896 + i * stride);
			tmp = tmp.or(src.and(MASK4).lanewise(VectorOperators.LSHL, 26));
			tmp.intoArray(output, 736 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4).and(MASK28);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 928 + i * stride);
			tmp = tmp.or(src.and(MASK2).lanewise(VectorOperators.LSHL, 28));
			tmp.intoArray(output, 864 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2).and(MASK30);
			tmp.intoArray(output, 992 + i * stride);
		}
	}

	public static void unpack31(int[] input, int[] output) {
		int stride = IntVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 32;
		for (int i = 0; i < 32 / stride; i++) {
			IntVector src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, i * stride);
			IntVector tmp;
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK31);
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 31).and(MASK1);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 32 + i * stride);
			tmp = tmp.or(src.and(MASK30).lanewise(VectorOperators.LSHL, 1));
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 30).and(MASK2);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 64 + i * stride);
			tmp = tmp.or(src.and(MASK29).lanewise(VectorOperators.LSHL, 2));
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 29).and(MASK3);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 96 + i * stride);
			tmp = tmp.or(src.and(MASK28).lanewise(VectorOperators.LSHL, 3));
			tmp.intoArray(output, 384 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28).and(MASK4);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 128 + i * stride);
			tmp = tmp.or(src.and(MASK27).lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 512 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 27).and(MASK5);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 160 + i * stride);
			tmp = tmp.or(src.and(MASK26).lanewise(VectorOperators.LSHL, 5));
			tmp.intoArray(output, 640 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 26).and(MASK6);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 192 + i * stride);
			tmp = tmp.or(src.and(MASK25).lanewise(VectorOperators.LSHL, 6));
			tmp.intoArray(output, 768 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 25).and(MASK7);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 224 + i * stride);
			tmp = tmp.or(src.and(MASK24).lanewise(VectorOperators.LSHL, 7));
			tmp.intoArray(output, 896 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK8);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 256 + i * stride);
			tmp = tmp.or(src.and(MASK23).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 23).and(MASK9);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 288 + i * stride);
			tmp = tmp.or(src.and(MASK22).lanewise(VectorOperators.LSHL, 9));
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 22).and(MASK10);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 320 + i * stride);
			tmp = tmp.or(src.and(MASK21).lanewise(VectorOperators.LSHL, 10));
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 21).and(MASK11);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 352 + i * stride);
			tmp = tmp.or(src.and(MASK20).lanewise(VectorOperators.LSHL, 11));
			tmp.intoArray(output, 448 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20).and(MASK12);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 384 + i * stride);
			tmp = tmp.or(src.and(MASK19).lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 576 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 19).and(MASK13);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 416 + i * stride);
			tmp = tmp.or(src.and(MASK18).lanewise(VectorOperators.LSHL, 13));
			tmp.intoArray(output, 704 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 18).and(MASK14);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 448 + i * stride);
			tmp = tmp.or(src.and(MASK17).lanewise(VectorOperators.LSHL, 14));
			tmp.intoArray(output, 832 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 17).and(MASK15);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 480 + i * stride);
			tmp = tmp.or(src.and(MASK16).lanewise(VectorOperators.LSHL, 15));
			tmp.intoArray(output, 960 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK16);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 512 + i * stride);
			tmp = tmp.or(src.and(MASK15).lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 15).and(MASK17);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 544 + i * stride);
			tmp = tmp.or(src.and(MASK14).lanewise(VectorOperators.LSHL, 17));
			tmp.intoArray(output, 160 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14).and(MASK18);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 576 + i * stride);
			tmp = tmp.or(src.and(MASK13).lanewise(VectorOperators.LSHL, 18));
			tmp.intoArray(output, 288 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 13).and(MASK19);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 608 + i * stride);
			tmp = tmp.or(src.and(MASK12).lanewise(VectorOperators.LSHL, 19));
			tmp.intoArray(output, 416 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12).and(MASK20);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 640 + i * stride);
			tmp = tmp.or(src.and(MASK11).lanewise(VectorOperators.LSHL, 20));
			tmp.intoArray(output, 544 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 11).and(MASK21);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 672 + i * stride);
			tmp = tmp.or(src.and(MASK10).lanewise(VectorOperators.LSHL, 21));
			tmp.intoArray(output, 672 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10).and(MASK22);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 704 + i * stride);
			tmp = tmp.or(src.and(MASK9).lanewise(VectorOperators.LSHL, 22));
			tmp.intoArray(output, 800 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 9).and(MASK23);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 736 + i * stride);
			tmp = tmp.or(src.and(MASK8).lanewise(VectorOperators.LSHL, 23));
			tmp.intoArray(output, 928 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK24);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 768 + i * stride);
			tmp = tmp.or(src.and(MASK7).lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 7).and(MASK25);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 800 + i * stride);
			tmp = tmp.or(src.and(MASK6).lanewise(VectorOperators.LSHL, 25));
			tmp.intoArray(output, 224 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6).and(MASK26);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 832 + i * stride);
			tmp = tmp.or(src.and(MASK5).lanewise(VectorOperators.LSHL, 26));
			tmp.intoArray(output, 352 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 5).and(MASK27);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 864 + i * stride);
			tmp = tmp.or(src.and(MASK4).lanewise(VectorOperators.LSHL, 27));
			tmp.intoArray(output, 480 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4).and(MASK28);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 896 + i * stride);
			tmp = tmp.or(src.and(MASK3).lanewise(VectorOperators.LSHL, 28));
			tmp.intoArray(output, 608 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 3).and(MASK29);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 928 + i * stride);
			tmp = tmp.or(src.and(MASK2).lanewise(VectorOperators.LSHL, 29));
			tmp.intoArray(output, 736 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2).and(MASK30);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 960 + i * stride);
			tmp = tmp.or(src.and(MASK1).lanewise(VectorOperators.LSHL, 30));
			tmp.intoArray(output, 864 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 1).and(MASK31);
			tmp.intoArray(output, 992 + i * stride);
		}
	}

	public static void unpack32(int[] input, int[] output) {
		int stride = IntVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 32;
		for (int i = 0; i < 32 / stride; i++) {
			IntVector src;
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 0 + i * stride);
			src.intoArray(output, 0 + i * stride);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 32 + i * stride);
			src.intoArray(output, 128 + i * stride);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 64 + i * stride);
			src.intoArray(output, 256 + i * stride);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 96 + i * stride);
			src.intoArray(output, 384 + i * stride);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 128 + i * stride);
			src.intoArray(output, 512 + i * stride);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 160 + i * stride);
			src.intoArray(output, 640 + i * stride);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 192 + i * stride);
			src.intoArray(output, 768 + i * stride);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 224 + i * stride);
			src.intoArray(output, 896 + i * stride);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 256 + i * stride);
			src.intoArray(output, 64 + i * stride);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 288 + i * stride);
			src.intoArray(output, 192 + i * stride);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 320 + i * stride);
			src.intoArray(output, 320 + i * stride);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 352 + i * stride);
			src.intoArray(output, 448 + i * stride);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 384 + i * stride);
			src.intoArray(output, 576 + i * stride);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 416 + i * stride);
			src.intoArray(output, 704 + i * stride);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 448 + i * stride);
			src.intoArray(output, 832 + i * stride);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 480 + i * stride);
			src.intoArray(output, 960 + i * stride);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 512 + i * stride);
			src.intoArray(output, 32 + i * stride);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 544 + i * stride);
			src.intoArray(output, 160 + i * stride);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 576 + i * stride);
			src.intoArray(output, 288 + i * stride);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 608 + i * stride);
			src.intoArray(output, 416 + i * stride);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 640 + i * stride);
			src.intoArray(output, 544 + i * stride);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 672 + i * stride);
			src.intoArray(output, 672 + i * stride);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 704 + i * stride);
			src.intoArray(output, 800 + i * stride);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 736 + i * stride);
			src.intoArray(output, 928 + i * stride);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 768 + i * stride);
			src.intoArray(output, 96 + i * stride);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 800 + i * stride);
			src.intoArray(output, 224 + i * stride);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 832 + i * stride);
			src.intoArray(output, 352 + i * stride);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 864 + i * stride);
			src.intoArray(output, 480 + i * stride);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 896 + i * stride);
			src.intoArray(output, 608 + i * stride);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 928 + i * stride);
			src.intoArray(output, 736 + i * stride);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 960 + i * stride);
			src.intoArray(output, 864 + i * stride);
			src = IntVector.fromArray(IntVector.SPECIES_PREFERRED, input, 992 + i * stride);
			src.intoArray(output, 992 + i * stride);
		}
	}

	public static void unpack(int[] input, int width, int[] output) {
		switch (width) {
			case 0: unpack0(input, output); break;
			case 1: unpack1(input, output); break;
			case 2: unpack2(input, output); break;
			case 3: unpack3(input, output); break;
			case 4: unpack4(input, output); break;
			case 5: unpack5(input, output); break;
			case 6: unpack6(input, output); break;
			case 7: unpack7(input, output); break;
			case 8: unpack8(input, output); break;
			case 9: unpack9(input, output); break;
			case 10: unpack10(input, output); break;
			case 11: unpack11(input, output); break;
			case 12: unpack12(input, output); break;
			case 13: unpack13(input, output); break;
			case 14: unpack14(input, output); break;
			case 15: unpack15(input, output); break;
			case 16: unpack16(input, output); break;
			case 17: unpack17(input, output); break;
			case 18: unpack18(input, output); break;
			case 19: unpack19(input, output); break;
			case 20: unpack20(input, output); break;
			case 21: unpack21(input, output); break;
			case 22: unpack22(input, output); break;
			case 23: unpack23(input, output); break;
			case 24: unpack24(input, output); break;
			case 25: unpack25(input, output); break;
			case 26: unpack26(input, output); break;
			case 27: unpack27(input, output); break;
			case 28: unpack28(input, output); break;
			case 29: unpack29(input, output); break;
			case 30: unpack30(input, output); break;
			case 31: unpack31(input, output); break;
			case 32: unpack32(input, output); break;
			default: throw new IllegalArgumentException();
		}
	}
}
