package com.github.luohao.fastlanes.bitpack;

import java.util.Arrays;
import jdk.incubator.vector.LongVector;
import jdk.incubator.vector.VectorOperators;

public class VectorLongPacker {
	public static final long MASK0 = (long)((1L << 0) - 1);

	public static final long MASK1 = (long)((1L << 1) - 1);

	public static final long MASK2 = (long)((1L << 2) - 1);

	public static final long MASK3 = (long)((1L << 3) - 1);

	public static final long MASK4 = (long)((1L << 4) - 1);

	public static final long MASK5 = (long)((1L << 5) - 1);

	public static final long MASK6 = (long)((1L << 6) - 1);

	public static final long MASK7 = (long)((1L << 7) - 1);

	public static final long MASK8 = (long)((1L << 8) - 1);

	public static final long MASK9 = (long)((1L << 9) - 1);

	public static final long MASK10 = (long)((1L << 10) - 1);

	public static final long MASK11 = (long)((1L << 11) - 1);

	public static final long MASK12 = (long)((1L << 12) - 1);

	public static final long MASK13 = (long)((1L << 13) - 1);

	public static final long MASK14 = (long)((1L << 14) - 1);

	public static final long MASK15 = (long)((1L << 15) - 1);

	public static final long MASK16 = (long)((1L << 16) - 1);

	public static final long MASK17 = (long)((1L << 17) - 1);

	public static final long MASK18 = (long)((1L << 18) - 1);

	public static final long MASK19 = (long)((1L << 19) - 1);

	public static final long MASK20 = (long)((1L << 20) - 1);

	public static final long MASK21 = (long)((1L << 21) - 1);

	public static final long MASK22 = (long)((1L << 22) - 1);

	public static final long MASK23 = (long)((1L << 23) - 1);

	public static final long MASK24 = (long)((1L << 24) - 1);

	public static final long MASK25 = (long)((1L << 25) - 1);

	public static final long MASK26 = (long)((1L << 26) - 1);

	public static final long MASK27 = (long)((1L << 27) - 1);

	public static final long MASK28 = (long)((1L << 28) - 1);

	public static final long MASK29 = (long)((1L << 29) - 1);

	public static final long MASK30 = (long)((1L << 30) - 1);

	public static final long MASK31 = (long)((1L << 31) - 1);

	public static final long MASK32 = (long)((1L << 32) - 1);

	public static final long MASK33 = (long)((1L << 33) - 1);

	public static final long MASK34 = (long)((1L << 34) - 1);

	public static final long MASK35 = (long)((1L << 35) - 1);

	public static final long MASK36 = (long)((1L << 36) - 1);

	public static final long MASK37 = (long)((1L << 37) - 1);

	public static final long MASK38 = (long)((1L << 38) - 1);

	public static final long MASK39 = (long)((1L << 39) - 1);

	public static final long MASK40 = (long)((1L << 40) - 1);

	public static final long MASK41 = (long)((1L << 41) - 1);

	public static final long MASK42 = (long)((1L << 42) - 1);

	public static final long MASK43 = (long)((1L << 43) - 1);

	public static final long MASK44 = (long)((1L << 44) - 1);

	public static final long MASK45 = (long)((1L << 45) - 1);

	public static final long MASK46 = (long)((1L << 46) - 1);

	public static final long MASK47 = (long)((1L << 47) - 1);

	public static final long MASK48 = (long)((1L << 48) - 1);

	public static final long MASK49 = (long)((1L << 49) - 1);

	public static final long MASK50 = (long)((1L << 50) - 1);

	public static final long MASK51 = (long)((1L << 51) - 1);

	public static final long MASK52 = (long)((1L << 52) - 1);

	public static final long MASK53 = (long)((1L << 53) - 1);

	public static final long MASK54 = (long)((1L << 54) - 1);

	public static final long MASK55 = (long)((1L << 55) - 1);

	public static final long MASK56 = (long)((1L << 56) - 1);

	public static final long MASK57 = (long)((1L << 57) - 1);

	public static final long MASK58 = (long)((1L << 58) - 1);

	public static final long MASK59 = (long)((1L << 59) - 1);

	public static final long MASK60 = (long)((1L << 60) - 1);

	public static final long MASK61 = (long)((1L << 61) - 1);

	public static final long MASK62 = (long)((1L << 62) - 1);

	public static final long MASK63 = (long)((1L << 63) - 1);

	public static void pack0(long[] input, long[] output) {
		int stride = LongVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 64;
		for (int i = 0; i < 16 / stride; i++) {
		}
	}

	public static void pack1(long[] input, long[] output) {
		int stride = LongVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 64;
		for (int i = 0; i < 16 / stride; i++) {
			LongVector src;
			LongVector tmp;
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 0 + i * stride);
			src = src.and(MASK1);
			tmp = src;
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 128 + i * stride);
			src = src.and(MASK1);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 1));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 256 + i * stride);
			src = src.and(MASK1);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 2));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 384 + i * stride);
			src = src.and(MASK1);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 3));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 512 + i * stride);
			src = src.and(MASK1);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 4));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 640 + i * stride);
			src = src.and(MASK1);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 5));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 768 + i * stride);
			src = src.and(MASK1);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 6));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 896 + i * stride);
			src = src.and(MASK1);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 7));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 64 + i * stride);
			src = src.and(MASK1);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 192 + i * stride);
			src = src.and(MASK1);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 9));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 320 + i * stride);
			src = src.and(MASK1);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 10));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 448 + i * stride);
			src = src.and(MASK1);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 11));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 576 + i * stride);
			src = src.and(MASK1);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 12));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 704 + i * stride);
			src = src.and(MASK1);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 13));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 832 + i * stride);
			src = src.and(MASK1);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 14));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 960 + i * stride);
			src = src.and(MASK1);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 15));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 32 + i * stride);
			src = src.and(MASK1);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 160 + i * stride);
			src = src.and(MASK1);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 17));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 288 + i * stride);
			src = src.and(MASK1);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 18));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 416 + i * stride);
			src = src.and(MASK1);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 19));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 544 + i * stride);
			src = src.and(MASK1);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 20));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 672 + i * stride);
			src = src.and(MASK1);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 21));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 800 + i * stride);
			src = src.and(MASK1);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 22));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 928 + i * stride);
			src = src.and(MASK1);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 23));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 96 + i * stride);
			src = src.and(MASK1);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 224 + i * stride);
			src = src.and(MASK1);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 25));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 352 + i * stride);
			src = src.and(MASK1);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 26));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 480 + i * stride);
			src = src.and(MASK1);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 27));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 608 + i * stride);
			src = src.and(MASK1);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 28));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 736 + i * stride);
			src = src.and(MASK1);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 29));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 864 + i * stride);
			src = src.and(MASK1);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 30));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 992 + i * stride);
			src = src.and(MASK1);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 31));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 16 + i * stride);
			src = src.and(MASK1);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 144 + i * stride);
			src = src.and(MASK1);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 33));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 272 + i * stride);
			src = src.and(MASK1);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 34));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 400 + i * stride);
			src = src.and(MASK1);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 35));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 528 + i * stride);
			src = src.and(MASK1);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 36));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 656 + i * stride);
			src = src.and(MASK1);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 37));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 784 + i * stride);
			src = src.and(MASK1);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 38));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 912 + i * stride);
			src = src.and(MASK1);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 39));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 80 + i * stride);
			src = src.and(MASK1);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 40));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 208 + i * stride);
			src = src.and(MASK1);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 41));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 336 + i * stride);
			src = src.and(MASK1);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 42));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 464 + i * stride);
			src = src.and(MASK1);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 43));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 592 + i * stride);
			src = src.and(MASK1);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 44));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 720 + i * stride);
			src = src.and(MASK1);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 45));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 848 + i * stride);
			src = src.and(MASK1);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 46));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 976 + i * stride);
			src = src.and(MASK1);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 47));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 48 + i * stride);
			src = src.and(MASK1);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 48));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 176 + i * stride);
			src = src.and(MASK1);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 49));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 304 + i * stride);
			src = src.and(MASK1);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 50));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 432 + i * stride);
			src = src.and(MASK1);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 51));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 560 + i * stride);
			src = src.and(MASK1);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 52));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 688 + i * stride);
			src = src.and(MASK1);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 53));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 816 + i * stride);
			src = src.and(MASK1);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 54));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 944 + i * stride);
			src = src.and(MASK1);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 55));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 112 + i * stride);
			src = src.and(MASK1);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 56));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 240 + i * stride);
			src = src.and(MASK1);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 57));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 368 + i * stride);
			src = src.and(MASK1);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 58));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 496 + i * stride);
			src = src.and(MASK1);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 59));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 624 + i * stride);
			src = src.and(MASK1);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 60));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 752 + i * stride);
			src = src.and(MASK1);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 61));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 880 + i * stride);
			src = src.and(MASK1);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 62));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 1008 + i * stride);
			src = src.and(MASK1);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 63));
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 1);
		}
	}

	public static void pack2(long[] input, long[] output) {
		int stride = LongVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 64;
		for (int i = 0; i < 16 / stride; i++) {
			LongVector src;
			LongVector tmp;
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 0 + i * stride);
			src = src.and(MASK2);
			tmp = src;
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 128 + i * stride);
			src = src.and(MASK2);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 2));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 256 + i * stride);
			src = src.and(MASK2);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 4));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 384 + i * stride);
			src = src.and(MASK2);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 6));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 512 + i * stride);
			src = src.and(MASK2);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 640 + i * stride);
			src = src.and(MASK2);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 10));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 768 + i * stride);
			src = src.and(MASK2);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 12));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 896 + i * stride);
			src = src.and(MASK2);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 14));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 64 + i * stride);
			src = src.and(MASK2);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 192 + i * stride);
			src = src.and(MASK2);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 18));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 320 + i * stride);
			src = src.and(MASK2);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 20));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 448 + i * stride);
			src = src.and(MASK2);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 22));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 576 + i * stride);
			src = src.and(MASK2);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 704 + i * stride);
			src = src.and(MASK2);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 26));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 832 + i * stride);
			src = src.and(MASK2);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 28));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 960 + i * stride);
			src = src.and(MASK2);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 30));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 32 + i * stride);
			src = src.and(MASK2);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 160 + i * stride);
			src = src.and(MASK2);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 34));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 288 + i * stride);
			src = src.and(MASK2);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 36));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 416 + i * stride);
			src = src.and(MASK2);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 38));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 544 + i * stride);
			src = src.and(MASK2);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 40));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 672 + i * stride);
			src = src.and(MASK2);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 42));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 800 + i * stride);
			src = src.and(MASK2);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 44));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 928 + i * stride);
			src = src.and(MASK2);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 46));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 96 + i * stride);
			src = src.and(MASK2);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 48));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 224 + i * stride);
			src = src.and(MASK2);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 50));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 352 + i * stride);
			src = src.and(MASK2);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 52));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 480 + i * stride);
			src = src.and(MASK2);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 54));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 608 + i * stride);
			src = src.and(MASK2);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 56));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 736 + i * stride);
			src = src.and(MASK2);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 58));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 864 + i * stride);
			src = src.and(MASK2);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 60));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 992 + i * stride);
			src = src.and(MASK2);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 62));
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 16 + i * stride);
			src = src.and(MASK2);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 144 + i * stride);
			src = src.and(MASK2);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 2));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 272 + i * stride);
			src = src.and(MASK2);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 4));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 400 + i * stride);
			src = src.and(MASK2);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 6));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 528 + i * stride);
			src = src.and(MASK2);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 656 + i * stride);
			src = src.and(MASK2);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 10));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 784 + i * stride);
			src = src.and(MASK2);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 12));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 912 + i * stride);
			src = src.and(MASK2);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 14));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 80 + i * stride);
			src = src.and(MASK2);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 208 + i * stride);
			src = src.and(MASK2);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 18));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 336 + i * stride);
			src = src.and(MASK2);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 20));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 464 + i * stride);
			src = src.and(MASK2);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 22));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 592 + i * stride);
			src = src.and(MASK2);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 720 + i * stride);
			src = src.and(MASK2);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 26));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 848 + i * stride);
			src = src.and(MASK2);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 28));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 976 + i * stride);
			src = src.and(MASK2);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 30));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 48 + i * stride);
			src = src.and(MASK2);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 176 + i * stride);
			src = src.and(MASK2);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 34));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 304 + i * stride);
			src = src.and(MASK2);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 36));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 432 + i * stride);
			src = src.and(MASK2);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 38));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 560 + i * stride);
			src = src.and(MASK2);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 40));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 688 + i * stride);
			src = src.and(MASK2);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 42));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 816 + i * stride);
			src = src.and(MASK2);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 44));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 944 + i * stride);
			src = src.and(MASK2);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 46));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 112 + i * stride);
			src = src.and(MASK2);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 48));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 240 + i * stride);
			src = src.and(MASK2);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 50));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 368 + i * stride);
			src = src.and(MASK2);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 52));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 496 + i * stride);
			src = src.and(MASK2);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 54));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 624 + i * stride);
			src = src.and(MASK2);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 56));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 752 + i * stride);
			src = src.and(MASK2);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 58));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 880 + i * stride);
			src = src.and(MASK2);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 60));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 1008 + i * stride);
			src = src.and(MASK2);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 62));
			tmp.intoArray(output, 16 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2);
		}
	}

	public static void pack3(long[] input, long[] output) {
		int stride = LongVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 64;
		for (int i = 0; i < 16 / stride; i++) {
			LongVector src;
			LongVector tmp;
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 0 + i * stride);
			src = src.and(MASK3);
			tmp = src;
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 128 + i * stride);
			src = src.and(MASK3);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 3));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 256 + i * stride);
			src = src.and(MASK3);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 6));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 384 + i * stride);
			src = src.and(MASK3);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 9));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 512 + i * stride);
			src = src.and(MASK3);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 12));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 640 + i * stride);
			src = src.and(MASK3);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 15));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 768 + i * stride);
			src = src.and(MASK3);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 18));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 896 + i * stride);
			src = src.and(MASK3);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 21));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 64 + i * stride);
			src = src.and(MASK3);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 192 + i * stride);
			src = src.and(MASK3);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 27));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 320 + i * stride);
			src = src.and(MASK3);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 30));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 448 + i * stride);
			src = src.and(MASK3);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 33));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 576 + i * stride);
			src = src.and(MASK3);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 36));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 704 + i * stride);
			src = src.and(MASK3);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 39));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 832 + i * stride);
			src = src.and(MASK3);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 42));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 960 + i * stride);
			src = src.and(MASK3);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 45));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 32 + i * stride);
			src = src.and(MASK3);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 48));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 160 + i * stride);
			src = src.and(MASK3);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 51));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 288 + i * stride);
			src = src.and(MASK3);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 54));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 416 + i * stride);
			src = src.and(MASK3);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 57));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 544 + i * stride);
			src = src.and(MASK3);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 60));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 672 + i * stride);
			src = src.and(MASK3);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 63));
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 1);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 800 + i * stride);
			src = src.and(MASK3);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 2));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 928 + i * stride);
			src = src.and(MASK3);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 5));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 96 + i * stride);
			src = src.and(MASK3);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 224 + i * stride);
			src = src.and(MASK3);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 11));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 352 + i * stride);
			src = src.and(MASK3);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 14));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 480 + i * stride);
			src = src.and(MASK3);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 17));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 608 + i * stride);
			src = src.and(MASK3);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 20));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 736 + i * stride);
			src = src.and(MASK3);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 23));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 864 + i * stride);
			src = src.and(MASK3);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 26));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 992 + i * stride);
			src = src.and(MASK3);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 29));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 16 + i * stride);
			src = src.and(MASK3);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 144 + i * stride);
			src = src.and(MASK3);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 35));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 272 + i * stride);
			src = src.and(MASK3);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 38));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 400 + i * stride);
			src = src.and(MASK3);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 41));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 528 + i * stride);
			src = src.and(MASK3);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 44));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 656 + i * stride);
			src = src.and(MASK3);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 47));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 784 + i * stride);
			src = src.and(MASK3);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 50));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 912 + i * stride);
			src = src.and(MASK3);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 53));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 80 + i * stride);
			src = src.and(MASK3);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 56));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 208 + i * stride);
			src = src.and(MASK3);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 59));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 336 + i * stride);
			src = src.and(MASK3);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 62));
			tmp.intoArray(output, 16 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 464 + i * stride);
			src = src.and(MASK3);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 1));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 592 + i * stride);
			src = src.and(MASK3);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 4));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 720 + i * stride);
			src = src.and(MASK3);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 7));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 848 + i * stride);
			src = src.and(MASK3);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 10));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 976 + i * stride);
			src = src.and(MASK3);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 13));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 48 + i * stride);
			src = src.and(MASK3);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 176 + i * stride);
			src = src.and(MASK3);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 19));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 304 + i * stride);
			src = src.and(MASK3);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 22));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 432 + i * stride);
			src = src.and(MASK3);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 25));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 560 + i * stride);
			src = src.and(MASK3);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 28));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 688 + i * stride);
			src = src.and(MASK3);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 31));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 816 + i * stride);
			src = src.and(MASK3);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 34));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 944 + i * stride);
			src = src.and(MASK3);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 37));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 112 + i * stride);
			src = src.and(MASK3);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 40));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 240 + i * stride);
			src = src.and(MASK3);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 43));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 368 + i * stride);
			src = src.and(MASK3);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 46));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 496 + i * stride);
			src = src.and(MASK3);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 49));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 624 + i * stride);
			src = src.and(MASK3);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 52));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 752 + i * stride);
			src = src.and(MASK3);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 55));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 880 + i * stride);
			src = src.and(MASK3);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 58));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 1008 + i * stride);
			src = src.and(MASK3);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 61));
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 3);
		}
	}

	public static void pack4(long[] input, long[] output) {
		int stride = LongVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 64;
		for (int i = 0; i < 16 / stride; i++) {
			LongVector src;
			LongVector tmp;
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 0 + i * stride);
			src = src.and(MASK4);
			tmp = src;
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 128 + i * stride);
			src = src.and(MASK4);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 4));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 256 + i * stride);
			src = src.and(MASK4);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 384 + i * stride);
			src = src.and(MASK4);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 12));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 512 + i * stride);
			src = src.and(MASK4);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 640 + i * stride);
			src = src.and(MASK4);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 20));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 768 + i * stride);
			src = src.and(MASK4);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 896 + i * stride);
			src = src.and(MASK4);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 28));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 64 + i * stride);
			src = src.and(MASK4);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 192 + i * stride);
			src = src.and(MASK4);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 36));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 320 + i * stride);
			src = src.and(MASK4);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 40));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 448 + i * stride);
			src = src.and(MASK4);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 44));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 576 + i * stride);
			src = src.and(MASK4);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 48));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 704 + i * stride);
			src = src.and(MASK4);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 52));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 832 + i * stride);
			src = src.and(MASK4);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 56));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 960 + i * stride);
			src = src.and(MASK4);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 60));
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 32 + i * stride);
			src = src.and(MASK4);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 160 + i * stride);
			src = src.and(MASK4);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 4));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 288 + i * stride);
			src = src.and(MASK4);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 416 + i * stride);
			src = src.and(MASK4);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 12));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 544 + i * stride);
			src = src.and(MASK4);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 672 + i * stride);
			src = src.and(MASK4);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 20));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 800 + i * stride);
			src = src.and(MASK4);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 928 + i * stride);
			src = src.and(MASK4);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 28));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 96 + i * stride);
			src = src.and(MASK4);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 224 + i * stride);
			src = src.and(MASK4);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 36));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 352 + i * stride);
			src = src.and(MASK4);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 40));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 480 + i * stride);
			src = src.and(MASK4);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 44));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 608 + i * stride);
			src = src.and(MASK4);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 48));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 736 + i * stride);
			src = src.and(MASK4);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 52));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 864 + i * stride);
			src = src.and(MASK4);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 56));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 992 + i * stride);
			src = src.and(MASK4);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 60));
			tmp.intoArray(output, 16 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 16 + i * stride);
			src = src.and(MASK4);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 144 + i * stride);
			src = src.and(MASK4);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 4));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 272 + i * stride);
			src = src.and(MASK4);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 400 + i * stride);
			src = src.and(MASK4);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 12));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 528 + i * stride);
			src = src.and(MASK4);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 656 + i * stride);
			src = src.and(MASK4);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 20));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 784 + i * stride);
			src = src.and(MASK4);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 912 + i * stride);
			src = src.and(MASK4);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 28));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 80 + i * stride);
			src = src.and(MASK4);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 208 + i * stride);
			src = src.and(MASK4);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 36));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 336 + i * stride);
			src = src.and(MASK4);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 40));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 464 + i * stride);
			src = src.and(MASK4);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 44));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 592 + i * stride);
			src = src.and(MASK4);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 48));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 720 + i * stride);
			src = src.and(MASK4);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 52));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 848 + i * stride);
			src = src.and(MASK4);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 56));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 976 + i * stride);
			src = src.and(MASK4);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 60));
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 48 + i * stride);
			src = src.and(MASK4);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 176 + i * stride);
			src = src.and(MASK4);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 4));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 304 + i * stride);
			src = src.and(MASK4);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 432 + i * stride);
			src = src.and(MASK4);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 12));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 560 + i * stride);
			src = src.and(MASK4);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 688 + i * stride);
			src = src.and(MASK4);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 20));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 816 + i * stride);
			src = src.and(MASK4);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 944 + i * stride);
			src = src.and(MASK4);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 28));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 112 + i * stride);
			src = src.and(MASK4);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 240 + i * stride);
			src = src.and(MASK4);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 36));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 368 + i * stride);
			src = src.and(MASK4);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 40));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 496 + i * stride);
			src = src.and(MASK4);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 44));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 624 + i * stride);
			src = src.and(MASK4);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 48));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 752 + i * stride);
			src = src.and(MASK4);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 52));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 880 + i * stride);
			src = src.and(MASK4);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 56));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 1008 + i * stride);
			src = src.and(MASK4);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 60));
			tmp.intoArray(output, 48 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4);
		}
	}

	public static void pack5(long[] input, long[] output) {
		int stride = LongVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 64;
		for (int i = 0; i < 16 / stride; i++) {
			LongVector src;
			LongVector tmp;
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 0 + i * stride);
			src = src.and(MASK5);
			tmp = src;
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 128 + i * stride);
			src = src.and(MASK5);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 5));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 256 + i * stride);
			src = src.and(MASK5);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 10));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 384 + i * stride);
			src = src.and(MASK5);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 15));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 512 + i * stride);
			src = src.and(MASK5);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 20));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 640 + i * stride);
			src = src.and(MASK5);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 25));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 768 + i * stride);
			src = src.and(MASK5);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 30));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 896 + i * stride);
			src = src.and(MASK5);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 35));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 64 + i * stride);
			src = src.and(MASK5);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 40));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 192 + i * stride);
			src = src.and(MASK5);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 45));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 320 + i * stride);
			src = src.and(MASK5);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 50));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 448 + i * stride);
			src = src.and(MASK5);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 55));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 576 + i * stride);
			src = src.and(MASK5);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 60));
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 704 + i * stride);
			src = src.and(MASK5);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 1));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 832 + i * stride);
			src = src.and(MASK5);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 6));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 960 + i * stride);
			src = src.and(MASK5);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 11));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 32 + i * stride);
			src = src.and(MASK5);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 160 + i * stride);
			src = src.and(MASK5);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 21));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 288 + i * stride);
			src = src.and(MASK5);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 26));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 416 + i * stride);
			src = src.and(MASK5);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 31));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 544 + i * stride);
			src = src.and(MASK5);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 36));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 672 + i * stride);
			src = src.and(MASK5);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 41));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 800 + i * stride);
			src = src.and(MASK5);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 46));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 928 + i * stride);
			src = src.and(MASK5);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 51));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 96 + i * stride);
			src = src.and(MASK5);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 56));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 224 + i * stride);
			src = src.and(MASK5);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 61));
			tmp.intoArray(output, 16 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 3);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 352 + i * stride);
			src = src.and(MASK5);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 2));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 480 + i * stride);
			src = src.and(MASK5);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 7));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 608 + i * stride);
			src = src.and(MASK5);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 12));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 736 + i * stride);
			src = src.and(MASK5);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 17));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 864 + i * stride);
			src = src.and(MASK5);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 22));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 992 + i * stride);
			src = src.and(MASK5);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 27));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 16 + i * stride);
			src = src.and(MASK5);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 144 + i * stride);
			src = src.and(MASK5);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 37));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 272 + i * stride);
			src = src.and(MASK5);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 42));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 400 + i * stride);
			src = src.and(MASK5);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 47));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 528 + i * stride);
			src = src.and(MASK5);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 52));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 656 + i * stride);
			src = src.and(MASK5);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 57));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 784 + i * stride);
			src = src.and(MASK5);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 62));
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 912 + i * stride);
			src = src.and(MASK5);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 3));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 80 + i * stride);
			src = src.and(MASK5);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 208 + i * stride);
			src = src.and(MASK5);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 13));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 336 + i * stride);
			src = src.and(MASK5);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 18));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 464 + i * stride);
			src = src.and(MASK5);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 23));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 592 + i * stride);
			src = src.and(MASK5);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 28));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 720 + i * stride);
			src = src.and(MASK5);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 33));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 848 + i * stride);
			src = src.and(MASK5);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 38));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 976 + i * stride);
			src = src.and(MASK5);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 43));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 48 + i * stride);
			src = src.and(MASK5);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 48));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 176 + i * stride);
			src = src.and(MASK5);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 53));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 304 + i * stride);
			src = src.and(MASK5);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 58));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 432 + i * stride);
			src = src.and(MASK5);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 63));
			tmp.intoArray(output, 48 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 1);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 560 + i * stride);
			src = src.and(MASK5);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 4));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 688 + i * stride);
			src = src.and(MASK5);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 9));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 816 + i * stride);
			src = src.and(MASK5);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 14));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 944 + i * stride);
			src = src.and(MASK5);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 19));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 112 + i * stride);
			src = src.and(MASK5);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 240 + i * stride);
			src = src.and(MASK5);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 29));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 368 + i * stride);
			src = src.and(MASK5);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 34));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 496 + i * stride);
			src = src.and(MASK5);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 39));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 624 + i * stride);
			src = src.and(MASK5);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 44));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 752 + i * stride);
			src = src.and(MASK5);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 49));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 880 + i * stride);
			src = src.and(MASK5);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 54));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 1008 + i * stride);
			src = src.and(MASK5);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 59));
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 5);
		}
	}

	public static void pack6(long[] input, long[] output) {
		int stride = LongVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 64;
		for (int i = 0; i < 16 / stride; i++) {
			LongVector src;
			LongVector tmp;
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 0 + i * stride);
			src = src.and(MASK6);
			tmp = src;
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 128 + i * stride);
			src = src.and(MASK6);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 6));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 256 + i * stride);
			src = src.and(MASK6);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 12));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 384 + i * stride);
			src = src.and(MASK6);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 18));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 512 + i * stride);
			src = src.and(MASK6);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 640 + i * stride);
			src = src.and(MASK6);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 30));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 768 + i * stride);
			src = src.and(MASK6);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 36));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 896 + i * stride);
			src = src.and(MASK6);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 42));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 64 + i * stride);
			src = src.and(MASK6);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 48));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 192 + i * stride);
			src = src.and(MASK6);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 54));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 320 + i * stride);
			src = src.and(MASK6);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 60));
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 448 + i * stride);
			src = src.and(MASK6);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 2));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 576 + i * stride);
			src = src.and(MASK6);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 704 + i * stride);
			src = src.and(MASK6);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 14));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 832 + i * stride);
			src = src.and(MASK6);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 20));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 960 + i * stride);
			src = src.and(MASK6);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 26));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 32 + i * stride);
			src = src.and(MASK6);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 160 + i * stride);
			src = src.and(MASK6);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 38));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 288 + i * stride);
			src = src.and(MASK6);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 44));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 416 + i * stride);
			src = src.and(MASK6);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 50));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 544 + i * stride);
			src = src.and(MASK6);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 56));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 672 + i * stride);
			src = src.and(MASK6);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 62));
			tmp.intoArray(output, 16 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 800 + i * stride);
			src = src.and(MASK6);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 4));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 928 + i * stride);
			src = src.and(MASK6);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 10));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 96 + i * stride);
			src = src.and(MASK6);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 224 + i * stride);
			src = src.and(MASK6);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 22));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 352 + i * stride);
			src = src.and(MASK6);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 28));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 480 + i * stride);
			src = src.and(MASK6);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 34));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 608 + i * stride);
			src = src.and(MASK6);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 40));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 736 + i * stride);
			src = src.and(MASK6);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 46));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 864 + i * stride);
			src = src.and(MASK6);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 52));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 992 + i * stride);
			src = src.and(MASK6);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 58));
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 16 + i * stride);
			src = src.and(MASK6);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 144 + i * stride);
			src = src.and(MASK6);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 6));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 272 + i * stride);
			src = src.and(MASK6);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 12));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 400 + i * stride);
			src = src.and(MASK6);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 18));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 528 + i * stride);
			src = src.and(MASK6);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 656 + i * stride);
			src = src.and(MASK6);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 30));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 784 + i * stride);
			src = src.and(MASK6);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 36));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 912 + i * stride);
			src = src.and(MASK6);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 42));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 80 + i * stride);
			src = src.and(MASK6);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 48));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 208 + i * stride);
			src = src.and(MASK6);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 54));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 336 + i * stride);
			src = src.and(MASK6);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 60));
			tmp.intoArray(output, 48 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 464 + i * stride);
			src = src.and(MASK6);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 2));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 592 + i * stride);
			src = src.and(MASK6);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 720 + i * stride);
			src = src.and(MASK6);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 14));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 848 + i * stride);
			src = src.and(MASK6);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 20));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 976 + i * stride);
			src = src.and(MASK6);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 26));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 48 + i * stride);
			src = src.and(MASK6);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 176 + i * stride);
			src = src.and(MASK6);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 38));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 304 + i * stride);
			src = src.and(MASK6);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 44));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 432 + i * stride);
			src = src.and(MASK6);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 50));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 560 + i * stride);
			src = src.and(MASK6);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 56));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 688 + i * stride);
			src = src.and(MASK6);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 62));
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 816 + i * stride);
			src = src.and(MASK6);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 4));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 944 + i * stride);
			src = src.and(MASK6);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 10));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 112 + i * stride);
			src = src.and(MASK6);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 240 + i * stride);
			src = src.and(MASK6);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 22));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 368 + i * stride);
			src = src.and(MASK6);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 28));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 496 + i * stride);
			src = src.and(MASK6);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 34));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 624 + i * stride);
			src = src.and(MASK6);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 40));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 752 + i * stride);
			src = src.and(MASK6);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 46));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 880 + i * stride);
			src = src.and(MASK6);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 52));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 1008 + i * stride);
			src = src.and(MASK6);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 58));
			tmp.intoArray(output, 80 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6);
		}
	}

	public static void pack7(long[] input, long[] output) {
		int stride = LongVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 64;
		for (int i = 0; i < 16 / stride; i++) {
			LongVector src;
			LongVector tmp;
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 0 + i * stride);
			src = src.and(MASK7);
			tmp = src;
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 128 + i * stride);
			src = src.and(MASK7);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 7));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 256 + i * stride);
			src = src.and(MASK7);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 14));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 384 + i * stride);
			src = src.and(MASK7);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 21));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 512 + i * stride);
			src = src.and(MASK7);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 28));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 640 + i * stride);
			src = src.and(MASK7);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 35));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 768 + i * stride);
			src = src.and(MASK7);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 42));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 896 + i * stride);
			src = src.and(MASK7);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 49));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 64 + i * stride);
			src = src.and(MASK7);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 56));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 192 + i * stride);
			src = src.and(MASK7);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 63));
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 1);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 320 + i * stride);
			src = src.and(MASK7);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 6));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 448 + i * stride);
			src = src.and(MASK7);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 13));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 576 + i * stride);
			src = src.and(MASK7);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 20));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 704 + i * stride);
			src = src.and(MASK7);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 27));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 832 + i * stride);
			src = src.and(MASK7);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 34));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 960 + i * stride);
			src = src.and(MASK7);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 41));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 32 + i * stride);
			src = src.and(MASK7);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 48));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 160 + i * stride);
			src = src.and(MASK7);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 55));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 288 + i * stride);
			src = src.and(MASK7);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 62));
			tmp.intoArray(output, 16 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 416 + i * stride);
			src = src.and(MASK7);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 5));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 544 + i * stride);
			src = src.and(MASK7);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 12));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 672 + i * stride);
			src = src.and(MASK7);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 19));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 800 + i * stride);
			src = src.and(MASK7);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 26));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 928 + i * stride);
			src = src.and(MASK7);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 33));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 96 + i * stride);
			src = src.and(MASK7);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 40));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 224 + i * stride);
			src = src.and(MASK7);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 47));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 352 + i * stride);
			src = src.and(MASK7);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 54));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 480 + i * stride);
			src = src.and(MASK7);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 61));
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 3);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 608 + i * stride);
			src = src.and(MASK7);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 4));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 736 + i * stride);
			src = src.and(MASK7);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 11));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 864 + i * stride);
			src = src.and(MASK7);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 18));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 992 + i * stride);
			src = src.and(MASK7);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 25));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 16 + i * stride);
			src = src.and(MASK7);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 144 + i * stride);
			src = src.and(MASK7);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 39));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 272 + i * stride);
			src = src.and(MASK7);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 46));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 400 + i * stride);
			src = src.and(MASK7);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 53));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 528 + i * stride);
			src = src.and(MASK7);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 60));
			tmp.intoArray(output, 48 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 656 + i * stride);
			src = src.and(MASK7);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 3));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 784 + i * stride);
			src = src.and(MASK7);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 10));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 912 + i * stride);
			src = src.and(MASK7);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 17));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 80 + i * stride);
			src = src.and(MASK7);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 208 + i * stride);
			src = src.and(MASK7);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 31));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 336 + i * stride);
			src = src.and(MASK7);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 38));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 464 + i * stride);
			src = src.and(MASK7);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 45));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 592 + i * stride);
			src = src.and(MASK7);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 52));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 720 + i * stride);
			src = src.and(MASK7);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 59));
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 5);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 848 + i * stride);
			src = src.and(MASK7);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 2));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 976 + i * stride);
			src = src.and(MASK7);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 9));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 48 + i * stride);
			src = src.and(MASK7);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 176 + i * stride);
			src = src.and(MASK7);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 23));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 304 + i * stride);
			src = src.and(MASK7);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 30));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 432 + i * stride);
			src = src.and(MASK7);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 37));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 560 + i * stride);
			src = src.and(MASK7);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 44));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 688 + i * stride);
			src = src.and(MASK7);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 51));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 816 + i * stride);
			src = src.and(MASK7);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 58));
			tmp.intoArray(output, 80 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 944 + i * stride);
			src = src.and(MASK7);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 1));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 112 + i * stride);
			src = src.and(MASK7);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 240 + i * stride);
			src = src.and(MASK7);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 15));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 368 + i * stride);
			src = src.and(MASK7);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 22));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 496 + i * stride);
			src = src.and(MASK7);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 29));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 624 + i * stride);
			src = src.and(MASK7);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 36));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 752 + i * stride);
			src = src.and(MASK7);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 43));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 880 + i * stride);
			src = src.and(MASK7);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 50));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 1008 + i * stride);
			src = src.and(MASK7);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 57));
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 7);
		}
	}

	public static void pack8(long[] input, long[] output) {
		int stride = LongVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 64;
		for (int i = 0; i < 16 / stride; i++) {
			LongVector src;
			LongVector tmp;
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 0 + i * stride);
			src = src.and(MASK8);
			tmp = src;
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 128 + i * stride);
			src = src.and(MASK8);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 256 + i * stride);
			src = src.and(MASK8);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 384 + i * stride);
			src = src.and(MASK8);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 512 + i * stride);
			src = src.and(MASK8);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 640 + i * stride);
			src = src.and(MASK8);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 40));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 768 + i * stride);
			src = src.and(MASK8);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 48));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 896 + i * stride);
			src = src.and(MASK8);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 56));
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 64 + i * stride);
			src = src.and(MASK8);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 192 + i * stride);
			src = src.and(MASK8);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 320 + i * stride);
			src = src.and(MASK8);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 448 + i * stride);
			src = src.and(MASK8);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 576 + i * stride);
			src = src.and(MASK8);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 704 + i * stride);
			src = src.and(MASK8);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 40));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 832 + i * stride);
			src = src.and(MASK8);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 48));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 960 + i * stride);
			src = src.and(MASK8);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 56));
			tmp.intoArray(output, 16 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 32 + i * stride);
			src = src.and(MASK8);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 160 + i * stride);
			src = src.and(MASK8);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 288 + i * stride);
			src = src.and(MASK8);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 416 + i * stride);
			src = src.and(MASK8);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 544 + i * stride);
			src = src.and(MASK8);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 672 + i * stride);
			src = src.and(MASK8);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 40));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 800 + i * stride);
			src = src.and(MASK8);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 48));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 928 + i * stride);
			src = src.and(MASK8);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 56));
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 96 + i * stride);
			src = src.and(MASK8);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 224 + i * stride);
			src = src.and(MASK8);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 352 + i * stride);
			src = src.and(MASK8);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 480 + i * stride);
			src = src.and(MASK8);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 608 + i * stride);
			src = src.and(MASK8);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 736 + i * stride);
			src = src.and(MASK8);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 40));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 864 + i * stride);
			src = src.and(MASK8);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 48));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 992 + i * stride);
			src = src.and(MASK8);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 56));
			tmp.intoArray(output, 48 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 16 + i * stride);
			src = src.and(MASK8);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 144 + i * stride);
			src = src.and(MASK8);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 272 + i * stride);
			src = src.and(MASK8);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 400 + i * stride);
			src = src.and(MASK8);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 528 + i * stride);
			src = src.and(MASK8);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 656 + i * stride);
			src = src.and(MASK8);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 40));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 784 + i * stride);
			src = src.and(MASK8);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 48));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 912 + i * stride);
			src = src.and(MASK8);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 56));
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 80 + i * stride);
			src = src.and(MASK8);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 208 + i * stride);
			src = src.and(MASK8);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 336 + i * stride);
			src = src.and(MASK8);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 464 + i * stride);
			src = src.and(MASK8);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 592 + i * stride);
			src = src.and(MASK8);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 720 + i * stride);
			src = src.and(MASK8);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 40));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 848 + i * stride);
			src = src.and(MASK8);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 48));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 976 + i * stride);
			src = src.and(MASK8);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 56));
			tmp.intoArray(output, 80 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 48 + i * stride);
			src = src.and(MASK8);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 176 + i * stride);
			src = src.and(MASK8);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 304 + i * stride);
			src = src.and(MASK8);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 432 + i * stride);
			src = src.and(MASK8);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 560 + i * stride);
			src = src.and(MASK8);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 688 + i * stride);
			src = src.and(MASK8);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 40));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 816 + i * stride);
			src = src.and(MASK8);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 48));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 944 + i * stride);
			src = src.and(MASK8);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 56));
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 112 + i * stride);
			src = src.and(MASK8);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 240 + i * stride);
			src = src.and(MASK8);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 368 + i * stride);
			src = src.and(MASK8);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 496 + i * stride);
			src = src.and(MASK8);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 624 + i * stride);
			src = src.and(MASK8);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 752 + i * stride);
			src = src.and(MASK8);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 40));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 880 + i * stride);
			src = src.and(MASK8);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 48));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 1008 + i * stride);
			src = src.and(MASK8);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 56));
			tmp.intoArray(output, 112 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
		}
	}

	public static void pack9(long[] input, long[] output) {
		int stride = LongVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 64;
		for (int i = 0; i < 16 / stride; i++) {
			LongVector src;
			LongVector tmp;
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 0 + i * stride);
			src = src.and(MASK9);
			tmp = src;
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 128 + i * stride);
			src = src.and(MASK9);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 9));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 256 + i * stride);
			src = src.and(MASK9);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 18));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 384 + i * stride);
			src = src.and(MASK9);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 27));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 512 + i * stride);
			src = src.and(MASK9);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 36));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 640 + i * stride);
			src = src.and(MASK9);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 45));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 768 + i * stride);
			src = src.and(MASK9);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 54));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 896 + i * stride);
			src = src.and(MASK9);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 63));
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 1);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 64 + i * stride);
			src = src.and(MASK9);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 192 + i * stride);
			src = src.and(MASK9);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 17));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 320 + i * stride);
			src = src.and(MASK9);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 26));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 448 + i * stride);
			src = src.and(MASK9);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 35));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 576 + i * stride);
			src = src.and(MASK9);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 44));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 704 + i * stride);
			src = src.and(MASK9);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 53));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 832 + i * stride);
			src = src.and(MASK9);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 62));
			tmp.intoArray(output, 16 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 960 + i * stride);
			src = src.and(MASK9);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 7));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 32 + i * stride);
			src = src.and(MASK9);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 160 + i * stride);
			src = src.and(MASK9);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 25));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 288 + i * stride);
			src = src.and(MASK9);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 34));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 416 + i * stride);
			src = src.and(MASK9);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 43));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 544 + i * stride);
			src = src.and(MASK9);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 52));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 672 + i * stride);
			src = src.and(MASK9);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 61));
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 3);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 800 + i * stride);
			src = src.and(MASK9);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 6));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 928 + i * stride);
			src = src.and(MASK9);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 15));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 96 + i * stride);
			src = src.and(MASK9);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 224 + i * stride);
			src = src.and(MASK9);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 33));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 352 + i * stride);
			src = src.and(MASK9);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 42));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 480 + i * stride);
			src = src.and(MASK9);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 51));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 608 + i * stride);
			src = src.and(MASK9);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 60));
			tmp.intoArray(output, 48 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 736 + i * stride);
			src = src.and(MASK9);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 5));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 864 + i * stride);
			src = src.and(MASK9);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 14));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 992 + i * stride);
			src = src.and(MASK9);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 23));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 16 + i * stride);
			src = src.and(MASK9);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 144 + i * stride);
			src = src.and(MASK9);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 41));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 272 + i * stride);
			src = src.and(MASK9);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 50));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 400 + i * stride);
			src = src.and(MASK9);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 59));
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 5);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 528 + i * stride);
			src = src.and(MASK9);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 4));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 656 + i * stride);
			src = src.and(MASK9);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 13));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 784 + i * stride);
			src = src.and(MASK9);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 22));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 912 + i * stride);
			src = src.and(MASK9);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 31));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 80 + i * stride);
			src = src.and(MASK9);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 40));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 208 + i * stride);
			src = src.and(MASK9);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 49));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 336 + i * stride);
			src = src.and(MASK9);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 58));
			tmp.intoArray(output, 80 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 464 + i * stride);
			src = src.and(MASK9);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 3));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 592 + i * stride);
			src = src.and(MASK9);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 12));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 720 + i * stride);
			src = src.and(MASK9);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 21));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 848 + i * stride);
			src = src.and(MASK9);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 30));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 976 + i * stride);
			src = src.and(MASK9);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 39));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 48 + i * stride);
			src = src.and(MASK9);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 48));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 176 + i * stride);
			src = src.and(MASK9);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 57));
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 7);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 304 + i * stride);
			src = src.and(MASK9);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 2));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 432 + i * stride);
			src = src.and(MASK9);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 11));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 560 + i * stride);
			src = src.and(MASK9);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 20));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 688 + i * stride);
			src = src.and(MASK9);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 29));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 816 + i * stride);
			src = src.and(MASK9);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 38));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 944 + i * stride);
			src = src.and(MASK9);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 47));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 112 + i * stride);
			src = src.and(MASK9);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 56));
			tmp.intoArray(output, 112 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 240 + i * stride);
			src = src.and(MASK9);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 1));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 368 + i * stride);
			src = src.and(MASK9);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 10));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 496 + i * stride);
			src = src.and(MASK9);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 19));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 624 + i * stride);
			src = src.and(MASK9);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 28));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 752 + i * stride);
			src = src.and(MASK9);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 37));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 880 + i * stride);
			src = src.and(MASK9);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 46));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 1008 + i * stride);
			src = src.and(MASK9);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 55));
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 9);
		}
	}

	public static void pack10(long[] input, long[] output) {
		int stride = LongVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 64;
		for (int i = 0; i < 16 / stride; i++) {
			LongVector src;
			LongVector tmp;
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 0 + i * stride);
			src = src.and(MASK10);
			tmp = src;
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 128 + i * stride);
			src = src.and(MASK10);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 10));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 256 + i * stride);
			src = src.and(MASK10);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 20));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 384 + i * stride);
			src = src.and(MASK10);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 30));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 512 + i * stride);
			src = src.and(MASK10);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 40));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 640 + i * stride);
			src = src.and(MASK10);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 50));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 768 + i * stride);
			src = src.and(MASK10);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 60));
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 896 + i * stride);
			src = src.and(MASK10);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 6));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 64 + i * stride);
			src = src.and(MASK10);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 192 + i * stride);
			src = src.and(MASK10);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 26));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 320 + i * stride);
			src = src.and(MASK10);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 36));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 448 + i * stride);
			src = src.and(MASK10);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 46));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 576 + i * stride);
			src = src.and(MASK10);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 56));
			tmp.intoArray(output, 16 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 704 + i * stride);
			src = src.and(MASK10);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 2));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 832 + i * stride);
			src = src.and(MASK10);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 12));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 960 + i * stride);
			src = src.and(MASK10);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 22));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 32 + i * stride);
			src = src.and(MASK10);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 160 + i * stride);
			src = src.and(MASK10);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 42));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 288 + i * stride);
			src = src.and(MASK10);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 52));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 416 + i * stride);
			src = src.and(MASK10);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 62));
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 544 + i * stride);
			src = src.and(MASK10);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 672 + i * stride);
			src = src.and(MASK10);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 18));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 800 + i * stride);
			src = src.and(MASK10);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 28));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 928 + i * stride);
			src = src.and(MASK10);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 38));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 96 + i * stride);
			src = src.and(MASK10);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 48));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 224 + i * stride);
			src = src.and(MASK10);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 58));
			tmp.intoArray(output, 48 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 352 + i * stride);
			src = src.and(MASK10);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 4));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 480 + i * stride);
			src = src.and(MASK10);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 14));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 608 + i * stride);
			src = src.and(MASK10);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 736 + i * stride);
			src = src.and(MASK10);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 34));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 864 + i * stride);
			src = src.and(MASK10);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 44));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 992 + i * stride);
			src = src.and(MASK10);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 54));
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 16 + i * stride);
			src = src.and(MASK10);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 144 + i * stride);
			src = src.and(MASK10);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 10));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 272 + i * stride);
			src = src.and(MASK10);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 20));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 400 + i * stride);
			src = src.and(MASK10);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 30));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 528 + i * stride);
			src = src.and(MASK10);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 40));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 656 + i * stride);
			src = src.and(MASK10);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 50));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 784 + i * stride);
			src = src.and(MASK10);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 60));
			tmp.intoArray(output, 80 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 912 + i * stride);
			src = src.and(MASK10);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 6));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 80 + i * stride);
			src = src.and(MASK10);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 208 + i * stride);
			src = src.and(MASK10);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 26));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 336 + i * stride);
			src = src.and(MASK10);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 36));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 464 + i * stride);
			src = src.and(MASK10);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 46));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 592 + i * stride);
			src = src.and(MASK10);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 56));
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 720 + i * stride);
			src = src.and(MASK10);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 2));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 848 + i * stride);
			src = src.and(MASK10);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 12));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 976 + i * stride);
			src = src.and(MASK10);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 22));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 48 + i * stride);
			src = src.and(MASK10);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 176 + i * stride);
			src = src.and(MASK10);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 42));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 304 + i * stride);
			src = src.and(MASK10);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 52));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 432 + i * stride);
			src = src.and(MASK10);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 62));
			tmp.intoArray(output, 112 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 560 + i * stride);
			src = src.and(MASK10);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 688 + i * stride);
			src = src.and(MASK10);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 18));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 816 + i * stride);
			src = src.and(MASK10);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 28));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 944 + i * stride);
			src = src.and(MASK10);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 38));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 112 + i * stride);
			src = src.and(MASK10);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 48));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 240 + i * stride);
			src = src.and(MASK10);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 58));
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 368 + i * stride);
			src = src.and(MASK10);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 4));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 496 + i * stride);
			src = src.and(MASK10);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 14));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 624 + i * stride);
			src = src.and(MASK10);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 752 + i * stride);
			src = src.and(MASK10);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 34));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 880 + i * stride);
			src = src.and(MASK10);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 44));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 1008 + i * stride);
			src = src.and(MASK10);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 54));
			tmp.intoArray(output, 144 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10);
		}
	}

	public static void pack11(long[] input, long[] output) {
		int stride = LongVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 64;
		for (int i = 0; i < 16 / stride; i++) {
			LongVector src;
			LongVector tmp;
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 0 + i * stride);
			src = src.and(MASK11);
			tmp = src;
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 128 + i * stride);
			src = src.and(MASK11);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 11));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 256 + i * stride);
			src = src.and(MASK11);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 22));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 384 + i * stride);
			src = src.and(MASK11);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 33));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 512 + i * stride);
			src = src.and(MASK11);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 44));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 640 + i * stride);
			src = src.and(MASK11);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 55));
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 9);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 768 + i * stride);
			src = src.and(MASK11);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 2));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 896 + i * stride);
			src = src.and(MASK11);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 13));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 64 + i * stride);
			src = src.and(MASK11);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 192 + i * stride);
			src = src.and(MASK11);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 35));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 320 + i * stride);
			src = src.and(MASK11);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 46));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 448 + i * stride);
			src = src.and(MASK11);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 57));
			tmp.intoArray(output, 16 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 7);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 576 + i * stride);
			src = src.and(MASK11);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 4));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 704 + i * stride);
			src = src.and(MASK11);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 15));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 832 + i * stride);
			src = src.and(MASK11);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 26));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 960 + i * stride);
			src = src.and(MASK11);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 37));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 32 + i * stride);
			src = src.and(MASK11);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 48));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 160 + i * stride);
			src = src.and(MASK11);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 59));
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 5);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 288 + i * stride);
			src = src.and(MASK11);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 6));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 416 + i * stride);
			src = src.and(MASK11);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 17));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 544 + i * stride);
			src = src.and(MASK11);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 28));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 672 + i * stride);
			src = src.and(MASK11);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 39));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 800 + i * stride);
			src = src.and(MASK11);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 50));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 928 + i * stride);
			src = src.and(MASK11);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 61));
			tmp.intoArray(output, 48 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 3);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 96 + i * stride);
			src = src.and(MASK11);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 224 + i * stride);
			src = src.and(MASK11);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 19));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 352 + i * stride);
			src = src.and(MASK11);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 30));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 480 + i * stride);
			src = src.and(MASK11);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 41));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 608 + i * stride);
			src = src.and(MASK11);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 52));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 736 + i * stride);
			src = src.and(MASK11);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 63));
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 1);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 864 + i * stride);
			src = src.and(MASK11);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 10));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 992 + i * stride);
			src = src.and(MASK11);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 21));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 16 + i * stride);
			src = src.and(MASK11);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 144 + i * stride);
			src = src.and(MASK11);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 43));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 272 + i * stride);
			src = src.and(MASK11);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 54));
			tmp.intoArray(output, 80 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 400 + i * stride);
			src = src.and(MASK11);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 1));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 528 + i * stride);
			src = src.and(MASK11);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 12));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 656 + i * stride);
			src = src.and(MASK11);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 23));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 784 + i * stride);
			src = src.and(MASK11);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 34));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 912 + i * stride);
			src = src.and(MASK11);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 45));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 80 + i * stride);
			src = src.and(MASK11);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 56));
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 208 + i * stride);
			src = src.and(MASK11);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 3));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 336 + i * stride);
			src = src.and(MASK11);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 14));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 464 + i * stride);
			src = src.and(MASK11);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 25));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 592 + i * stride);
			src = src.and(MASK11);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 36));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 720 + i * stride);
			src = src.and(MASK11);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 47));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 848 + i * stride);
			src = src.and(MASK11);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 58));
			tmp.intoArray(output, 112 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 976 + i * stride);
			src = src.and(MASK11);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 5));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 48 + i * stride);
			src = src.and(MASK11);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 176 + i * stride);
			src = src.and(MASK11);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 27));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 304 + i * stride);
			src = src.and(MASK11);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 38));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 432 + i * stride);
			src = src.and(MASK11);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 49));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 560 + i * stride);
			src = src.and(MASK11);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 60));
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 688 + i * stride);
			src = src.and(MASK11);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 7));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 816 + i * stride);
			src = src.and(MASK11);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 18));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 944 + i * stride);
			src = src.and(MASK11);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 29));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 112 + i * stride);
			src = src.and(MASK11);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 40));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 240 + i * stride);
			src = src.and(MASK11);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 51));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 368 + i * stride);
			src = src.and(MASK11);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 62));
			tmp.intoArray(output, 144 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 496 + i * stride);
			src = src.and(MASK11);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 9));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 624 + i * stride);
			src = src.and(MASK11);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 20));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 752 + i * stride);
			src = src.and(MASK11);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 31));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 880 + i * stride);
			src = src.and(MASK11);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 42));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 1008 + i * stride);
			src = src.and(MASK11);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 53));
			tmp.intoArray(output, 160 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 11);
		}
	}

	public static void pack12(long[] input, long[] output) {
		int stride = LongVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 64;
		for (int i = 0; i < 16 / stride; i++) {
			LongVector src;
			LongVector tmp;
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 0 + i * stride);
			src = src.and(MASK12);
			tmp = src;
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 128 + i * stride);
			src = src.and(MASK12);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 12));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 256 + i * stride);
			src = src.and(MASK12);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 384 + i * stride);
			src = src.and(MASK12);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 36));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 512 + i * stride);
			src = src.and(MASK12);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 48));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 640 + i * stride);
			src = src.and(MASK12);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 60));
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 768 + i * stride);
			src = src.and(MASK12);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 896 + i * stride);
			src = src.and(MASK12);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 20));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 64 + i * stride);
			src = src.and(MASK12);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 192 + i * stride);
			src = src.and(MASK12);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 44));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 320 + i * stride);
			src = src.and(MASK12);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 56));
			tmp.intoArray(output, 16 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 448 + i * stride);
			src = src.and(MASK12);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 4));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 576 + i * stride);
			src = src.and(MASK12);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 704 + i * stride);
			src = src.and(MASK12);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 28));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 832 + i * stride);
			src = src.and(MASK12);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 40));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 960 + i * stride);
			src = src.and(MASK12);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 52));
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 32 + i * stride);
			src = src.and(MASK12);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 160 + i * stride);
			src = src.and(MASK12);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 12));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 288 + i * stride);
			src = src.and(MASK12);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 416 + i * stride);
			src = src.and(MASK12);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 36));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 544 + i * stride);
			src = src.and(MASK12);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 48));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 672 + i * stride);
			src = src.and(MASK12);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 60));
			tmp.intoArray(output, 48 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 800 + i * stride);
			src = src.and(MASK12);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 928 + i * stride);
			src = src.and(MASK12);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 20));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 96 + i * stride);
			src = src.and(MASK12);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 224 + i * stride);
			src = src.and(MASK12);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 44));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 352 + i * stride);
			src = src.and(MASK12);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 56));
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 480 + i * stride);
			src = src.and(MASK12);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 4));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 608 + i * stride);
			src = src.and(MASK12);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 736 + i * stride);
			src = src.and(MASK12);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 28));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 864 + i * stride);
			src = src.and(MASK12);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 40));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 992 + i * stride);
			src = src.and(MASK12);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 52));
			tmp.intoArray(output, 80 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 16 + i * stride);
			src = src.and(MASK12);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 144 + i * stride);
			src = src.and(MASK12);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 12));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 272 + i * stride);
			src = src.and(MASK12);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 400 + i * stride);
			src = src.and(MASK12);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 36));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 528 + i * stride);
			src = src.and(MASK12);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 48));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 656 + i * stride);
			src = src.and(MASK12);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 60));
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 784 + i * stride);
			src = src.and(MASK12);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 912 + i * stride);
			src = src.and(MASK12);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 20));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 80 + i * stride);
			src = src.and(MASK12);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 208 + i * stride);
			src = src.and(MASK12);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 44));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 336 + i * stride);
			src = src.and(MASK12);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 56));
			tmp.intoArray(output, 112 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 464 + i * stride);
			src = src.and(MASK12);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 4));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 592 + i * stride);
			src = src.and(MASK12);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 720 + i * stride);
			src = src.and(MASK12);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 28));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 848 + i * stride);
			src = src.and(MASK12);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 40));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 976 + i * stride);
			src = src.and(MASK12);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 52));
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 48 + i * stride);
			src = src.and(MASK12);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 176 + i * stride);
			src = src.and(MASK12);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 12));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 304 + i * stride);
			src = src.and(MASK12);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 432 + i * stride);
			src = src.and(MASK12);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 36));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 560 + i * stride);
			src = src.and(MASK12);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 48));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 688 + i * stride);
			src = src.and(MASK12);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 60));
			tmp.intoArray(output, 144 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 816 + i * stride);
			src = src.and(MASK12);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 944 + i * stride);
			src = src.and(MASK12);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 20));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 112 + i * stride);
			src = src.and(MASK12);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 240 + i * stride);
			src = src.and(MASK12);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 44));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 368 + i * stride);
			src = src.and(MASK12);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 56));
			tmp.intoArray(output, 160 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 496 + i * stride);
			src = src.and(MASK12);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 4));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 624 + i * stride);
			src = src.and(MASK12);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 752 + i * stride);
			src = src.and(MASK12);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 28));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 880 + i * stride);
			src = src.and(MASK12);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 40));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 1008 + i * stride);
			src = src.and(MASK12);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 52));
			tmp.intoArray(output, 176 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12);
		}
	}

	public static void pack13(long[] input, long[] output) {
		int stride = LongVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 64;
		for (int i = 0; i < 16 / stride; i++) {
			LongVector src;
			LongVector tmp;
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 0 + i * stride);
			src = src.and(MASK13);
			tmp = src;
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 128 + i * stride);
			src = src.and(MASK13);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 13));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 256 + i * stride);
			src = src.and(MASK13);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 26));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 384 + i * stride);
			src = src.and(MASK13);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 39));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 512 + i * stride);
			src = src.and(MASK13);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 52));
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 640 + i * stride);
			src = src.and(MASK13);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 1));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 768 + i * stride);
			src = src.and(MASK13);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 14));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 896 + i * stride);
			src = src.and(MASK13);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 27));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 64 + i * stride);
			src = src.and(MASK13);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 40));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 192 + i * stride);
			src = src.and(MASK13);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 53));
			tmp.intoArray(output, 16 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 11);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 320 + i * stride);
			src = src.and(MASK13);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 2));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 448 + i * stride);
			src = src.and(MASK13);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 15));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 576 + i * stride);
			src = src.and(MASK13);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 28));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 704 + i * stride);
			src = src.and(MASK13);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 41));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 832 + i * stride);
			src = src.and(MASK13);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 54));
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 960 + i * stride);
			src = src.and(MASK13);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 3));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 32 + i * stride);
			src = src.and(MASK13);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 160 + i * stride);
			src = src.and(MASK13);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 29));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 288 + i * stride);
			src = src.and(MASK13);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 42));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 416 + i * stride);
			src = src.and(MASK13);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 55));
			tmp.intoArray(output, 48 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 9);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 544 + i * stride);
			src = src.and(MASK13);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 4));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 672 + i * stride);
			src = src.and(MASK13);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 17));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 800 + i * stride);
			src = src.and(MASK13);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 30));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 928 + i * stride);
			src = src.and(MASK13);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 43));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 96 + i * stride);
			src = src.and(MASK13);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 56));
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 224 + i * stride);
			src = src.and(MASK13);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 5));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 352 + i * stride);
			src = src.and(MASK13);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 18));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 480 + i * stride);
			src = src.and(MASK13);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 31));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 608 + i * stride);
			src = src.and(MASK13);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 44));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 736 + i * stride);
			src = src.and(MASK13);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 57));
			tmp.intoArray(output, 80 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 7);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 864 + i * stride);
			src = src.and(MASK13);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 6));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 992 + i * stride);
			src = src.and(MASK13);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 19));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 16 + i * stride);
			src = src.and(MASK13);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 144 + i * stride);
			src = src.and(MASK13);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 45));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 272 + i * stride);
			src = src.and(MASK13);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 58));
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 400 + i * stride);
			src = src.and(MASK13);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 7));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 528 + i * stride);
			src = src.and(MASK13);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 20));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 656 + i * stride);
			src = src.and(MASK13);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 33));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 784 + i * stride);
			src = src.and(MASK13);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 46));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 912 + i * stride);
			src = src.and(MASK13);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 59));
			tmp.intoArray(output, 112 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 5);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 80 + i * stride);
			src = src.and(MASK13);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 208 + i * stride);
			src = src.and(MASK13);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 21));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 336 + i * stride);
			src = src.and(MASK13);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 34));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 464 + i * stride);
			src = src.and(MASK13);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 47));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 592 + i * stride);
			src = src.and(MASK13);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 60));
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 720 + i * stride);
			src = src.and(MASK13);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 9));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 848 + i * stride);
			src = src.and(MASK13);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 22));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 976 + i * stride);
			src = src.and(MASK13);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 35));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 48 + i * stride);
			src = src.and(MASK13);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 48));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 176 + i * stride);
			src = src.and(MASK13);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 61));
			tmp.intoArray(output, 144 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 3);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 304 + i * stride);
			src = src.and(MASK13);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 10));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 432 + i * stride);
			src = src.and(MASK13);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 23));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 560 + i * stride);
			src = src.and(MASK13);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 36));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 688 + i * stride);
			src = src.and(MASK13);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 49));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 816 + i * stride);
			src = src.and(MASK13);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 62));
			tmp.intoArray(output, 160 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 944 + i * stride);
			src = src.and(MASK13);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 11));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 112 + i * stride);
			src = src.and(MASK13);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 240 + i * stride);
			src = src.and(MASK13);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 37));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 368 + i * stride);
			src = src.and(MASK13);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 50));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 496 + i * stride);
			src = src.and(MASK13);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 63));
			tmp.intoArray(output, 176 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 1);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 624 + i * stride);
			src = src.and(MASK13);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 12));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 752 + i * stride);
			src = src.and(MASK13);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 25));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 880 + i * stride);
			src = src.and(MASK13);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 38));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 1008 + i * stride);
			src = src.and(MASK13);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 51));
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 13);
		}
	}

	public static void pack14(long[] input, long[] output) {
		int stride = LongVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 64;
		for (int i = 0; i < 16 / stride; i++) {
			LongVector src;
			LongVector tmp;
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 0 + i * stride);
			src = src.and(MASK14);
			tmp = src;
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 128 + i * stride);
			src = src.and(MASK14);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 14));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 256 + i * stride);
			src = src.and(MASK14);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 28));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 384 + i * stride);
			src = src.and(MASK14);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 42));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 512 + i * stride);
			src = src.and(MASK14);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 56));
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 640 + i * stride);
			src = src.and(MASK14);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 6));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 768 + i * stride);
			src = src.and(MASK14);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 20));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 896 + i * stride);
			src = src.and(MASK14);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 34));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 64 + i * stride);
			src = src.and(MASK14);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 48));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 192 + i * stride);
			src = src.and(MASK14);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 62));
			tmp.intoArray(output, 16 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 320 + i * stride);
			src = src.and(MASK14);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 12));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 448 + i * stride);
			src = src.and(MASK14);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 26));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 576 + i * stride);
			src = src.and(MASK14);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 40));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 704 + i * stride);
			src = src.and(MASK14);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 54));
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 832 + i * stride);
			src = src.and(MASK14);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 4));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 960 + i * stride);
			src = src.and(MASK14);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 18));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 32 + i * stride);
			src = src.and(MASK14);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 160 + i * stride);
			src = src.and(MASK14);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 46));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 288 + i * stride);
			src = src.and(MASK14);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 60));
			tmp.intoArray(output, 48 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 416 + i * stride);
			src = src.and(MASK14);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 10));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 544 + i * stride);
			src = src.and(MASK14);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 672 + i * stride);
			src = src.and(MASK14);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 38));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 800 + i * stride);
			src = src.and(MASK14);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 52));
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 928 + i * stride);
			src = src.and(MASK14);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 2));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 96 + i * stride);
			src = src.and(MASK14);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 224 + i * stride);
			src = src.and(MASK14);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 30));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 352 + i * stride);
			src = src.and(MASK14);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 44));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 480 + i * stride);
			src = src.and(MASK14);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 58));
			tmp.intoArray(output, 80 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 608 + i * stride);
			src = src.and(MASK14);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 736 + i * stride);
			src = src.and(MASK14);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 22));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 864 + i * stride);
			src = src.and(MASK14);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 36));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 992 + i * stride);
			src = src.and(MASK14);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 50));
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 16 + i * stride);
			src = src.and(MASK14);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 144 + i * stride);
			src = src.and(MASK14);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 14));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 272 + i * stride);
			src = src.and(MASK14);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 28));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 400 + i * stride);
			src = src.and(MASK14);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 42));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 528 + i * stride);
			src = src.and(MASK14);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 56));
			tmp.intoArray(output, 112 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 656 + i * stride);
			src = src.and(MASK14);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 6));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 784 + i * stride);
			src = src.and(MASK14);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 20));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 912 + i * stride);
			src = src.and(MASK14);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 34));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 80 + i * stride);
			src = src.and(MASK14);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 48));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 208 + i * stride);
			src = src.and(MASK14);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 62));
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 336 + i * stride);
			src = src.and(MASK14);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 12));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 464 + i * stride);
			src = src.and(MASK14);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 26));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 592 + i * stride);
			src = src.and(MASK14);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 40));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 720 + i * stride);
			src = src.and(MASK14);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 54));
			tmp.intoArray(output, 144 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 848 + i * stride);
			src = src.and(MASK14);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 4));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 976 + i * stride);
			src = src.and(MASK14);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 18));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 48 + i * stride);
			src = src.and(MASK14);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 176 + i * stride);
			src = src.and(MASK14);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 46));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 304 + i * stride);
			src = src.and(MASK14);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 60));
			tmp.intoArray(output, 160 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 432 + i * stride);
			src = src.and(MASK14);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 10));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 560 + i * stride);
			src = src.and(MASK14);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 688 + i * stride);
			src = src.and(MASK14);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 38));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 816 + i * stride);
			src = src.and(MASK14);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 52));
			tmp.intoArray(output, 176 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 944 + i * stride);
			src = src.and(MASK14);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 2));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 112 + i * stride);
			src = src.and(MASK14);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 240 + i * stride);
			src = src.and(MASK14);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 30));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 368 + i * stride);
			src = src.and(MASK14);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 44));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 496 + i * stride);
			src = src.and(MASK14);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 58));
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 624 + i * stride);
			src = src.and(MASK14);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 752 + i * stride);
			src = src.and(MASK14);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 22));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 880 + i * stride);
			src = src.and(MASK14);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 36));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 1008 + i * stride);
			src = src.and(MASK14);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 50));
			tmp.intoArray(output, 208 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14);
		}
	}

	public static void pack15(long[] input, long[] output) {
		int stride = LongVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 64;
		for (int i = 0; i < 16 / stride; i++) {
			LongVector src;
			LongVector tmp;
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 0 + i * stride);
			src = src.and(MASK15);
			tmp = src;
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 128 + i * stride);
			src = src.and(MASK15);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 15));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 256 + i * stride);
			src = src.and(MASK15);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 30));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 384 + i * stride);
			src = src.and(MASK15);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 45));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 512 + i * stride);
			src = src.and(MASK15);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 60));
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 640 + i * stride);
			src = src.and(MASK15);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 11));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 768 + i * stride);
			src = src.and(MASK15);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 26));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 896 + i * stride);
			src = src.and(MASK15);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 41));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 64 + i * stride);
			src = src.and(MASK15);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 56));
			tmp.intoArray(output, 16 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 192 + i * stride);
			src = src.and(MASK15);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 7));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 320 + i * stride);
			src = src.and(MASK15);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 22));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 448 + i * stride);
			src = src.and(MASK15);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 37));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 576 + i * stride);
			src = src.and(MASK15);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 52));
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 704 + i * stride);
			src = src.and(MASK15);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 3));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 832 + i * stride);
			src = src.and(MASK15);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 18));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 960 + i * stride);
			src = src.and(MASK15);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 33));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 32 + i * stride);
			src = src.and(MASK15);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 48));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 160 + i * stride);
			src = src.and(MASK15);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 63));
			tmp.intoArray(output, 48 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 1);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 288 + i * stride);
			src = src.and(MASK15);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 14));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 416 + i * stride);
			src = src.and(MASK15);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 29));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 544 + i * stride);
			src = src.and(MASK15);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 44));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 672 + i * stride);
			src = src.and(MASK15);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 59));
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 5);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 800 + i * stride);
			src = src.and(MASK15);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 10));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 928 + i * stride);
			src = src.and(MASK15);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 25));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 96 + i * stride);
			src = src.and(MASK15);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 40));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 224 + i * stride);
			src = src.and(MASK15);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 55));
			tmp.intoArray(output, 80 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 9);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 352 + i * stride);
			src = src.and(MASK15);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 6));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 480 + i * stride);
			src = src.and(MASK15);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 21));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 608 + i * stride);
			src = src.and(MASK15);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 36));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 736 + i * stride);
			src = src.and(MASK15);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 51));
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 13);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 864 + i * stride);
			src = src.and(MASK15);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 2));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 992 + i * stride);
			src = src.and(MASK15);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 17));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 16 + i * stride);
			src = src.and(MASK15);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 144 + i * stride);
			src = src.and(MASK15);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 47));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 272 + i * stride);
			src = src.and(MASK15);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 62));
			tmp.intoArray(output, 112 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 400 + i * stride);
			src = src.and(MASK15);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 13));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 528 + i * stride);
			src = src.and(MASK15);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 28));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 656 + i * stride);
			src = src.and(MASK15);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 43));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 784 + i * stride);
			src = src.and(MASK15);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 58));
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 912 + i * stride);
			src = src.and(MASK15);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 9));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 80 + i * stride);
			src = src.and(MASK15);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 208 + i * stride);
			src = src.and(MASK15);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 39));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 336 + i * stride);
			src = src.and(MASK15);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 54));
			tmp.intoArray(output, 144 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 464 + i * stride);
			src = src.and(MASK15);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 5));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 592 + i * stride);
			src = src.and(MASK15);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 20));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 720 + i * stride);
			src = src.and(MASK15);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 35));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 848 + i * stride);
			src = src.and(MASK15);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 50));
			tmp.intoArray(output, 160 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 976 + i * stride);
			src = src.and(MASK15);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 1));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 48 + i * stride);
			src = src.and(MASK15);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 176 + i * stride);
			src = src.and(MASK15);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 31));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 304 + i * stride);
			src = src.and(MASK15);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 46));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 432 + i * stride);
			src = src.and(MASK15);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 61));
			tmp.intoArray(output, 176 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 3);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 560 + i * stride);
			src = src.and(MASK15);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 12));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 688 + i * stride);
			src = src.and(MASK15);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 27));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 816 + i * stride);
			src = src.and(MASK15);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 42));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 944 + i * stride);
			src = src.and(MASK15);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 57));
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 7);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 112 + i * stride);
			src = src.and(MASK15);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 240 + i * stride);
			src = src.and(MASK15);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 23));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 368 + i * stride);
			src = src.and(MASK15);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 38));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 496 + i * stride);
			src = src.and(MASK15);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 53));
			tmp.intoArray(output, 208 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 11);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 624 + i * stride);
			src = src.and(MASK15);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 4));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 752 + i * stride);
			src = src.and(MASK15);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 19));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 880 + i * stride);
			src = src.and(MASK15);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 34));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 1008 + i * stride);
			src = src.and(MASK15);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 49));
			tmp.intoArray(output, 224 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 15);
		}
	}

	public static void pack16(long[] input, long[] output) {
		int stride = LongVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 64;
		for (int i = 0; i < 16 / stride; i++) {
			LongVector src;
			LongVector tmp;
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 0 + i * stride);
			src = src.and(MASK16);
			tmp = src;
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 128 + i * stride);
			src = src.and(MASK16);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 256 + i * stride);
			src = src.and(MASK16);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 384 + i * stride);
			src = src.and(MASK16);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 48));
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 512 + i * stride);
			src = src.and(MASK16);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 640 + i * stride);
			src = src.and(MASK16);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 768 + i * stride);
			src = src.and(MASK16);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 896 + i * stride);
			src = src.and(MASK16);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 48));
			tmp.intoArray(output, 16 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 64 + i * stride);
			src = src.and(MASK16);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 192 + i * stride);
			src = src.and(MASK16);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 320 + i * stride);
			src = src.and(MASK16);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 448 + i * stride);
			src = src.and(MASK16);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 48));
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 576 + i * stride);
			src = src.and(MASK16);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 704 + i * stride);
			src = src.and(MASK16);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 832 + i * stride);
			src = src.and(MASK16);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 960 + i * stride);
			src = src.and(MASK16);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 48));
			tmp.intoArray(output, 48 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 32 + i * stride);
			src = src.and(MASK16);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 160 + i * stride);
			src = src.and(MASK16);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 288 + i * stride);
			src = src.and(MASK16);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 416 + i * stride);
			src = src.and(MASK16);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 48));
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 544 + i * stride);
			src = src.and(MASK16);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 672 + i * stride);
			src = src.and(MASK16);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 800 + i * stride);
			src = src.and(MASK16);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 928 + i * stride);
			src = src.and(MASK16);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 48));
			tmp.intoArray(output, 80 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 96 + i * stride);
			src = src.and(MASK16);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 224 + i * stride);
			src = src.and(MASK16);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 352 + i * stride);
			src = src.and(MASK16);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 480 + i * stride);
			src = src.and(MASK16);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 48));
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 608 + i * stride);
			src = src.and(MASK16);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 736 + i * stride);
			src = src.and(MASK16);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 864 + i * stride);
			src = src.and(MASK16);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 992 + i * stride);
			src = src.and(MASK16);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 48));
			tmp.intoArray(output, 112 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 16 + i * stride);
			src = src.and(MASK16);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 144 + i * stride);
			src = src.and(MASK16);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 272 + i * stride);
			src = src.and(MASK16);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 400 + i * stride);
			src = src.and(MASK16);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 48));
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 528 + i * stride);
			src = src.and(MASK16);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 656 + i * stride);
			src = src.and(MASK16);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 784 + i * stride);
			src = src.and(MASK16);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 912 + i * stride);
			src = src.and(MASK16);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 48));
			tmp.intoArray(output, 144 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 80 + i * stride);
			src = src.and(MASK16);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 208 + i * stride);
			src = src.and(MASK16);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 336 + i * stride);
			src = src.and(MASK16);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 464 + i * stride);
			src = src.and(MASK16);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 48));
			tmp.intoArray(output, 160 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 592 + i * stride);
			src = src.and(MASK16);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 720 + i * stride);
			src = src.and(MASK16);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 848 + i * stride);
			src = src.and(MASK16);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 976 + i * stride);
			src = src.and(MASK16);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 48));
			tmp.intoArray(output, 176 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 48 + i * stride);
			src = src.and(MASK16);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 176 + i * stride);
			src = src.and(MASK16);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 304 + i * stride);
			src = src.and(MASK16);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 432 + i * stride);
			src = src.and(MASK16);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 48));
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 560 + i * stride);
			src = src.and(MASK16);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 688 + i * stride);
			src = src.and(MASK16);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 816 + i * stride);
			src = src.and(MASK16);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 944 + i * stride);
			src = src.and(MASK16);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 48));
			tmp.intoArray(output, 208 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 112 + i * stride);
			src = src.and(MASK16);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 240 + i * stride);
			src = src.and(MASK16);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 368 + i * stride);
			src = src.and(MASK16);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 496 + i * stride);
			src = src.and(MASK16);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 48));
			tmp.intoArray(output, 224 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 624 + i * stride);
			src = src.and(MASK16);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 752 + i * stride);
			src = src.and(MASK16);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 880 + i * stride);
			src = src.and(MASK16);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 1008 + i * stride);
			src = src.and(MASK16);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 48));
			tmp.intoArray(output, 240 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16);
		}
	}

	public static void pack17(long[] input, long[] output) {
		int stride = LongVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 64;
		for (int i = 0; i < 16 / stride; i++) {
			LongVector src;
			LongVector tmp;
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 0 + i * stride);
			src = src.and(MASK17);
			tmp = src;
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 128 + i * stride);
			src = src.and(MASK17);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 17));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 256 + i * stride);
			src = src.and(MASK17);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 34));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 384 + i * stride);
			src = src.and(MASK17);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 51));
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 13);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 512 + i * stride);
			src = src.and(MASK17);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 4));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 640 + i * stride);
			src = src.and(MASK17);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 21));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 768 + i * stride);
			src = src.and(MASK17);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 38));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 896 + i * stride);
			src = src.and(MASK17);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 55));
			tmp.intoArray(output, 16 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 9);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 64 + i * stride);
			src = src.and(MASK17);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 192 + i * stride);
			src = src.and(MASK17);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 25));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 320 + i * stride);
			src = src.and(MASK17);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 42));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 448 + i * stride);
			src = src.and(MASK17);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 59));
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 5);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 576 + i * stride);
			src = src.and(MASK17);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 12));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 704 + i * stride);
			src = src.and(MASK17);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 29));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 832 + i * stride);
			src = src.and(MASK17);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 46));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 960 + i * stride);
			src = src.and(MASK17);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 63));
			tmp.intoArray(output, 48 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 1);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 32 + i * stride);
			src = src.and(MASK17);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 160 + i * stride);
			src = src.and(MASK17);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 33));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 288 + i * stride);
			src = src.and(MASK17);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 50));
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 416 + i * stride);
			src = src.and(MASK17);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 3));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 544 + i * stride);
			src = src.and(MASK17);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 20));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 672 + i * stride);
			src = src.and(MASK17);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 37));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 800 + i * stride);
			src = src.and(MASK17);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 54));
			tmp.intoArray(output, 80 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 928 + i * stride);
			src = src.and(MASK17);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 7));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 96 + i * stride);
			src = src.and(MASK17);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 224 + i * stride);
			src = src.and(MASK17);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 41));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 352 + i * stride);
			src = src.and(MASK17);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 58));
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 480 + i * stride);
			src = src.and(MASK17);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 11));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 608 + i * stride);
			src = src.and(MASK17);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 28));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 736 + i * stride);
			src = src.and(MASK17);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 45));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 864 + i * stride);
			src = src.and(MASK17);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 62));
			tmp.intoArray(output, 112 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 992 + i * stride);
			src = src.and(MASK17);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 15));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 16 + i * stride);
			src = src.and(MASK17);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 144 + i * stride);
			src = src.and(MASK17);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 49));
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 15);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 272 + i * stride);
			src = src.and(MASK17);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 2));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 400 + i * stride);
			src = src.and(MASK17);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 19));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 528 + i * stride);
			src = src.and(MASK17);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 36));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 656 + i * stride);
			src = src.and(MASK17);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 53));
			tmp.intoArray(output, 144 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 11);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 784 + i * stride);
			src = src.and(MASK17);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 6));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 912 + i * stride);
			src = src.and(MASK17);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 23));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 80 + i * stride);
			src = src.and(MASK17);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 40));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 208 + i * stride);
			src = src.and(MASK17);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 57));
			tmp.intoArray(output, 160 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 7);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 336 + i * stride);
			src = src.and(MASK17);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 10));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 464 + i * stride);
			src = src.and(MASK17);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 27));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 592 + i * stride);
			src = src.and(MASK17);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 44));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 720 + i * stride);
			src = src.and(MASK17);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 61));
			tmp.intoArray(output, 176 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 3);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 848 + i * stride);
			src = src.and(MASK17);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 14));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 976 + i * stride);
			src = src.and(MASK17);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 31));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 48 + i * stride);
			src = src.and(MASK17);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 48));
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 176 + i * stride);
			src = src.and(MASK17);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 1));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 304 + i * stride);
			src = src.and(MASK17);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 18));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 432 + i * stride);
			src = src.and(MASK17);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 35));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 560 + i * stride);
			src = src.and(MASK17);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 52));
			tmp.intoArray(output, 208 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 688 + i * stride);
			src = src.and(MASK17);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 5));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 816 + i * stride);
			src = src.and(MASK17);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 22));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 944 + i * stride);
			src = src.and(MASK17);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 39));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 112 + i * stride);
			src = src.and(MASK17);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 56));
			tmp.intoArray(output, 224 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 240 + i * stride);
			src = src.and(MASK17);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 9));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 368 + i * stride);
			src = src.and(MASK17);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 26));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 496 + i * stride);
			src = src.and(MASK17);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 43));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 624 + i * stride);
			src = src.and(MASK17);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 60));
			tmp.intoArray(output, 240 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 752 + i * stride);
			src = src.and(MASK17);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 13));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 880 + i * stride);
			src = src.and(MASK17);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 30));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 1008 + i * stride);
			src = src.and(MASK17);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 47));
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 17);
		}
	}

	public static void pack18(long[] input, long[] output) {
		int stride = LongVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 64;
		for (int i = 0; i < 16 / stride; i++) {
			LongVector src;
			LongVector tmp;
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 0 + i * stride);
			src = src.and(MASK18);
			tmp = src;
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 128 + i * stride);
			src = src.and(MASK18);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 18));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 256 + i * stride);
			src = src.and(MASK18);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 36));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 384 + i * stride);
			src = src.and(MASK18);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 54));
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 512 + i * stride);
			src = src.and(MASK18);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 640 + i * stride);
			src = src.and(MASK18);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 26));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 768 + i * stride);
			src = src.and(MASK18);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 44));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 896 + i * stride);
			src = src.and(MASK18);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 62));
			tmp.intoArray(output, 16 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 64 + i * stride);
			src = src.and(MASK18);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 192 + i * stride);
			src = src.and(MASK18);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 34));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 320 + i * stride);
			src = src.and(MASK18);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 52));
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 448 + i * stride);
			src = src.and(MASK18);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 6));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 576 + i * stride);
			src = src.and(MASK18);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 704 + i * stride);
			src = src.and(MASK18);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 42));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 832 + i * stride);
			src = src.and(MASK18);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 60));
			tmp.intoArray(output, 48 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 960 + i * stride);
			src = src.and(MASK18);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 14));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 32 + i * stride);
			src = src.and(MASK18);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 160 + i * stride);
			src = src.and(MASK18);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 50));
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 288 + i * stride);
			src = src.and(MASK18);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 4));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 416 + i * stride);
			src = src.and(MASK18);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 22));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 544 + i * stride);
			src = src.and(MASK18);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 40));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 672 + i * stride);
			src = src.and(MASK18);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 58));
			tmp.intoArray(output, 80 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 800 + i * stride);
			src = src.and(MASK18);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 12));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 928 + i * stride);
			src = src.and(MASK18);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 30));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 96 + i * stride);
			src = src.and(MASK18);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 48));
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 224 + i * stride);
			src = src.and(MASK18);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 2));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 352 + i * stride);
			src = src.and(MASK18);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 20));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 480 + i * stride);
			src = src.and(MASK18);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 38));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 608 + i * stride);
			src = src.and(MASK18);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 56));
			tmp.intoArray(output, 112 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 736 + i * stride);
			src = src.and(MASK18);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 10));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 864 + i * stride);
			src = src.and(MASK18);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 28));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 992 + i * stride);
			src = src.and(MASK18);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 46));
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 18);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 16 + i * stride);
			src = src.and(MASK18);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 144 + i * stride);
			src = src.and(MASK18);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 18));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 272 + i * stride);
			src = src.and(MASK18);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 36));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 400 + i * stride);
			src = src.and(MASK18);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 54));
			tmp.intoArray(output, 144 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 528 + i * stride);
			src = src.and(MASK18);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 656 + i * stride);
			src = src.and(MASK18);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 26));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 784 + i * stride);
			src = src.and(MASK18);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 44));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 912 + i * stride);
			src = src.and(MASK18);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 62));
			tmp.intoArray(output, 160 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 80 + i * stride);
			src = src.and(MASK18);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 208 + i * stride);
			src = src.and(MASK18);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 34));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 336 + i * stride);
			src = src.and(MASK18);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 52));
			tmp.intoArray(output, 176 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 464 + i * stride);
			src = src.and(MASK18);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 6));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 592 + i * stride);
			src = src.and(MASK18);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 720 + i * stride);
			src = src.and(MASK18);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 42));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 848 + i * stride);
			src = src.and(MASK18);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 60));
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 976 + i * stride);
			src = src.and(MASK18);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 14));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 48 + i * stride);
			src = src.and(MASK18);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 176 + i * stride);
			src = src.and(MASK18);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 50));
			tmp.intoArray(output, 208 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 304 + i * stride);
			src = src.and(MASK18);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 4));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 432 + i * stride);
			src = src.and(MASK18);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 22));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 560 + i * stride);
			src = src.and(MASK18);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 40));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 688 + i * stride);
			src = src.and(MASK18);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 58));
			tmp.intoArray(output, 224 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 816 + i * stride);
			src = src.and(MASK18);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 12));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 944 + i * stride);
			src = src.and(MASK18);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 30));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 112 + i * stride);
			src = src.and(MASK18);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 48));
			tmp.intoArray(output, 240 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 240 + i * stride);
			src = src.and(MASK18);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 2));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 368 + i * stride);
			src = src.and(MASK18);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 20));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 496 + i * stride);
			src = src.and(MASK18);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 38));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 624 + i * stride);
			src = src.and(MASK18);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 56));
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 752 + i * stride);
			src = src.and(MASK18);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 10));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 880 + i * stride);
			src = src.and(MASK18);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 28));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 1008 + i * stride);
			src = src.and(MASK18);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 46));
			tmp.intoArray(output, 272 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 18);
		}
	}

	public static void pack19(long[] input, long[] output) {
		int stride = LongVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 64;
		for (int i = 0; i < 16 / stride; i++) {
			LongVector src;
			LongVector tmp;
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 0 + i * stride);
			src = src.and(MASK19);
			tmp = src;
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 128 + i * stride);
			src = src.and(MASK19);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 19));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 256 + i * stride);
			src = src.and(MASK19);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 38));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 384 + i * stride);
			src = src.and(MASK19);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 57));
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 7);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 512 + i * stride);
			src = src.and(MASK19);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 12));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 640 + i * stride);
			src = src.and(MASK19);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 31));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 768 + i * stride);
			src = src.and(MASK19);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 50));
			tmp.intoArray(output, 16 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 896 + i * stride);
			src = src.and(MASK19);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 5));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 64 + i * stride);
			src = src.and(MASK19);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 192 + i * stride);
			src = src.and(MASK19);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 43));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 320 + i * stride);
			src = src.and(MASK19);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 62));
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 448 + i * stride);
			src = src.and(MASK19);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 17));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 576 + i * stride);
			src = src.and(MASK19);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 36));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 704 + i * stride);
			src = src.and(MASK19);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 55));
			tmp.intoArray(output, 48 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 9);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 832 + i * stride);
			src = src.and(MASK19);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 10));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 960 + i * stride);
			src = src.and(MASK19);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 29));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 32 + i * stride);
			src = src.and(MASK19);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 48));
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 160 + i * stride);
			src = src.and(MASK19);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 3));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 288 + i * stride);
			src = src.and(MASK19);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 22));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 416 + i * stride);
			src = src.and(MASK19);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 41));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 544 + i * stride);
			src = src.and(MASK19);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 60));
			tmp.intoArray(output, 80 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 672 + i * stride);
			src = src.and(MASK19);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 15));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 800 + i * stride);
			src = src.and(MASK19);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 34));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 928 + i * stride);
			src = src.and(MASK19);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 53));
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 11);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 96 + i * stride);
			src = src.and(MASK19);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 224 + i * stride);
			src = src.and(MASK19);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 27));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 352 + i * stride);
			src = src.and(MASK19);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 46));
			tmp.intoArray(output, 112 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 18);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 480 + i * stride);
			src = src.and(MASK19);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 1));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 608 + i * stride);
			src = src.and(MASK19);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 20));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 736 + i * stride);
			src = src.and(MASK19);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 39));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 864 + i * stride);
			src = src.and(MASK19);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 58));
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 992 + i * stride);
			src = src.and(MASK19);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 13));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 16 + i * stride);
			src = src.and(MASK19);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 144 + i * stride);
			src = src.and(MASK19);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 51));
			tmp.intoArray(output, 144 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 13);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 272 + i * stride);
			src = src.and(MASK19);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 6));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 400 + i * stride);
			src = src.and(MASK19);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 25));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 528 + i * stride);
			src = src.and(MASK19);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 44));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 656 + i * stride);
			src = src.and(MASK19);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 63));
			tmp.intoArray(output, 160 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 1);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 784 + i * stride);
			src = src.and(MASK19);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 18));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 912 + i * stride);
			src = src.and(MASK19);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 37));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 80 + i * stride);
			src = src.and(MASK19);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 56));
			tmp.intoArray(output, 176 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 208 + i * stride);
			src = src.and(MASK19);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 11));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 336 + i * stride);
			src = src.and(MASK19);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 30));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 464 + i * stride);
			src = src.and(MASK19);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 49));
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 15);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 592 + i * stride);
			src = src.and(MASK19);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 4));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 720 + i * stride);
			src = src.and(MASK19);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 23));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 848 + i * stride);
			src = src.and(MASK19);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 42));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 976 + i * stride);
			src = src.and(MASK19);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 61));
			tmp.intoArray(output, 208 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 3);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 48 + i * stride);
			src = src.and(MASK19);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 176 + i * stride);
			src = src.and(MASK19);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 35));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 304 + i * stride);
			src = src.and(MASK19);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 54));
			tmp.intoArray(output, 224 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 432 + i * stride);
			src = src.and(MASK19);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 9));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 560 + i * stride);
			src = src.and(MASK19);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 28));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 688 + i * stride);
			src = src.and(MASK19);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 47));
			tmp.intoArray(output, 240 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 17);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 816 + i * stride);
			src = src.and(MASK19);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 2));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 944 + i * stride);
			src = src.and(MASK19);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 21));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 112 + i * stride);
			src = src.and(MASK19);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 40));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 240 + i * stride);
			src = src.and(MASK19);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 59));
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 5);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 368 + i * stride);
			src = src.and(MASK19);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 14));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 496 + i * stride);
			src = src.and(MASK19);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 33));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 624 + i * stride);
			src = src.and(MASK19);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 52));
			tmp.intoArray(output, 272 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 752 + i * stride);
			src = src.and(MASK19);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 7));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 880 + i * stride);
			src = src.and(MASK19);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 26));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 1008 + i * stride);
			src = src.and(MASK19);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 45));
			tmp.intoArray(output, 288 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 19);
		}
	}

	public static void pack20(long[] input, long[] output) {
		int stride = LongVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 64;
		for (int i = 0; i < 16 / stride; i++) {
			LongVector src;
			LongVector tmp;
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 0 + i * stride);
			src = src.and(MASK20);
			tmp = src;
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 128 + i * stride);
			src = src.and(MASK20);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 20));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 256 + i * stride);
			src = src.and(MASK20);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 40));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 384 + i * stride);
			src = src.and(MASK20);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 60));
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 512 + i * stride);
			src = src.and(MASK20);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 640 + i * stride);
			src = src.and(MASK20);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 36));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 768 + i * stride);
			src = src.and(MASK20);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 56));
			tmp.intoArray(output, 16 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 896 + i * stride);
			src = src.and(MASK20);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 12));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 64 + i * stride);
			src = src.and(MASK20);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 192 + i * stride);
			src = src.and(MASK20);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 52));
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 320 + i * stride);
			src = src.and(MASK20);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 448 + i * stride);
			src = src.and(MASK20);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 28));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 576 + i * stride);
			src = src.and(MASK20);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 48));
			tmp.intoArray(output, 48 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 704 + i * stride);
			src = src.and(MASK20);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 4));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 832 + i * stride);
			src = src.and(MASK20);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 960 + i * stride);
			src = src.and(MASK20);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 44));
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 32 + i * stride);
			src = src.and(MASK20);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 160 + i * stride);
			src = src.and(MASK20);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 20));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 288 + i * stride);
			src = src.and(MASK20);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 40));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 416 + i * stride);
			src = src.and(MASK20);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 60));
			tmp.intoArray(output, 80 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 544 + i * stride);
			src = src.and(MASK20);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 672 + i * stride);
			src = src.and(MASK20);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 36));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 800 + i * stride);
			src = src.and(MASK20);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 56));
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 928 + i * stride);
			src = src.and(MASK20);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 12));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 96 + i * stride);
			src = src.and(MASK20);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 224 + i * stride);
			src = src.and(MASK20);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 52));
			tmp.intoArray(output, 112 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 352 + i * stride);
			src = src.and(MASK20);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 480 + i * stride);
			src = src.and(MASK20);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 28));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 608 + i * stride);
			src = src.and(MASK20);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 48));
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 736 + i * stride);
			src = src.and(MASK20);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 4));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 864 + i * stride);
			src = src.and(MASK20);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 992 + i * stride);
			src = src.and(MASK20);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 44));
			tmp.intoArray(output, 144 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 16 + i * stride);
			src = src.and(MASK20);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 144 + i * stride);
			src = src.and(MASK20);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 20));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 272 + i * stride);
			src = src.and(MASK20);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 40));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 400 + i * stride);
			src = src.and(MASK20);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 60));
			tmp.intoArray(output, 160 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 528 + i * stride);
			src = src.and(MASK20);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 656 + i * stride);
			src = src.and(MASK20);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 36));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 784 + i * stride);
			src = src.and(MASK20);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 56));
			tmp.intoArray(output, 176 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 912 + i * stride);
			src = src.and(MASK20);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 12));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 80 + i * stride);
			src = src.and(MASK20);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 208 + i * stride);
			src = src.and(MASK20);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 52));
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 336 + i * stride);
			src = src.and(MASK20);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 464 + i * stride);
			src = src.and(MASK20);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 28));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 592 + i * stride);
			src = src.and(MASK20);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 48));
			tmp.intoArray(output, 208 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 720 + i * stride);
			src = src.and(MASK20);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 4));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 848 + i * stride);
			src = src.and(MASK20);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 976 + i * stride);
			src = src.and(MASK20);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 44));
			tmp.intoArray(output, 224 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 48 + i * stride);
			src = src.and(MASK20);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 176 + i * stride);
			src = src.and(MASK20);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 20));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 304 + i * stride);
			src = src.and(MASK20);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 40));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 432 + i * stride);
			src = src.and(MASK20);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 60));
			tmp.intoArray(output, 240 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 560 + i * stride);
			src = src.and(MASK20);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 688 + i * stride);
			src = src.and(MASK20);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 36));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 816 + i * stride);
			src = src.and(MASK20);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 56));
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 944 + i * stride);
			src = src.and(MASK20);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 12));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 112 + i * stride);
			src = src.and(MASK20);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 240 + i * stride);
			src = src.and(MASK20);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 52));
			tmp.intoArray(output, 272 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 368 + i * stride);
			src = src.and(MASK20);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 496 + i * stride);
			src = src.and(MASK20);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 28));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 624 + i * stride);
			src = src.and(MASK20);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 48));
			tmp.intoArray(output, 288 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 752 + i * stride);
			src = src.and(MASK20);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 4));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 880 + i * stride);
			src = src.and(MASK20);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 1008 + i * stride);
			src = src.and(MASK20);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 44));
			tmp.intoArray(output, 304 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20);
		}
	}

	public static void pack21(long[] input, long[] output) {
		int stride = LongVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 64;
		for (int i = 0; i < 16 / stride; i++) {
			LongVector src;
			LongVector tmp;
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 0 + i * stride);
			src = src.and(MASK21);
			tmp = src;
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 128 + i * stride);
			src = src.and(MASK21);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 21));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 256 + i * stride);
			src = src.and(MASK21);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 42));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 384 + i * stride);
			src = src.and(MASK21);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 63));
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 1);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 512 + i * stride);
			src = src.and(MASK21);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 20));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 640 + i * stride);
			src = src.and(MASK21);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 41));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 768 + i * stride);
			src = src.and(MASK21);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 62));
			tmp.intoArray(output, 16 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 896 + i * stride);
			src = src.and(MASK21);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 19));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 64 + i * stride);
			src = src.and(MASK21);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 40));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 192 + i * stride);
			src = src.and(MASK21);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 61));
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 3);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 320 + i * stride);
			src = src.and(MASK21);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 18));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 448 + i * stride);
			src = src.and(MASK21);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 39));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 576 + i * stride);
			src = src.and(MASK21);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 60));
			tmp.intoArray(output, 48 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 704 + i * stride);
			src = src.and(MASK21);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 17));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 832 + i * stride);
			src = src.and(MASK21);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 38));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 960 + i * stride);
			src = src.and(MASK21);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 59));
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 5);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 32 + i * stride);
			src = src.and(MASK21);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 160 + i * stride);
			src = src.and(MASK21);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 37));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 288 + i * stride);
			src = src.and(MASK21);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 58));
			tmp.intoArray(output, 80 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 416 + i * stride);
			src = src.and(MASK21);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 15));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 544 + i * stride);
			src = src.and(MASK21);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 36));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 672 + i * stride);
			src = src.and(MASK21);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 57));
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 7);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 800 + i * stride);
			src = src.and(MASK21);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 14));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 928 + i * stride);
			src = src.and(MASK21);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 35));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 96 + i * stride);
			src = src.and(MASK21);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 56));
			tmp.intoArray(output, 112 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 224 + i * stride);
			src = src.and(MASK21);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 13));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 352 + i * stride);
			src = src.and(MASK21);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 34));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 480 + i * stride);
			src = src.and(MASK21);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 55));
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 9);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 608 + i * stride);
			src = src.and(MASK21);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 12));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 736 + i * stride);
			src = src.and(MASK21);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 33));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 864 + i * stride);
			src = src.and(MASK21);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 54));
			tmp.intoArray(output, 144 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 992 + i * stride);
			src = src.and(MASK21);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 11));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 16 + i * stride);
			src = src.and(MASK21);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 144 + i * stride);
			src = src.and(MASK21);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 53));
			tmp.intoArray(output, 160 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 11);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 272 + i * stride);
			src = src.and(MASK21);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 10));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 400 + i * stride);
			src = src.and(MASK21);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 31));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 528 + i * stride);
			src = src.and(MASK21);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 52));
			tmp.intoArray(output, 176 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 656 + i * stride);
			src = src.and(MASK21);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 9));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 784 + i * stride);
			src = src.and(MASK21);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 30));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 912 + i * stride);
			src = src.and(MASK21);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 51));
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 13);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 80 + i * stride);
			src = src.and(MASK21);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 208 + i * stride);
			src = src.and(MASK21);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 29));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 336 + i * stride);
			src = src.and(MASK21);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 50));
			tmp.intoArray(output, 208 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 464 + i * stride);
			src = src.and(MASK21);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 7));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 592 + i * stride);
			src = src.and(MASK21);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 28));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 720 + i * stride);
			src = src.and(MASK21);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 49));
			tmp.intoArray(output, 224 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 15);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 848 + i * stride);
			src = src.and(MASK21);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 6));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 976 + i * stride);
			src = src.and(MASK21);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 27));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 48 + i * stride);
			src = src.and(MASK21);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 48));
			tmp.intoArray(output, 240 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 176 + i * stride);
			src = src.and(MASK21);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 5));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 304 + i * stride);
			src = src.and(MASK21);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 26));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 432 + i * stride);
			src = src.and(MASK21);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 47));
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 17);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 560 + i * stride);
			src = src.and(MASK21);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 4));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 688 + i * stride);
			src = src.and(MASK21);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 25));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 816 + i * stride);
			src = src.and(MASK21);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 46));
			tmp.intoArray(output, 272 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 18);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 944 + i * stride);
			src = src.and(MASK21);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 3));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 112 + i * stride);
			src = src.and(MASK21);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 240 + i * stride);
			src = src.and(MASK21);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 45));
			tmp.intoArray(output, 288 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 19);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 368 + i * stride);
			src = src.and(MASK21);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 2));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 496 + i * stride);
			src = src.and(MASK21);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 23));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 624 + i * stride);
			src = src.and(MASK21);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 44));
			tmp.intoArray(output, 304 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 752 + i * stride);
			src = src.and(MASK21);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 1));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 880 + i * stride);
			src = src.and(MASK21);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 22));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 1008 + i * stride);
			src = src.and(MASK21);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 43));
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 21);
		}
	}

	public static void pack22(long[] input, long[] output) {
		int stride = LongVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 64;
		for (int i = 0; i < 16 / stride; i++) {
			LongVector src;
			LongVector tmp;
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 0 + i * stride);
			src = src.and(MASK22);
			tmp = src;
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 128 + i * stride);
			src = src.and(MASK22);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 22));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 256 + i * stride);
			src = src.and(MASK22);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 44));
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 384 + i * stride);
			src = src.and(MASK22);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 2));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 512 + i * stride);
			src = src.and(MASK22);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 640 + i * stride);
			src = src.and(MASK22);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 46));
			tmp.intoArray(output, 16 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 18);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 768 + i * stride);
			src = src.and(MASK22);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 4));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 896 + i * stride);
			src = src.and(MASK22);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 26));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 64 + i * stride);
			src = src.and(MASK22);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 48));
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 192 + i * stride);
			src = src.and(MASK22);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 6));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 320 + i * stride);
			src = src.and(MASK22);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 28));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 448 + i * stride);
			src = src.and(MASK22);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 50));
			tmp.intoArray(output, 48 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 576 + i * stride);
			src = src.and(MASK22);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 704 + i * stride);
			src = src.and(MASK22);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 30));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 832 + i * stride);
			src = src.and(MASK22);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 52));
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 960 + i * stride);
			src = src.and(MASK22);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 10));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 32 + i * stride);
			src = src.and(MASK22);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 160 + i * stride);
			src = src.and(MASK22);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 54));
			tmp.intoArray(output, 80 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 288 + i * stride);
			src = src.and(MASK22);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 12));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 416 + i * stride);
			src = src.and(MASK22);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 34));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 544 + i * stride);
			src = src.and(MASK22);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 56));
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 672 + i * stride);
			src = src.and(MASK22);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 14));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 800 + i * stride);
			src = src.and(MASK22);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 36));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 928 + i * stride);
			src = src.and(MASK22);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 58));
			tmp.intoArray(output, 112 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 96 + i * stride);
			src = src.and(MASK22);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 224 + i * stride);
			src = src.and(MASK22);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 38));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 352 + i * stride);
			src = src.and(MASK22);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 60));
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 480 + i * stride);
			src = src.and(MASK22);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 18));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 608 + i * stride);
			src = src.and(MASK22);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 40));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 736 + i * stride);
			src = src.and(MASK22);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 62));
			tmp.intoArray(output, 144 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 864 + i * stride);
			src = src.and(MASK22);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 20));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 992 + i * stride);
			src = src.and(MASK22);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 42));
			tmp.intoArray(output, 160 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 22);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 16 + i * stride);
			src = src.and(MASK22);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 144 + i * stride);
			src = src.and(MASK22);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 22));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 272 + i * stride);
			src = src.and(MASK22);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 44));
			tmp.intoArray(output, 176 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 400 + i * stride);
			src = src.and(MASK22);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 2));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 528 + i * stride);
			src = src.and(MASK22);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 656 + i * stride);
			src = src.and(MASK22);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 46));
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 18);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 784 + i * stride);
			src = src.and(MASK22);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 4));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 912 + i * stride);
			src = src.and(MASK22);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 26));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 80 + i * stride);
			src = src.and(MASK22);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 48));
			tmp.intoArray(output, 208 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 208 + i * stride);
			src = src.and(MASK22);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 6));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 336 + i * stride);
			src = src.and(MASK22);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 28));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 464 + i * stride);
			src = src.and(MASK22);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 50));
			tmp.intoArray(output, 224 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 592 + i * stride);
			src = src.and(MASK22);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 720 + i * stride);
			src = src.and(MASK22);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 30));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 848 + i * stride);
			src = src.and(MASK22);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 52));
			tmp.intoArray(output, 240 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 976 + i * stride);
			src = src.and(MASK22);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 10));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 48 + i * stride);
			src = src.and(MASK22);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 176 + i * stride);
			src = src.and(MASK22);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 54));
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 304 + i * stride);
			src = src.and(MASK22);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 12));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 432 + i * stride);
			src = src.and(MASK22);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 34));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 560 + i * stride);
			src = src.and(MASK22);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 56));
			tmp.intoArray(output, 272 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 688 + i * stride);
			src = src.and(MASK22);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 14));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 816 + i * stride);
			src = src.and(MASK22);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 36));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 944 + i * stride);
			src = src.and(MASK22);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 58));
			tmp.intoArray(output, 288 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 112 + i * stride);
			src = src.and(MASK22);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 240 + i * stride);
			src = src.and(MASK22);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 38));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 368 + i * stride);
			src = src.and(MASK22);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 60));
			tmp.intoArray(output, 304 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 496 + i * stride);
			src = src.and(MASK22);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 18));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 624 + i * stride);
			src = src.and(MASK22);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 40));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 752 + i * stride);
			src = src.and(MASK22);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 62));
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 880 + i * stride);
			src = src.and(MASK22);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 20));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 1008 + i * stride);
			src = src.and(MASK22);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 42));
			tmp.intoArray(output, 336 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 22);
		}
	}

	public static void pack23(long[] input, long[] output) {
		int stride = LongVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 64;
		for (int i = 0; i < 16 / stride; i++) {
			LongVector src;
			LongVector tmp;
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 0 + i * stride);
			src = src.and(MASK23);
			tmp = src;
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 128 + i * stride);
			src = src.and(MASK23);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 23));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 256 + i * stride);
			src = src.and(MASK23);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 46));
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 18);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 384 + i * stride);
			src = src.and(MASK23);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 5));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 512 + i * stride);
			src = src.and(MASK23);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 28));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 640 + i * stride);
			src = src.and(MASK23);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 51));
			tmp.intoArray(output, 16 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 13);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 768 + i * stride);
			src = src.and(MASK23);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 10));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 896 + i * stride);
			src = src.and(MASK23);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 33));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 64 + i * stride);
			src = src.and(MASK23);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 56));
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 192 + i * stride);
			src = src.and(MASK23);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 15));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 320 + i * stride);
			src = src.and(MASK23);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 38));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 448 + i * stride);
			src = src.and(MASK23);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 61));
			tmp.intoArray(output, 48 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 3);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 576 + i * stride);
			src = src.and(MASK23);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 20));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 704 + i * stride);
			src = src.and(MASK23);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 43));
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 21);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 832 + i * stride);
			src = src.and(MASK23);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 2));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 960 + i * stride);
			src = src.and(MASK23);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 25));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 32 + i * stride);
			src = src.and(MASK23);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 48));
			tmp.intoArray(output, 80 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 160 + i * stride);
			src = src.and(MASK23);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 7));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 288 + i * stride);
			src = src.and(MASK23);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 30));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 416 + i * stride);
			src = src.and(MASK23);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 53));
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 11);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 544 + i * stride);
			src = src.and(MASK23);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 12));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 672 + i * stride);
			src = src.and(MASK23);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 35));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 800 + i * stride);
			src = src.and(MASK23);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 58));
			tmp.intoArray(output, 112 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 928 + i * stride);
			src = src.and(MASK23);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 17));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 96 + i * stride);
			src = src.and(MASK23);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 40));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 224 + i * stride);
			src = src.and(MASK23);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 63));
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 1);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 352 + i * stride);
			src = src.and(MASK23);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 22));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 480 + i * stride);
			src = src.and(MASK23);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 45));
			tmp.intoArray(output, 144 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 19);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 608 + i * stride);
			src = src.and(MASK23);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 4));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 736 + i * stride);
			src = src.and(MASK23);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 27));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 864 + i * stride);
			src = src.and(MASK23);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 50));
			tmp.intoArray(output, 160 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 992 + i * stride);
			src = src.and(MASK23);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 9));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 16 + i * stride);
			src = src.and(MASK23);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 144 + i * stride);
			src = src.and(MASK23);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 55));
			tmp.intoArray(output, 176 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 9);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 272 + i * stride);
			src = src.and(MASK23);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 14));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 400 + i * stride);
			src = src.and(MASK23);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 37));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 528 + i * stride);
			src = src.and(MASK23);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 60));
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 656 + i * stride);
			src = src.and(MASK23);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 19));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 784 + i * stride);
			src = src.and(MASK23);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 42));
			tmp.intoArray(output, 208 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 22);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 912 + i * stride);
			src = src.and(MASK23);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 1));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 80 + i * stride);
			src = src.and(MASK23);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 208 + i * stride);
			src = src.and(MASK23);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 47));
			tmp.intoArray(output, 224 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 17);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 336 + i * stride);
			src = src.and(MASK23);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 6));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 464 + i * stride);
			src = src.and(MASK23);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 29));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 592 + i * stride);
			src = src.and(MASK23);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 52));
			tmp.intoArray(output, 240 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 720 + i * stride);
			src = src.and(MASK23);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 11));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 848 + i * stride);
			src = src.and(MASK23);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 34));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 976 + i * stride);
			src = src.and(MASK23);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 57));
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 7);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 48 + i * stride);
			src = src.and(MASK23);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 176 + i * stride);
			src = src.and(MASK23);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 39));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 304 + i * stride);
			src = src.and(MASK23);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 62));
			tmp.intoArray(output, 272 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 432 + i * stride);
			src = src.and(MASK23);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 21));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 560 + i * stride);
			src = src.and(MASK23);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 44));
			tmp.intoArray(output, 288 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 688 + i * stride);
			src = src.and(MASK23);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 3));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 816 + i * stride);
			src = src.and(MASK23);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 26));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 944 + i * stride);
			src = src.and(MASK23);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 49));
			tmp.intoArray(output, 304 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 15);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 112 + i * stride);
			src = src.and(MASK23);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 240 + i * stride);
			src = src.and(MASK23);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 31));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 368 + i * stride);
			src = src.and(MASK23);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 54));
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 496 + i * stride);
			src = src.and(MASK23);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 13));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 624 + i * stride);
			src = src.and(MASK23);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 36));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 752 + i * stride);
			src = src.and(MASK23);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 59));
			tmp.intoArray(output, 336 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 5);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 880 + i * stride);
			src = src.and(MASK23);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 18));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 1008 + i * stride);
			src = src.and(MASK23);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 41));
			tmp.intoArray(output, 352 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 23);
		}
	}

	public static void pack24(long[] input, long[] output) {
		int stride = LongVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 64;
		for (int i = 0; i < 16 / stride; i++) {
			LongVector src;
			LongVector tmp;
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 0 + i * stride);
			src = src.and(MASK24);
			tmp = src;
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 128 + i * stride);
			src = src.and(MASK24);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 256 + i * stride);
			src = src.and(MASK24);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 48));
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 384 + i * stride);
			src = src.and(MASK24);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 512 + i * stride);
			src = src.and(MASK24);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 640 + i * stride);
			src = src.and(MASK24);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 56));
			tmp.intoArray(output, 16 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 768 + i * stride);
			src = src.and(MASK24);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 896 + i * stride);
			src = src.and(MASK24);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 40));
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 64 + i * stride);
			src = src.and(MASK24);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 192 + i * stride);
			src = src.and(MASK24);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 320 + i * stride);
			src = src.and(MASK24);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 48));
			tmp.intoArray(output, 48 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 448 + i * stride);
			src = src.and(MASK24);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 576 + i * stride);
			src = src.and(MASK24);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 704 + i * stride);
			src = src.and(MASK24);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 56));
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 832 + i * stride);
			src = src.and(MASK24);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 960 + i * stride);
			src = src.and(MASK24);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 40));
			tmp.intoArray(output, 80 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 32 + i * stride);
			src = src.and(MASK24);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 160 + i * stride);
			src = src.and(MASK24);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 288 + i * stride);
			src = src.and(MASK24);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 48));
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 416 + i * stride);
			src = src.and(MASK24);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 544 + i * stride);
			src = src.and(MASK24);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 672 + i * stride);
			src = src.and(MASK24);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 56));
			tmp.intoArray(output, 112 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 800 + i * stride);
			src = src.and(MASK24);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 928 + i * stride);
			src = src.and(MASK24);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 40));
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 96 + i * stride);
			src = src.and(MASK24);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 224 + i * stride);
			src = src.and(MASK24);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 352 + i * stride);
			src = src.and(MASK24);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 48));
			tmp.intoArray(output, 144 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 480 + i * stride);
			src = src.and(MASK24);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 608 + i * stride);
			src = src.and(MASK24);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 736 + i * stride);
			src = src.and(MASK24);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 56));
			tmp.intoArray(output, 160 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 864 + i * stride);
			src = src.and(MASK24);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 992 + i * stride);
			src = src.and(MASK24);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 40));
			tmp.intoArray(output, 176 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 16 + i * stride);
			src = src.and(MASK24);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 144 + i * stride);
			src = src.and(MASK24);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 272 + i * stride);
			src = src.and(MASK24);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 48));
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 400 + i * stride);
			src = src.and(MASK24);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 528 + i * stride);
			src = src.and(MASK24);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 656 + i * stride);
			src = src.and(MASK24);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 56));
			tmp.intoArray(output, 208 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 784 + i * stride);
			src = src.and(MASK24);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 912 + i * stride);
			src = src.and(MASK24);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 40));
			tmp.intoArray(output, 224 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 80 + i * stride);
			src = src.and(MASK24);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 208 + i * stride);
			src = src.and(MASK24);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 336 + i * stride);
			src = src.and(MASK24);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 48));
			tmp.intoArray(output, 240 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 464 + i * stride);
			src = src.and(MASK24);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 592 + i * stride);
			src = src.and(MASK24);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 720 + i * stride);
			src = src.and(MASK24);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 56));
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 848 + i * stride);
			src = src.and(MASK24);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 976 + i * stride);
			src = src.and(MASK24);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 40));
			tmp.intoArray(output, 272 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 48 + i * stride);
			src = src.and(MASK24);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 176 + i * stride);
			src = src.and(MASK24);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 304 + i * stride);
			src = src.and(MASK24);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 48));
			tmp.intoArray(output, 288 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 432 + i * stride);
			src = src.and(MASK24);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 560 + i * stride);
			src = src.and(MASK24);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 688 + i * stride);
			src = src.and(MASK24);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 56));
			tmp.intoArray(output, 304 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 816 + i * stride);
			src = src.and(MASK24);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 944 + i * stride);
			src = src.and(MASK24);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 40));
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 112 + i * stride);
			src = src.and(MASK24);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 240 + i * stride);
			src = src.and(MASK24);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 368 + i * stride);
			src = src.and(MASK24);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 48));
			tmp.intoArray(output, 336 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 496 + i * stride);
			src = src.and(MASK24);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 624 + i * stride);
			src = src.and(MASK24);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 752 + i * stride);
			src = src.and(MASK24);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 56));
			tmp.intoArray(output, 352 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 880 + i * stride);
			src = src.and(MASK24);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 1008 + i * stride);
			src = src.and(MASK24);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 40));
			tmp.intoArray(output, 368 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24);
		}
	}

	public static void pack25(long[] input, long[] output) {
		int stride = LongVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 64;
		for (int i = 0; i < 16 / stride; i++) {
			LongVector src;
			LongVector tmp;
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 0 + i * stride);
			src = src.and(MASK25);
			tmp = src;
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 128 + i * stride);
			src = src.and(MASK25);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 25));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 256 + i * stride);
			src = src.and(MASK25);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 50));
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 384 + i * stride);
			src = src.and(MASK25);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 11));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 512 + i * stride);
			src = src.and(MASK25);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 36));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 640 + i * stride);
			src = src.and(MASK25);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 61));
			tmp.intoArray(output, 16 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 3);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 768 + i * stride);
			src = src.and(MASK25);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 22));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 896 + i * stride);
			src = src.and(MASK25);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 47));
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 17);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 64 + i * stride);
			src = src.and(MASK25);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 192 + i * stride);
			src = src.and(MASK25);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 33));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 320 + i * stride);
			src = src.and(MASK25);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 58));
			tmp.intoArray(output, 48 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 448 + i * stride);
			src = src.and(MASK25);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 19));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 576 + i * stride);
			src = src.and(MASK25);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 44));
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 704 + i * stride);
			src = src.and(MASK25);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 5));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 832 + i * stride);
			src = src.and(MASK25);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 30));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 960 + i * stride);
			src = src.and(MASK25);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 55));
			tmp.intoArray(output, 80 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 9);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 32 + i * stride);
			src = src.and(MASK25);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 160 + i * stride);
			src = src.and(MASK25);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 41));
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 23);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 288 + i * stride);
			src = src.and(MASK25);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 2));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 416 + i * stride);
			src = src.and(MASK25);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 27));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 544 + i * stride);
			src = src.and(MASK25);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 52));
			tmp.intoArray(output, 112 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 672 + i * stride);
			src = src.and(MASK25);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 13));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 800 + i * stride);
			src = src.and(MASK25);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 38));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 928 + i * stride);
			src = src.and(MASK25);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 63));
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 1);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 96 + i * stride);
			src = src.and(MASK25);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 224 + i * stride);
			src = src.and(MASK25);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 49));
			tmp.intoArray(output, 144 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 15);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 352 + i * stride);
			src = src.and(MASK25);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 10));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 480 + i * stride);
			src = src.and(MASK25);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 35));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 608 + i * stride);
			src = src.and(MASK25);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 60));
			tmp.intoArray(output, 160 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 736 + i * stride);
			src = src.and(MASK25);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 21));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 864 + i * stride);
			src = src.and(MASK25);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 46));
			tmp.intoArray(output, 176 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 18);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 992 + i * stride);
			src = src.and(MASK25);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 7));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 16 + i * stride);
			src = src.and(MASK25);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 144 + i * stride);
			src = src.and(MASK25);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 57));
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 7);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 272 + i * stride);
			src = src.and(MASK25);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 18));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 400 + i * stride);
			src = src.and(MASK25);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 43));
			tmp.intoArray(output, 208 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 21);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 528 + i * stride);
			src = src.and(MASK25);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 4));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 656 + i * stride);
			src = src.and(MASK25);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 29));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 784 + i * stride);
			src = src.and(MASK25);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 54));
			tmp.intoArray(output, 224 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 912 + i * stride);
			src = src.and(MASK25);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 15));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 80 + i * stride);
			src = src.and(MASK25);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 40));
			tmp.intoArray(output, 240 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 208 + i * stride);
			src = src.and(MASK25);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 1));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 336 + i * stride);
			src = src.and(MASK25);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 26));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 464 + i * stride);
			src = src.and(MASK25);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 51));
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 13);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 592 + i * stride);
			src = src.and(MASK25);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 12));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 720 + i * stride);
			src = src.and(MASK25);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 37));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 848 + i * stride);
			src = src.and(MASK25);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 62));
			tmp.intoArray(output, 272 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 976 + i * stride);
			src = src.and(MASK25);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 23));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 48 + i * stride);
			src = src.and(MASK25);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 48));
			tmp.intoArray(output, 288 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 176 + i * stride);
			src = src.and(MASK25);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 9));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 304 + i * stride);
			src = src.and(MASK25);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 34));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 432 + i * stride);
			src = src.and(MASK25);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 59));
			tmp.intoArray(output, 304 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 5);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 560 + i * stride);
			src = src.and(MASK25);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 20));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 688 + i * stride);
			src = src.and(MASK25);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 45));
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 19);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 816 + i * stride);
			src = src.and(MASK25);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 6));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 944 + i * stride);
			src = src.and(MASK25);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 31));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 112 + i * stride);
			src = src.and(MASK25);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 56));
			tmp.intoArray(output, 336 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 240 + i * stride);
			src = src.and(MASK25);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 17));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 368 + i * stride);
			src = src.and(MASK25);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 42));
			tmp.intoArray(output, 352 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 22);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 496 + i * stride);
			src = src.and(MASK25);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 3));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 624 + i * stride);
			src = src.and(MASK25);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 28));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 752 + i * stride);
			src = src.and(MASK25);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 53));
			tmp.intoArray(output, 368 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 11);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 880 + i * stride);
			src = src.and(MASK25);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 14));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 1008 + i * stride);
			src = src.and(MASK25);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 39));
			tmp.intoArray(output, 384 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 25);
		}
	}

	public static void pack26(long[] input, long[] output) {
		int stride = LongVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 64;
		for (int i = 0; i < 16 / stride; i++) {
			LongVector src;
			LongVector tmp;
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 0 + i * stride);
			src = src.and(MASK26);
			tmp = src;
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 128 + i * stride);
			src = src.and(MASK26);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 26));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 256 + i * stride);
			src = src.and(MASK26);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 52));
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 384 + i * stride);
			src = src.and(MASK26);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 14));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 512 + i * stride);
			src = src.and(MASK26);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 40));
			tmp.intoArray(output, 16 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 640 + i * stride);
			src = src.and(MASK26);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 2));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 768 + i * stride);
			src = src.and(MASK26);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 28));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 896 + i * stride);
			src = src.and(MASK26);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 54));
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 64 + i * stride);
			src = src.and(MASK26);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 192 + i * stride);
			src = src.and(MASK26);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 42));
			tmp.intoArray(output, 48 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 22);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 320 + i * stride);
			src = src.and(MASK26);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 4));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 448 + i * stride);
			src = src.and(MASK26);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 30));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 576 + i * stride);
			src = src.and(MASK26);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 56));
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 704 + i * stride);
			src = src.and(MASK26);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 18));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 832 + i * stride);
			src = src.and(MASK26);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 44));
			tmp.intoArray(output, 80 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 960 + i * stride);
			src = src.and(MASK26);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 6));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 32 + i * stride);
			src = src.and(MASK26);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 160 + i * stride);
			src = src.and(MASK26);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 58));
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 288 + i * stride);
			src = src.and(MASK26);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 20));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 416 + i * stride);
			src = src.and(MASK26);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 46));
			tmp.intoArray(output, 112 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 18);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 544 + i * stride);
			src = src.and(MASK26);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 672 + i * stride);
			src = src.and(MASK26);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 34));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 800 + i * stride);
			src = src.and(MASK26);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 60));
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 928 + i * stride);
			src = src.and(MASK26);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 22));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 96 + i * stride);
			src = src.and(MASK26);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 48));
			tmp.intoArray(output, 144 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 224 + i * stride);
			src = src.and(MASK26);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 10));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 352 + i * stride);
			src = src.and(MASK26);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 36));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 480 + i * stride);
			src = src.and(MASK26);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 62));
			tmp.intoArray(output, 160 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 608 + i * stride);
			src = src.and(MASK26);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 736 + i * stride);
			src = src.and(MASK26);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 50));
			tmp.intoArray(output, 176 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 864 + i * stride);
			src = src.and(MASK26);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 12));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 992 + i * stride);
			src = src.and(MASK26);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 38));
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 26);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 16 + i * stride);
			src = src.and(MASK26);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 144 + i * stride);
			src = src.and(MASK26);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 26));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 272 + i * stride);
			src = src.and(MASK26);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 52));
			tmp.intoArray(output, 208 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 400 + i * stride);
			src = src.and(MASK26);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 14));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 528 + i * stride);
			src = src.and(MASK26);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 40));
			tmp.intoArray(output, 224 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 656 + i * stride);
			src = src.and(MASK26);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 2));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 784 + i * stride);
			src = src.and(MASK26);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 28));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 912 + i * stride);
			src = src.and(MASK26);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 54));
			tmp.intoArray(output, 240 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 80 + i * stride);
			src = src.and(MASK26);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 208 + i * stride);
			src = src.and(MASK26);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 42));
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 22);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 336 + i * stride);
			src = src.and(MASK26);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 4));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 464 + i * stride);
			src = src.and(MASK26);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 30));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 592 + i * stride);
			src = src.and(MASK26);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 56));
			tmp.intoArray(output, 272 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 720 + i * stride);
			src = src.and(MASK26);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 18));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 848 + i * stride);
			src = src.and(MASK26);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 44));
			tmp.intoArray(output, 288 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 976 + i * stride);
			src = src.and(MASK26);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 6));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 48 + i * stride);
			src = src.and(MASK26);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 176 + i * stride);
			src = src.and(MASK26);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 58));
			tmp.intoArray(output, 304 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 304 + i * stride);
			src = src.and(MASK26);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 20));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 432 + i * stride);
			src = src.and(MASK26);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 46));
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 18);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 560 + i * stride);
			src = src.and(MASK26);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 688 + i * stride);
			src = src.and(MASK26);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 34));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 816 + i * stride);
			src = src.and(MASK26);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 60));
			tmp.intoArray(output, 336 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 944 + i * stride);
			src = src.and(MASK26);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 22));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 112 + i * stride);
			src = src.and(MASK26);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 48));
			tmp.intoArray(output, 352 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 240 + i * stride);
			src = src.and(MASK26);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 10));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 368 + i * stride);
			src = src.and(MASK26);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 36));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 496 + i * stride);
			src = src.and(MASK26);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 62));
			tmp.intoArray(output, 368 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 624 + i * stride);
			src = src.and(MASK26);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 752 + i * stride);
			src = src.and(MASK26);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 50));
			tmp.intoArray(output, 384 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 880 + i * stride);
			src = src.and(MASK26);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 12));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 1008 + i * stride);
			src = src.and(MASK26);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 38));
			tmp.intoArray(output, 400 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 26);
		}
	}

	public static void pack27(long[] input, long[] output) {
		int stride = LongVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 64;
		for (int i = 0; i < 16 / stride; i++) {
			LongVector src;
			LongVector tmp;
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 0 + i * stride);
			src = src.and(MASK27);
			tmp = src;
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 128 + i * stride);
			src = src.and(MASK27);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 27));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 256 + i * stride);
			src = src.and(MASK27);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 54));
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 384 + i * stride);
			src = src.and(MASK27);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 17));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 512 + i * stride);
			src = src.and(MASK27);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 44));
			tmp.intoArray(output, 16 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 640 + i * stride);
			src = src.and(MASK27);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 7));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 768 + i * stride);
			src = src.and(MASK27);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 34));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 896 + i * stride);
			src = src.and(MASK27);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 61));
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 3);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 64 + i * stride);
			src = src.and(MASK27);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 192 + i * stride);
			src = src.and(MASK27);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 51));
			tmp.intoArray(output, 48 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 13);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 320 + i * stride);
			src = src.and(MASK27);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 14));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 448 + i * stride);
			src = src.and(MASK27);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 41));
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 23);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 576 + i * stride);
			src = src.and(MASK27);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 4));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 704 + i * stride);
			src = src.and(MASK27);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 31));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 832 + i * stride);
			src = src.and(MASK27);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 58));
			tmp.intoArray(output, 80 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 960 + i * stride);
			src = src.and(MASK27);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 21));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 32 + i * stride);
			src = src.and(MASK27);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 48));
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 160 + i * stride);
			src = src.and(MASK27);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 11));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 288 + i * stride);
			src = src.and(MASK27);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 38));
			tmp.intoArray(output, 112 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 26);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 416 + i * stride);
			src = src.and(MASK27);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 1));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 544 + i * stride);
			src = src.and(MASK27);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 28));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 672 + i * stride);
			src = src.and(MASK27);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 55));
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 9);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 800 + i * stride);
			src = src.and(MASK27);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 18));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 928 + i * stride);
			src = src.and(MASK27);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 45));
			tmp.intoArray(output, 144 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 19);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 96 + i * stride);
			src = src.and(MASK27);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 224 + i * stride);
			src = src.and(MASK27);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 35));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 352 + i * stride);
			src = src.and(MASK27);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 62));
			tmp.intoArray(output, 160 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 480 + i * stride);
			src = src.and(MASK27);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 25));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 608 + i * stride);
			src = src.and(MASK27);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 52));
			tmp.intoArray(output, 176 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 736 + i * stride);
			src = src.and(MASK27);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 15));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 864 + i * stride);
			src = src.and(MASK27);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 42));
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 22);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 992 + i * stride);
			src = src.and(MASK27);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 5));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 16 + i * stride);
			src = src.and(MASK27);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 144 + i * stride);
			src = src.and(MASK27);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 59));
			tmp.intoArray(output, 208 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 5);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 272 + i * stride);
			src = src.and(MASK27);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 22));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 400 + i * stride);
			src = src.and(MASK27);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 49));
			tmp.intoArray(output, 224 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 15);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 528 + i * stride);
			src = src.and(MASK27);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 12));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 656 + i * stride);
			src = src.and(MASK27);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 39));
			tmp.intoArray(output, 240 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 25);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 784 + i * stride);
			src = src.and(MASK27);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 2));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 912 + i * stride);
			src = src.and(MASK27);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 29));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 80 + i * stride);
			src = src.and(MASK27);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 56));
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 208 + i * stride);
			src = src.and(MASK27);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 19));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 336 + i * stride);
			src = src.and(MASK27);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 46));
			tmp.intoArray(output, 272 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 18);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 464 + i * stride);
			src = src.and(MASK27);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 9));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 592 + i * stride);
			src = src.and(MASK27);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 36));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 720 + i * stride);
			src = src.and(MASK27);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 63));
			tmp.intoArray(output, 288 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 1);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 848 + i * stride);
			src = src.and(MASK27);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 26));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 976 + i * stride);
			src = src.and(MASK27);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 53));
			tmp.intoArray(output, 304 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 11);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 48 + i * stride);
			src = src.and(MASK27);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 176 + i * stride);
			src = src.and(MASK27);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 43));
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 21);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 304 + i * stride);
			src = src.and(MASK27);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 6));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 432 + i * stride);
			src = src.and(MASK27);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 33));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 560 + i * stride);
			src = src.and(MASK27);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 60));
			tmp.intoArray(output, 336 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 688 + i * stride);
			src = src.and(MASK27);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 23));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 816 + i * stride);
			src = src.and(MASK27);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 50));
			tmp.intoArray(output, 352 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 944 + i * stride);
			src = src.and(MASK27);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 13));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 112 + i * stride);
			src = src.and(MASK27);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 40));
			tmp.intoArray(output, 368 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 240 + i * stride);
			src = src.and(MASK27);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 3));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 368 + i * stride);
			src = src.and(MASK27);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 30));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 496 + i * stride);
			src = src.and(MASK27);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 57));
			tmp.intoArray(output, 384 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 7);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 624 + i * stride);
			src = src.and(MASK27);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 20));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 752 + i * stride);
			src = src.and(MASK27);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 47));
			tmp.intoArray(output, 400 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 17);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 880 + i * stride);
			src = src.and(MASK27);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 10));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 1008 + i * stride);
			src = src.and(MASK27);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 37));
			tmp.intoArray(output, 416 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 27);
		}
	}

	public static void pack28(long[] input, long[] output) {
		int stride = LongVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 64;
		for (int i = 0; i < 16 / stride; i++) {
			LongVector src;
			LongVector tmp;
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 0 + i * stride);
			src = src.and(MASK28);
			tmp = src;
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 128 + i * stride);
			src = src.and(MASK28);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 28));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 256 + i * stride);
			src = src.and(MASK28);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 56));
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 384 + i * stride);
			src = src.and(MASK28);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 20));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 512 + i * stride);
			src = src.and(MASK28);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 48));
			tmp.intoArray(output, 16 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 640 + i * stride);
			src = src.and(MASK28);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 12));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 768 + i * stride);
			src = src.and(MASK28);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 40));
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 896 + i * stride);
			src = src.and(MASK28);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 4));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 64 + i * stride);
			src = src.and(MASK28);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 192 + i * stride);
			src = src.and(MASK28);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 60));
			tmp.intoArray(output, 48 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 320 + i * stride);
			src = src.and(MASK28);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 448 + i * stride);
			src = src.and(MASK28);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 52));
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 576 + i * stride);
			src = src.and(MASK28);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 704 + i * stride);
			src = src.and(MASK28);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 44));
			tmp.intoArray(output, 80 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 832 + i * stride);
			src = src.and(MASK28);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 960 + i * stride);
			src = src.and(MASK28);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 36));
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 32 + i * stride);
			src = src.and(MASK28);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 160 + i * stride);
			src = src.and(MASK28);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 28));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 288 + i * stride);
			src = src.and(MASK28);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 56));
			tmp.intoArray(output, 112 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 416 + i * stride);
			src = src.and(MASK28);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 20));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 544 + i * stride);
			src = src.and(MASK28);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 48));
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 672 + i * stride);
			src = src.and(MASK28);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 12));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 800 + i * stride);
			src = src.and(MASK28);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 40));
			tmp.intoArray(output, 144 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 928 + i * stride);
			src = src.and(MASK28);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 4));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 96 + i * stride);
			src = src.and(MASK28);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 224 + i * stride);
			src = src.and(MASK28);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 60));
			tmp.intoArray(output, 160 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 352 + i * stride);
			src = src.and(MASK28);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 480 + i * stride);
			src = src.and(MASK28);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 52));
			tmp.intoArray(output, 176 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 608 + i * stride);
			src = src.and(MASK28);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 736 + i * stride);
			src = src.and(MASK28);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 44));
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 864 + i * stride);
			src = src.and(MASK28);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 992 + i * stride);
			src = src.and(MASK28);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 36));
			tmp.intoArray(output, 208 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 16 + i * stride);
			src = src.and(MASK28);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 144 + i * stride);
			src = src.and(MASK28);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 28));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 272 + i * stride);
			src = src.and(MASK28);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 56));
			tmp.intoArray(output, 224 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 400 + i * stride);
			src = src.and(MASK28);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 20));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 528 + i * stride);
			src = src.and(MASK28);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 48));
			tmp.intoArray(output, 240 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 656 + i * stride);
			src = src.and(MASK28);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 12));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 784 + i * stride);
			src = src.and(MASK28);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 40));
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 912 + i * stride);
			src = src.and(MASK28);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 4));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 80 + i * stride);
			src = src.and(MASK28);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 208 + i * stride);
			src = src.and(MASK28);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 60));
			tmp.intoArray(output, 272 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 336 + i * stride);
			src = src.and(MASK28);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 464 + i * stride);
			src = src.and(MASK28);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 52));
			tmp.intoArray(output, 288 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 592 + i * stride);
			src = src.and(MASK28);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 720 + i * stride);
			src = src.and(MASK28);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 44));
			tmp.intoArray(output, 304 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 848 + i * stride);
			src = src.and(MASK28);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 976 + i * stride);
			src = src.and(MASK28);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 36));
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 48 + i * stride);
			src = src.and(MASK28);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 176 + i * stride);
			src = src.and(MASK28);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 28));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 304 + i * stride);
			src = src.and(MASK28);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 56));
			tmp.intoArray(output, 336 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 432 + i * stride);
			src = src.and(MASK28);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 20));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 560 + i * stride);
			src = src.and(MASK28);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 48));
			tmp.intoArray(output, 352 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 688 + i * stride);
			src = src.and(MASK28);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 12));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 816 + i * stride);
			src = src.and(MASK28);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 40));
			tmp.intoArray(output, 368 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 944 + i * stride);
			src = src.and(MASK28);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 4));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 112 + i * stride);
			src = src.and(MASK28);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 240 + i * stride);
			src = src.and(MASK28);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 60));
			tmp.intoArray(output, 384 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 368 + i * stride);
			src = src.and(MASK28);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 496 + i * stride);
			src = src.and(MASK28);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 52));
			tmp.intoArray(output, 400 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 624 + i * stride);
			src = src.and(MASK28);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 752 + i * stride);
			src = src.and(MASK28);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 44));
			tmp.intoArray(output, 416 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 880 + i * stride);
			src = src.and(MASK28);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 1008 + i * stride);
			src = src.and(MASK28);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 36));
			tmp.intoArray(output, 432 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28);
		}
	}

	public static void pack29(long[] input, long[] output) {
		int stride = LongVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 64;
		for (int i = 0; i < 16 / stride; i++) {
			LongVector src;
			LongVector tmp;
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 0 + i * stride);
			src = src.and(MASK29);
			tmp = src;
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 128 + i * stride);
			src = src.and(MASK29);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 29));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 256 + i * stride);
			src = src.and(MASK29);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 58));
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 384 + i * stride);
			src = src.and(MASK29);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 23));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 512 + i * stride);
			src = src.and(MASK29);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 52));
			tmp.intoArray(output, 16 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 640 + i * stride);
			src = src.and(MASK29);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 17));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 768 + i * stride);
			src = src.and(MASK29);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 46));
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 18);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 896 + i * stride);
			src = src.and(MASK29);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 11));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 64 + i * stride);
			src = src.and(MASK29);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 40));
			tmp.intoArray(output, 48 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 192 + i * stride);
			src = src.and(MASK29);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 5));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 320 + i * stride);
			src = src.and(MASK29);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 34));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 448 + i * stride);
			src = src.and(MASK29);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 63));
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 1);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 576 + i * stride);
			src = src.and(MASK29);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 28));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 704 + i * stride);
			src = src.and(MASK29);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 57));
			tmp.intoArray(output, 80 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 7);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 832 + i * stride);
			src = src.and(MASK29);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 22));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 960 + i * stride);
			src = src.and(MASK29);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 51));
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 13);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 32 + i * stride);
			src = src.and(MASK29);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 160 + i * stride);
			src = src.and(MASK29);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 45));
			tmp.intoArray(output, 112 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 19);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 288 + i * stride);
			src = src.and(MASK29);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 10));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 416 + i * stride);
			src = src.and(MASK29);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 39));
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 25);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 544 + i * stride);
			src = src.and(MASK29);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 4));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 672 + i * stride);
			src = src.and(MASK29);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 33));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 800 + i * stride);
			src = src.and(MASK29);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 62));
			tmp.intoArray(output, 144 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 928 + i * stride);
			src = src.and(MASK29);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 27));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 96 + i * stride);
			src = src.and(MASK29);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 56));
			tmp.intoArray(output, 160 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 224 + i * stride);
			src = src.and(MASK29);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 21));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 352 + i * stride);
			src = src.and(MASK29);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 50));
			tmp.intoArray(output, 176 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 480 + i * stride);
			src = src.and(MASK29);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 15));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 608 + i * stride);
			src = src.and(MASK29);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 44));
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 736 + i * stride);
			src = src.and(MASK29);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 9));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 864 + i * stride);
			src = src.and(MASK29);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 38));
			tmp.intoArray(output, 208 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 26);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 992 + i * stride);
			src = src.and(MASK29);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 3));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 16 + i * stride);
			src = src.and(MASK29);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 144 + i * stride);
			src = src.and(MASK29);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 61));
			tmp.intoArray(output, 224 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 3);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 272 + i * stride);
			src = src.and(MASK29);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 26));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 400 + i * stride);
			src = src.and(MASK29);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 55));
			tmp.intoArray(output, 240 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 9);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 528 + i * stride);
			src = src.and(MASK29);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 20));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 656 + i * stride);
			src = src.and(MASK29);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 49));
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 15);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 784 + i * stride);
			src = src.and(MASK29);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 14));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 912 + i * stride);
			src = src.and(MASK29);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 43));
			tmp.intoArray(output, 272 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 21);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 80 + i * stride);
			src = src.and(MASK29);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 208 + i * stride);
			src = src.and(MASK29);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 37));
			tmp.intoArray(output, 288 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 27);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 336 + i * stride);
			src = src.and(MASK29);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 2));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 464 + i * stride);
			src = src.and(MASK29);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 31));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 592 + i * stride);
			src = src.and(MASK29);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 60));
			tmp.intoArray(output, 304 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 720 + i * stride);
			src = src.and(MASK29);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 25));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 848 + i * stride);
			src = src.and(MASK29);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 54));
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 976 + i * stride);
			src = src.and(MASK29);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 19));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 48 + i * stride);
			src = src.and(MASK29);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 48));
			tmp.intoArray(output, 336 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 176 + i * stride);
			src = src.and(MASK29);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 13));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 304 + i * stride);
			src = src.and(MASK29);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 42));
			tmp.intoArray(output, 352 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 22);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 432 + i * stride);
			src = src.and(MASK29);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 7));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 560 + i * stride);
			src = src.and(MASK29);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 36));
			tmp.intoArray(output, 368 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 688 + i * stride);
			src = src.and(MASK29);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 1));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 816 + i * stride);
			src = src.and(MASK29);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 30));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 944 + i * stride);
			src = src.and(MASK29);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 59));
			tmp.intoArray(output, 384 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 5);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 112 + i * stride);
			src = src.and(MASK29);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 240 + i * stride);
			src = src.and(MASK29);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 53));
			tmp.intoArray(output, 400 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 11);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 368 + i * stride);
			src = src.and(MASK29);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 18));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 496 + i * stride);
			src = src.and(MASK29);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 47));
			tmp.intoArray(output, 416 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 17);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 624 + i * stride);
			src = src.and(MASK29);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 12));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 752 + i * stride);
			src = src.and(MASK29);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 41));
			tmp.intoArray(output, 432 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 23);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 880 + i * stride);
			src = src.and(MASK29);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 6));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 1008 + i * stride);
			src = src.and(MASK29);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 35));
			tmp.intoArray(output, 448 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 29);
		}
	}

	public static void pack30(long[] input, long[] output) {
		int stride = LongVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 64;
		for (int i = 0; i < 16 / stride; i++) {
			LongVector src;
			LongVector tmp;
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 0 + i * stride);
			src = src.and(MASK30);
			tmp = src;
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 128 + i * stride);
			src = src.and(MASK30);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 30));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 256 + i * stride);
			src = src.and(MASK30);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 60));
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 384 + i * stride);
			src = src.and(MASK30);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 26));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 512 + i * stride);
			src = src.and(MASK30);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 56));
			tmp.intoArray(output, 16 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 640 + i * stride);
			src = src.and(MASK30);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 22));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 768 + i * stride);
			src = src.and(MASK30);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 52));
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 896 + i * stride);
			src = src.and(MASK30);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 18));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 64 + i * stride);
			src = src.and(MASK30);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 48));
			tmp.intoArray(output, 48 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 192 + i * stride);
			src = src.and(MASK30);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 14));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 320 + i * stride);
			src = src.and(MASK30);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 44));
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 448 + i * stride);
			src = src.and(MASK30);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 10));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 576 + i * stride);
			src = src.and(MASK30);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 40));
			tmp.intoArray(output, 80 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 704 + i * stride);
			src = src.and(MASK30);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 6));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 832 + i * stride);
			src = src.and(MASK30);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 36));
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 960 + i * stride);
			src = src.and(MASK30);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 2));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 32 + i * stride);
			src = src.and(MASK30);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 160 + i * stride);
			src = src.and(MASK30);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 62));
			tmp.intoArray(output, 112 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 288 + i * stride);
			src = src.and(MASK30);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 28));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 416 + i * stride);
			src = src.and(MASK30);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 58));
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 544 + i * stride);
			src = src.and(MASK30);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 672 + i * stride);
			src = src.and(MASK30);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 54));
			tmp.intoArray(output, 144 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 800 + i * stride);
			src = src.and(MASK30);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 20));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 928 + i * stride);
			src = src.and(MASK30);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 50));
			tmp.intoArray(output, 160 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 96 + i * stride);
			src = src.and(MASK30);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 224 + i * stride);
			src = src.and(MASK30);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 46));
			tmp.intoArray(output, 176 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 18);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 352 + i * stride);
			src = src.and(MASK30);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 12));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 480 + i * stride);
			src = src.and(MASK30);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 42));
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 22);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 608 + i * stride);
			src = src.and(MASK30);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 736 + i * stride);
			src = src.and(MASK30);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 38));
			tmp.intoArray(output, 208 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 26);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 864 + i * stride);
			src = src.and(MASK30);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 4));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 992 + i * stride);
			src = src.and(MASK30);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 34));
			tmp.intoArray(output, 224 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 30);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 16 + i * stride);
			src = src.and(MASK30);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 144 + i * stride);
			src = src.and(MASK30);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 30));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 272 + i * stride);
			src = src.and(MASK30);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 60));
			tmp.intoArray(output, 240 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 400 + i * stride);
			src = src.and(MASK30);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 26));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 528 + i * stride);
			src = src.and(MASK30);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 56));
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 656 + i * stride);
			src = src.and(MASK30);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 22));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 784 + i * stride);
			src = src.and(MASK30);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 52));
			tmp.intoArray(output, 272 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 912 + i * stride);
			src = src.and(MASK30);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 18));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 80 + i * stride);
			src = src.and(MASK30);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 48));
			tmp.intoArray(output, 288 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 208 + i * stride);
			src = src.and(MASK30);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 14));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 336 + i * stride);
			src = src.and(MASK30);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 44));
			tmp.intoArray(output, 304 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 464 + i * stride);
			src = src.and(MASK30);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 10));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 592 + i * stride);
			src = src.and(MASK30);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 40));
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 720 + i * stride);
			src = src.and(MASK30);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 6));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 848 + i * stride);
			src = src.and(MASK30);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 36));
			tmp.intoArray(output, 336 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 976 + i * stride);
			src = src.and(MASK30);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 2));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 48 + i * stride);
			src = src.and(MASK30);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 176 + i * stride);
			src = src.and(MASK30);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 62));
			tmp.intoArray(output, 352 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 304 + i * stride);
			src = src.and(MASK30);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 28));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 432 + i * stride);
			src = src.and(MASK30);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 58));
			tmp.intoArray(output, 368 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 560 + i * stride);
			src = src.and(MASK30);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 688 + i * stride);
			src = src.and(MASK30);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 54));
			tmp.intoArray(output, 384 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 816 + i * stride);
			src = src.and(MASK30);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 20));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 944 + i * stride);
			src = src.and(MASK30);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 50));
			tmp.intoArray(output, 400 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 112 + i * stride);
			src = src.and(MASK30);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 240 + i * stride);
			src = src.and(MASK30);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 46));
			tmp.intoArray(output, 416 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 18);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 368 + i * stride);
			src = src.and(MASK30);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 12));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 496 + i * stride);
			src = src.and(MASK30);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 42));
			tmp.intoArray(output, 432 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 22);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 624 + i * stride);
			src = src.and(MASK30);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 752 + i * stride);
			src = src.and(MASK30);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 38));
			tmp.intoArray(output, 448 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 26);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 880 + i * stride);
			src = src.and(MASK30);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 4));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 1008 + i * stride);
			src = src.and(MASK30);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 34));
			tmp.intoArray(output, 464 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 30);
		}
	}

	public static void pack31(long[] input, long[] output) {
		int stride = LongVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 64;
		for (int i = 0; i < 16 / stride; i++) {
			LongVector src;
			LongVector tmp;
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 0 + i * stride);
			src = src.and(MASK31);
			tmp = src;
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 128 + i * stride);
			src = src.and(MASK31);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 31));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 256 + i * stride);
			src = src.and(MASK31);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 62));
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 384 + i * stride);
			src = src.and(MASK31);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 29));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 512 + i * stride);
			src = src.and(MASK31);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 60));
			tmp.intoArray(output, 16 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 640 + i * stride);
			src = src.and(MASK31);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 27));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 768 + i * stride);
			src = src.and(MASK31);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 58));
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 896 + i * stride);
			src = src.and(MASK31);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 25));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 64 + i * stride);
			src = src.and(MASK31);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 56));
			tmp.intoArray(output, 48 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 192 + i * stride);
			src = src.and(MASK31);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 23));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 320 + i * stride);
			src = src.and(MASK31);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 54));
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 448 + i * stride);
			src = src.and(MASK31);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 21));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 576 + i * stride);
			src = src.and(MASK31);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 52));
			tmp.intoArray(output, 80 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 704 + i * stride);
			src = src.and(MASK31);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 19));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 832 + i * stride);
			src = src.and(MASK31);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 50));
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 960 + i * stride);
			src = src.and(MASK31);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 17));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 32 + i * stride);
			src = src.and(MASK31);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 48));
			tmp.intoArray(output, 112 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 160 + i * stride);
			src = src.and(MASK31);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 15));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 288 + i * stride);
			src = src.and(MASK31);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 46));
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 18);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 416 + i * stride);
			src = src.and(MASK31);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 13));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 544 + i * stride);
			src = src.and(MASK31);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 44));
			tmp.intoArray(output, 144 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 672 + i * stride);
			src = src.and(MASK31);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 11));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 800 + i * stride);
			src = src.and(MASK31);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 42));
			tmp.intoArray(output, 160 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 22);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 928 + i * stride);
			src = src.and(MASK31);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 9));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 96 + i * stride);
			src = src.and(MASK31);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 40));
			tmp.intoArray(output, 176 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 224 + i * stride);
			src = src.and(MASK31);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 7));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 352 + i * stride);
			src = src.and(MASK31);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 38));
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 26);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 480 + i * stride);
			src = src.and(MASK31);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 5));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 608 + i * stride);
			src = src.and(MASK31);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 36));
			tmp.intoArray(output, 208 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 736 + i * stride);
			src = src.and(MASK31);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 3));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 864 + i * stride);
			src = src.and(MASK31);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 34));
			tmp.intoArray(output, 224 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 30);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 992 + i * stride);
			src = src.and(MASK31);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 1));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 16 + i * stride);
			src = src.and(MASK31);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 144 + i * stride);
			src = src.and(MASK31);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 63));
			tmp.intoArray(output, 240 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 1);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 272 + i * stride);
			src = src.and(MASK31);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 30));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 400 + i * stride);
			src = src.and(MASK31);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 61));
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 3);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 528 + i * stride);
			src = src.and(MASK31);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 28));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 656 + i * stride);
			src = src.and(MASK31);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 59));
			tmp.intoArray(output, 272 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 5);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 784 + i * stride);
			src = src.and(MASK31);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 26));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 912 + i * stride);
			src = src.and(MASK31);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 57));
			tmp.intoArray(output, 288 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 7);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 80 + i * stride);
			src = src.and(MASK31);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 208 + i * stride);
			src = src.and(MASK31);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 55));
			tmp.intoArray(output, 304 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 9);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 336 + i * stride);
			src = src.and(MASK31);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 22));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 464 + i * stride);
			src = src.and(MASK31);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 53));
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 11);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 592 + i * stride);
			src = src.and(MASK31);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 20));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 720 + i * stride);
			src = src.and(MASK31);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 51));
			tmp.intoArray(output, 336 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 13);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 848 + i * stride);
			src = src.and(MASK31);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 18));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 976 + i * stride);
			src = src.and(MASK31);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 49));
			tmp.intoArray(output, 352 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 15);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 48 + i * stride);
			src = src.and(MASK31);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 176 + i * stride);
			src = src.and(MASK31);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 47));
			tmp.intoArray(output, 368 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 17);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 304 + i * stride);
			src = src.and(MASK31);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 14));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 432 + i * stride);
			src = src.and(MASK31);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 45));
			tmp.intoArray(output, 384 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 19);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 560 + i * stride);
			src = src.and(MASK31);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 12));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 688 + i * stride);
			src = src.and(MASK31);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 43));
			tmp.intoArray(output, 400 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 21);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 816 + i * stride);
			src = src.and(MASK31);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 10));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 944 + i * stride);
			src = src.and(MASK31);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 41));
			tmp.intoArray(output, 416 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 23);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 112 + i * stride);
			src = src.and(MASK31);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 240 + i * stride);
			src = src.and(MASK31);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 39));
			tmp.intoArray(output, 432 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 25);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 368 + i * stride);
			src = src.and(MASK31);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 6));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 496 + i * stride);
			src = src.and(MASK31);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 37));
			tmp.intoArray(output, 448 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 27);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 624 + i * stride);
			src = src.and(MASK31);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 4));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 752 + i * stride);
			src = src.and(MASK31);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 35));
			tmp.intoArray(output, 464 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 29);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 880 + i * stride);
			src = src.and(MASK31);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 2));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 1008 + i * stride);
			src = src.and(MASK31);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 33));
			tmp.intoArray(output, 480 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 31);
		}
	}

	public static void pack32(long[] input, long[] output) {
		int stride = LongVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 64;
		for (int i = 0; i < 16 / stride; i++) {
			LongVector src;
			LongVector tmp;
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 0 + i * stride);
			src = src.and(MASK32);
			tmp = src;
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 128 + i * stride);
			src = src.and(MASK32);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 256 + i * stride);
			src = src.and(MASK32);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 384 + i * stride);
			src = src.and(MASK32);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 16 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 512 + i * stride);
			src = src.and(MASK32);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 640 + i * stride);
			src = src.and(MASK32);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 768 + i * stride);
			src = src.and(MASK32);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 896 + i * stride);
			src = src.and(MASK32);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 48 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 64 + i * stride);
			src = src.and(MASK32);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 192 + i * stride);
			src = src.and(MASK32);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 320 + i * stride);
			src = src.and(MASK32);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 448 + i * stride);
			src = src.and(MASK32);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 80 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 576 + i * stride);
			src = src.and(MASK32);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 704 + i * stride);
			src = src.and(MASK32);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 832 + i * stride);
			src = src.and(MASK32);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 960 + i * stride);
			src = src.and(MASK32);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 112 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 32 + i * stride);
			src = src.and(MASK32);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 160 + i * stride);
			src = src.and(MASK32);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 288 + i * stride);
			src = src.and(MASK32);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 416 + i * stride);
			src = src.and(MASK32);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 144 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 544 + i * stride);
			src = src.and(MASK32);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 672 + i * stride);
			src = src.and(MASK32);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 160 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 800 + i * stride);
			src = src.and(MASK32);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 928 + i * stride);
			src = src.and(MASK32);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 176 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 96 + i * stride);
			src = src.and(MASK32);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 224 + i * stride);
			src = src.and(MASK32);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 352 + i * stride);
			src = src.and(MASK32);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 480 + i * stride);
			src = src.and(MASK32);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 208 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 608 + i * stride);
			src = src.and(MASK32);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 736 + i * stride);
			src = src.and(MASK32);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 224 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 864 + i * stride);
			src = src.and(MASK32);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 992 + i * stride);
			src = src.and(MASK32);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 240 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 16 + i * stride);
			src = src.and(MASK32);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 144 + i * stride);
			src = src.and(MASK32);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 272 + i * stride);
			src = src.and(MASK32);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 400 + i * stride);
			src = src.and(MASK32);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 272 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 528 + i * stride);
			src = src.and(MASK32);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 656 + i * stride);
			src = src.and(MASK32);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 288 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 784 + i * stride);
			src = src.and(MASK32);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 912 + i * stride);
			src = src.and(MASK32);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 304 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 80 + i * stride);
			src = src.and(MASK32);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 208 + i * stride);
			src = src.and(MASK32);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 336 + i * stride);
			src = src.and(MASK32);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 464 + i * stride);
			src = src.and(MASK32);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 336 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 592 + i * stride);
			src = src.and(MASK32);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 720 + i * stride);
			src = src.and(MASK32);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 352 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 848 + i * stride);
			src = src.and(MASK32);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 976 + i * stride);
			src = src.and(MASK32);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 368 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 48 + i * stride);
			src = src.and(MASK32);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 176 + i * stride);
			src = src.and(MASK32);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 384 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 304 + i * stride);
			src = src.and(MASK32);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 432 + i * stride);
			src = src.and(MASK32);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 400 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 560 + i * stride);
			src = src.and(MASK32);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 688 + i * stride);
			src = src.and(MASK32);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 416 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 816 + i * stride);
			src = src.and(MASK32);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 944 + i * stride);
			src = src.and(MASK32);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 432 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 112 + i * stride);
			src = src.and(MASK32);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 240 + i * stride);
			src = src.and(MASK32);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 448 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 368 + i * stride);
			src = src.and(MASK32);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 496 + i * stride);
			src = src.and(MASK32);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 464 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 624 + i * stride);
			src = src.and(MASK32);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 752 + i * stride);
			src = src.and(MASK32);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 480 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 880 + i * stride);
			src = src.and(MASK32);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 1008 + i * stride);
			src = src.and(MASK32);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 496 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32);
		}
	}

	public static void pack33(long[] input, long[] output) {
		int stride = LongVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 64;
		for (int i = 0; i < 16 / stride; i++) {
			LongVector src;
			LongVector tmp;
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 0 + i * stride);
			src = src.and(MASK33);
			tmp = src;
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 128 + i * stride);
			src = src.and(MASK33);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 33));
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 31);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 256 + i * stride);
			src = src.and(MASK33);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 2));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 384 + i * stride);
			src = src.and(MASK33);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 35));
			tmp.intoArray(output, 16 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 29);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 512 + i * stride);
			src = src.and(MASK33);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 4));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 640 + i * stride);
			src = src.and(MASK33);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 37));
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 27);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 768 + i * stride);
			src = src.and(MASK33);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 6));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 896 + i * stride);
			src = src.and(MASK33);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 39));
			tmp.intoArray(output, 48 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 25);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 64 + i * stride);
			src = src.and(MASK33);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 192 + i * stride);
			src = src.and(MASK33);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 41));
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 23);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 320 + i * stride);
			src = src.and(MASK33);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 10));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 448 + i * stride);
			src = src.and(MASK33);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 43));
			tmp.intoArray(output, 80 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 21);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 576 + i * stride);
			src = src.and(MASK33);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 12));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 704 + i * stride);
			src = src.and(MASK33);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 45));
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 19);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 832 + i * stride);
			src = src.and(MASK33);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 14));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 960 + i * stride);
			src = src.and(MASK33);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 47));
			tmp.intoArray(output, 112 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 17);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 32 + i * stride);
			src = src.and(MASK33);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 160 + i * stride);
			src = src.and(MASK33);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 49));
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 15);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 288 + i * stride);
			src = src.and(MASK33);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 18));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 416 + i * stride);
			src = src.and(MASK33);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 51));
			tmp.intoArray(output, 144 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 13);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 544 + i * stride);
			src = src.and(MASK33);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 20));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 672 + i * stride);
			src = src.and(MASK33);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 53));
			tmp.intoArray(output, 160 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 11);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 800 + i * stride);
			src = src.and(MASK33);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 22));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 928 + i * stride);
			src = src.and(MASK33);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 55));
			tmp.intoArray(output, 176 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 9);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 96 + i * stride);
			src = src.and(MASK33);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 224 + i * stride);
			src = src.and(MASK33);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 57));
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 7);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 352 + i * stride);
			src = src.and(MASK33);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 26));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 480 + i * stride);
			src = src.and(MASK33);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 59));
			tmp.intoArray(output, 208 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 5);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 608 + i * stride);
			src = src.and(MASK33);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 28));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 736 + i * stride);
			src = src.and(MASK33);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 61));
			tmp.intoArray(output, 224 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 3);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 864 + i * stride);
			src = src.and(MASK33);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 30));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 992 + i * stride);
			src = src.and(MASK33);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 63));
			tmp.intoArray(output, 240 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 1);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 16 + i * stride);
			src = src.and(MASK33);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 144 + i * stride);
			src = src.and(MASK33);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 1));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 272 + i * stride);
			src = src.and(MASK33);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 34));
			tmp.intoArray(output, 272 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 30);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 400 + i * stride);
			src = src.and(MASK33);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 3));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 528 + i * stride);
			src = src.and(MASK33);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 36));
			tmp.intoArray(output, 288 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 656 + i * stride);
			src = src.and(MASK33);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 5));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 784 + i * stride);
			src = src.and(MASK33);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 38));
			tmp.intoArray(output, 304 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 26);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 912 + i * stride);
			src = src.and(MASK33);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 7));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 80 + i * stride);
			src = src.and(MASK33);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 40));
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 208 + i * stride);
			src = src.and(MASK33);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 9));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 336 + i * stride);
			src = src.and(MASK33);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 42));
			tmp.intoArray(output, 336 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 22);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 464 + i * stride);
			src = src.and(MASK33);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 11));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 592 + i * stride);
			src = src.and(MASK33);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 44));
			tmp.intoArray(output, 352 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 720 + i * stride);
			src = src.and(MASK33);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 13));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 848 + i * stride);
			src = src.and(MASK33);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 46));
			tmp.intoArray(output, 368 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 18);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 976 + i * stride);
			src = src.and(MASK33);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 15));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 48 + i * stride);
			src = src.and(MASK33);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 48));
			tmp.intoArray(output, 384 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 176 + i * stride);
			src = src.and(MASK33);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 17));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 304 + i * stride);
			src = src.and(MASK33);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 50));
			tmp.intoArray(output, 400 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 432 + i * stride);
			src = src.and(MASK33);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 19));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 560 + i * stride);
			src = src.and(MASK33);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 52));
			tmp.intoArray(output, 416 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 688 + i * stride);
			src = src.and(MASK33);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 21));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 816 + i * stride);
			src = src.and(MASK33);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 54));
			tmp.intoArray(output, 432 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 944 + i * stride);
			src = src.and(MASK33);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 23));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 112 + i * stride);
			src = src.and(MASK33);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 56));
			tmp.intoArray(output, 448 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 240 + i * stride);
			src = src.and(MASK33);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 25));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 368 + i * stride);
			src = src.and(MASK33);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 58));
			tmp.intoArray(output, 464 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 496 + i * stride);
			src = src.and(MASK33);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 27));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 624 + i * stride);
			src = src.and(MASK33);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 60));
			tmp.intoArray(output, 480 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 752 + i * stride);
			src = src.and(MASK33);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 29));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 880 + i * stride);
			src = src.and(MASK33);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 62));
			tmp.intoArray(output, 496 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 1008 + i * stride);
			src = src.and(MASK33);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 31));
			tmp.intoArray(output, 512 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 33);
		}
	}

	public static void pack34(long[] input, long[] output) {
		int stride = LongVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 64;
		for (int i = 0; i < 16 / stride; i++) {
			LongVector src;
			LongVector tmp;
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 0 + i * stride);
			src = src.and(MASK34);
			tmp = src;
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 128 + i * stride);
			src = src.and(MASK34);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 34));
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 30);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 256 + i * stride);
			src = src.and(MASK34);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 4));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 384 + i * stride);
			src = src.and(MASK34);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 38));
			tmp.intoArray(output, 16 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 26);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 512 + i * stride);
			src = src.and(MASK34);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 640 + i * stride);
			src = src.and(MASK34);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 42));
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 22);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 768 + i * stride);
			src = src.and(MASK34);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 12));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 896 + i * stride);
			src = src.and(MASK34);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 46));
			tmp.intoArray(output, 48 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 18);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 64 + i * stride);
			src = src.and(MASK34);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 192 + i * stride);
			src = src.and(MASK34);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 50));
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 320 + i * stride);
			src = src.and(MASK34);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 20));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 448 + i * stride);
			src = src.and(MASK34);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 54));
			tmp.intoArray(output, 80 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 576 + i * stride);
			src = src.and(MASK34);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 704 + i * stride);
			src = src.and(MASK34);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 58));
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 832 + i * stride);
			src = src.and(MASK34);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 28));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 960 + i * stride);
			src = src.and(MASK34);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 62));
			tmp.intoArray(output, 112 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 32 + i * stride);
			src = src.and(MASK34);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 160 + i * stride);
			src = src.and(MASK34);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 2));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 288 + i * stride);
			src = src.and(MASK34);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 36));
			tmp.intoArray(output, 144 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 416 + i * stride);
			src = src.and(MASK34);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 6));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 544 + i * stride);
			src = src.and(MASK34);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 40));
			tmp.intoArray(output, 160 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 672 + i * stride);
			src = src.and(MASK34);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 10));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 800 + i * stride);
			src = src.and(MASK34);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 44));
			tmp.intoArray(output, 176 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 928 + i * stride);
			src = src.and(MASK34);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 14));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 96 + i * stride);
			src = src.and(MASK34);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 48));
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 224 + i * stride);
			src = src.and(MASK34);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 18));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 352 + i * stride);
			src = src.and(MASK34);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 52));
			tmp.intoArray(output, 208 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 480 + i * stride);
			src = src.and(MASK34);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 22));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 608 + i * stride);
			src = src.and(MASK34);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 56));
			tmp.intoArray(output, 224 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 736 + i * stride);
			src = src.and(MASK34);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 26));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 864 + i * stride);
			src = src.and(MASK34);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 60));
			tmp.intoArray(output, 240 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 992 + i * stride);
			src = src.and(MASK34);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 30));
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 34);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 16 + i * stride);
			src = src.and(MASK34);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 144 + i * stride);
			src = src.and(MASK34);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 34));
			tmp.intoArray(output, 272 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 30);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 272 + i * stride);
			src = src.and(MASK34);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 4));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 400 + i * stride);
			src = src.and(MASK34);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 38));
			tmp.intoArray(output, 288 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 26);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 528 + i * stride);
			src = src.and(MASK34);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 656 + i * stride);
			src = src.and(MASK34);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 42));
			tmp.intoArray(output, 304 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 22);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 784 + i * stride);
			src = src.and(MASK34);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 12));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 912 + i * stride);
			src = src.and(MASK34);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 46));
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 18);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 80 + i * stride);
			src = src.and(MASK34);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 208 + i * stride);
			src = src.and(MASK34);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 50));
			tmp.intoArray(output, 336 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 336 + i * stride);
			src = src.and(MASK34);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 20));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 464 + i * stride);
			src = src.and(MASK34);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 54));
			tmp.intoArray(output, 352 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 592 + i * stride);
			src = src.and(MASK34);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 720 + i * stride);
			src = src.and(MASK34);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 58));
			tmp.intoArray(output, 368 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 848 + i * stride);
			src = src.and(MASK34);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 28));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 976 + i * stride);
			src = src.and(MASK34);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 62));
			tmp.intoArray(output, 384 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 48 + i * stride);
			src = src.and(MASK34);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 400 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 176 + i * stride);
			src = src.and(MASK34);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 2));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 304 + i * stride);
			src = src.and(MASK34);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 36));
			tmp.intoArray(output, 416 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 432 + i * stride);
			src = src.and(MASK34);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 6));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 560 + i * stride);
			src = src.and(MASK34);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 40));
			tmp.intoArray(output, 432 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 688 + i * stride);
			src = src.and(MASK34);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 10));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 816 + i * stride);
			src = src.and(MASK34);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 44));
			tmp.intoArray(output, 448 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 944 + i * stride);
			src = src.and(MASK34);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 14));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 112 + i * stride);
			src = src.and(MASK34);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 48));
			tmp.intoArray(output, 464 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 240 + i * stride);
			src = src.and(MASK34);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 18));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 368 + i * stride);
			src = src.and(MASK34);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 52));
			tmp.intoArray(output, 480 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 496 + i * stride);
			src = src.and(MASK34);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 22));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 624 + i * stride);
			src = src.and(MASK34);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 56));
			tmp.intoArray(output, 496 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 752 + i * stride);
			src = src.and(MASK34);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 26));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 880 + i * stride);
			src = src.and(MASK34);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 60));
			tmp.intoArray(output, 512 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 1008 + i * stride);
			src = src.and(MASK34);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 30));
			tmp.intoArray(output, 528 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 34);
		}
	}

	public static void pack35(long[] input, long[] output) {
		int stride = LongVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 64;
		for (int i = 0; i < 16 / stride; i++) {
			LongVector src;
			LongVector tmp;
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 0 + i * stride);
			src = src.and(MASK35);
			tmp = src;
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 128 + i * stride);
			src = src.and(MASK35);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 35));
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 29);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 256 + i * stride);
			src = src.and(MASK35);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 6));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 384 + i * stride);
			src = src.and(MASK35);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 41));
			tmp.intoArray(output, 16 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 23);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 512 + i * stride);
			src = src.and(MASK35);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 12));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 640 + i * stride);
			src = src.and(MASK35);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 47));
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 17);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 768 + i * stride);
			src = src.and(MASK35);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 18));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 896 + i * stride);
			src = src.and(MASK35);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 53));
			tmp.intoArray(output, 48 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 11);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 64 + i * stride);
			src = src.and(MASK35);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 192 + i * stride);
			src = src.and(MASK35);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 59));
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 5);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 320 + i * stride);
			src = src.and(MASK35);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 30));
			tmp.intoArray(output, 80 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 34);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 448 + i * stride);
			src = src.and(MASK35);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 1));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 576 + i * stride);
			src = src.and(MASK35);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 36));
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 704 + i * stride);
			src = src.and(MASK35);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 7));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 832 + i * stride);
			src = src.and(MASK35);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 42));
			tmp.intoArray(output, 112 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 22);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 960 + i * stride);
			src = src.and(MASK35);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 13));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 32 + i * stride);
			src = src.and(MASK35);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 48));
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 160 + i * stride);
			src = src.and(MASK35);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 19));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 288 + i * stride);
			src = src.and(MASK35);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 54));
			tmp.intoArray(output, 144 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 416 + i * stride);
			src = src.and(MASK35);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 25));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 544 + i * stride);
			src = src.and(MASK35);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 60));
			tmp.intoArray(output, 160 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 672 + i * stride);
			src = src.and(MASK35);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 31));
			tmp.intoArray(output, 176 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 33);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 800 + i * stride);
			src = src.and(MASK35);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 2));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 928 + i * stride);
			src = src.and(MASK35);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 37));
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 27);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 96 + i * stride);
			src = src.and(MASK35);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 224 + i * stride);
			src = src.and(MASK35);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 43));
			tmp.intoArray(output, 208 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 21);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 352 + i * stride);
			src = src.and(MASK35);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 14));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 480 + i * stride);
			src = src.and(MASK35);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 49));
			tmp.intoArray(output, 224 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 15);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 608 + i * stride);
			src = src.and(MASK35);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 20));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 736 + i * stride);
			src = src.and(MASK35);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 55));
			tmp.intoArray(output, 240 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 9);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 864 + i * stride);
			src = src.and(MASK35);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 26));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 992 + i * stride);
			src = src.and(MASK35);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 61));
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 3);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 16 + i * stride);
			src = src.and(MASK35);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 272 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 144 + i * stride);
			src = src.and(MASK35);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 3));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 272 + i * stride);
			src = src.and(MASK35);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 38));
			tmp.intoArray(output, 288 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 26);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 400 + i * stride);
			src = src.and(MASK35);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 9));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 528 + i * stride);
			src = src.and(MASK35);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 44));
			tmp.intoArray(output, 304 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 656 + i * stride);
			src = src.and(MASK35);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 15));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 784 + i * stride);
			src = src.and(MASK35);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 50));
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 912 + i * stride);
			src = src.and(MASK35);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 21));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 80 + i * stride);
			src = src.and(MASK35);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 56));
			tmp.intoArray(output, 336 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 208 + i * stride);
			src = src.and(MASK35);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 27));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 336 + i * stride);
			src = src.and(MASK35);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 62));
			tmp.intoArray(output, 352 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 464 + i * stride);
			src = src.and(MASK35);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 33));
			tmp.intoArray(output, 368 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 31);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 592 + i * stride);
			src = src.and(MASK35);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 4));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 720 + i * stride);
			src = src.and(MASK35);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 39));
			tmp.intoArray(output, 384 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 25);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 848 + i * stride);
			src = src.and(MASK35);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 10));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 976 + i * stride);
			src = src.and(MASK35);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 45));
			tmp.intoArray(output, 400 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 19);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 48 + i * stride);
			src = src.and(MASK35);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 176 + i * stride);
			src = src.and(MASK35);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 51));
			tmp.intoArray(output, 416 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 13);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 304 + i * stride);
			src = src.and(MASK35);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 22));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 432 + i * stride);
			src = src.and(MASK35);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 57));
			tmp.intoArray(output, 432 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 7);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 560 + i * stride);
			src = src.and(MASK35);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 28));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 688 + i * stride);
			src = src.and(MASK35);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 63));
			tmp.intoArray(output, 448 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 1);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 816 + i * stride);
			src = src.and(MASK35);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 34));
			tmp.intoArray(output, 464 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 30);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 944 + i * stride);
			src = src.and(MASK35);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 5));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 112 + i * stride);
			src = src.and(MASK35);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 40));
			tmp.intoArray(output, 480 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 240 + i * stride);
			src = src.and(MASK35);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 11));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 368 + i * stride);
			src = src.and(MASK35);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 46));
			tmp.intoArray(output, 496 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 18);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 496 + i * stride);
			src = src.and(MASK35);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 17));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 624 + i * stride);
			src = src.and(MASK35);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 52));
			tmp.intoArray(output, 512 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 752 + i * stride);
			src = src.and(MASK35);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 23));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 880 + i * stride);
			src = src.and(MASK35);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 58));
			tmp.intoArray(output, 528 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 1008 + i * stride);
			src = src.and(MASK35);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 29));
			tmp.intoArray(output, 544 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 35);
		}
	}

	public static void pack36(long[] input, long[] output) {
		int stride = LongVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 64;
		for (int i = 0; i < 16 / stride; i++) {
			LongVector src;
			LongVector tmp;
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 0 + i * stride);
			src = src.and(MASK36);
			tmp = src;
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 128 + i * stride);
			src = src.and(MASK36);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 36));
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 256 + i * stride);
			src = src.and(MASK36);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 384 + i * stride);
			src = src.and(MASK36);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 44));
			tmp.intoArray(output, 16 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 512 + i * stride);
			src = src.and(MASK36);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 640 + i * stride);
			src = src.and(MASK36);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 52));
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 768 + i * stride);
			src = src.and(MASK36);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 896 + i * stride);
			src = src.and(MASK36);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 60));
			tmp.intoArray(output, 48 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 64 + i * stride);
			src = src.and(MASK36);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 192 + i * stride);
			src = src.and(MASK36);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 4));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 320 + i * stride);
			src = src.and(MASK36);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 40));
			tmp.intoArray(output, 80 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 448 + i * stride);
			src = src.and(MASK36);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 12));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 576 + i * stride);
			src = src.and(MASK36);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 48));
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 704 + i * stride);
			src = src.and(MASK36);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 20));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 832 + i * stride);
			src = src.and(MASK36);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 56));
			tmp.intoArray(output, 112 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 960 + i * stride);
			src = src.and(MASK36);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 28));
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 36);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 32 + i * stride);
			src = src.and(MASK36);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 160 + i * stride);
			src = src.and(MASK36);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 36));
			tmp.intoArray(output, 144 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 288 + i * stride);
			src = src.and(MASK36);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 416 + i * stride);
			src = src.and(MASK36);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 44));
			tmp.intoArray(output, 160 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 544 + i * stride);
			src = src.and(MASK36);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 672 + i * stride);
			src = src.and(MASK36);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 52));
			tmp.intoArray(output, 176 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 800 + i * stride);
			src = src.and(MASK36);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 928 + i * stride);
			src = src.and(MASK36);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 60));
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 96 + i * stride);
			src = src.and(MASK36);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 208 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 224 + i * stride);
			src = src.and(MASK36);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 4));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 352 + i * stride);
			src = src.and(MASK36);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 40));
			tmp.intoArray(output, 224 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 480 + i * stride);
			src = src.and(MASK36);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 12));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 608 + i * stride);
			src = src.and(MASK36);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 48));
			tmp.intoArray(output, 240 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 736 + i * stride);
			src = src.and(MASK36);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 20));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 864 + i * stride);
			src = src.and(MASK36);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 56));
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 992 + i * stride);
			src = src.and(MASK36);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 28));
			tmp.intoArray(output, 272 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 36);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 16 + i * stride);
			src = src.and(MASK36);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 144 + i * stride);
			src = src.and(MASK36);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 36));
			tmp.intoArray(output, 288 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 272 + i * stride);
			src = src.and(MASK36);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 400 + i * stride);
			src = src.and(MASK36);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 44));
			tmp.intoArray(output, 304 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 528 + i * stride);
			src = src.and(MASK36);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 656 + i * stride);
			src = src.and(MASK36);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 52));
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 784 + i * stride);
			src = src.and(MASK36);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 912 + i * stride);
			src = src.and(MASK36);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 60));
			tmp.intoArray(output, 336 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 80 + i * stride);
			src = src.and(MASK36);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 352 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 208 + i * stride);
			src = src.and(MASK36);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 4));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 336 + i * stride);
			src = src.and(MASK36);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 40));
			tmp.intoArray(output, 368 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 464 + i * stride);
			src = src.and(MASK36);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 12));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 592 + i * stride);
			src = src.and(MASK36);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 48));
			tmp.intoArray(output, 384 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 720 + i * stride);
			src = src.and(MASK36);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 20));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 848 + i * stride);
			src = src.and(MASK36);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 56));
			tmp.intoArray(output, 400 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 976 + i * stride);
			src = src.and(MASK36);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 28));
			tmp.intoArray(output, 416 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 36);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 48 + i * stride);
			src = src.and(MASK36);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 176 + i * stride);
			src = src.and(MASK36);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 36));
			tmp.intoArray(output, 432 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 304 + i * stride);
			src = src.and(MASK36);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 432 + i * stride);
			src = src.and(MASK36);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 44));
			tmp.intoArray(output, 448 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 560 + i * stride);
			src = src.and(MASK36);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 688 + i * stride);
			src = src.and(MASK36);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 52));
			tmp.intoArray(output, 464 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 816 + i * stride);
			src = src.and(MASK36);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 944 + i * stride);
			src = src.and(MASK36);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 60));
			tmp.intoArray(output, 480 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 112 + i * stride);
			src = src.and(MASK36);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 496 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 240 + i * stride);
			src = src.and(MASK36);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 4));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 368 + i * stride);
			src = src.and(MASK36);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 40));
			tmp.intoArray(output, 512 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 496 + i * stride);
			src = src.and(MASK36);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 12));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 624 + i * stride);
			src = src.and(MASK36);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 48));
			tmp.intoArray(output, 528 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 752 + i * stride);
			src = src.and(MASK36);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 20));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 880 + i * stride);
			src = src.and(MASK36);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 56));
			tmp.intoArray(output, 544 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 1008 + i * stride);
			src = src.and(MASK36);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 28));
			tmp.intoArray(output, 560 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 36);
		}
	}

	public static void pack37(long[] input, long[] output) {
		int stride = LongVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 64;
		for (int i = 0; i < 16 / stride; i++) {
			LongVector src;
			LongVector tmp;
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 0 + i * stride);
			src = src.and(MASK37);
			tmp = src;
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 128 + i * stride);
			src = src.and(MASK37);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 37));
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 27);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 256 + i * stride);
			src = src.and(MASK37);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 10));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 384 + i * stride);
			src = src.and(MASK37);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 47));
			tmp.intoArray(output, 16 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 17);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 512 + i * stride);
			src = src.and(MASK37);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 20));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 640 + i * stride);
			src = src.and(MASK37);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 57));
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 7);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 768 + i * stride);
			src = src.and(MASK37);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 30));
			tmp.intoArray(output, 48 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 34);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 896 + i * stride);
			src = src.and(MASK37);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 3));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 64 + i * stride);
			src = src.and(MASK37);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 40));
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 192 + i * stride);
			src = src.and(MASK37);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 13));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 320 + i * stride);
			src = src.and(MASK37);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 50));
			tmp.intoArray(output, 80 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 448 + i * stride);
			src = src.and(MASK37);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 23));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 576 + i * stride);
			src = src.and(MASK37);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 60));
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 704 + i * stride);
			src = src.and(MASK37);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 33));
			tmp.intoArray(output, 112 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 31);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 832 + i * stride);
			src = src.and(MASK37);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 6));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 960 + i * stride);
			src = src.and(MASK37);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 43));
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 21);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 32 + i * stride);
			src = src.and(MASK37);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 160 + i * stride);
			src = src.and(MASK37);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 53));
			tmp.intoArray(output, 144 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 11);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 288 + i * stride);
			src = src.and(MASK37);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 26));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 416 + i * stride);
			src = src.and(MASK37);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 63));
			tmp.intoArray(output, 160 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 1);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 544 + i * stride);
			src = src.and(MASK37);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 36));
			tmp.intoArray(output, 176 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 672 + i * stride);
			src = src.and(MASK37);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 9));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 800 + i * stride);
			src = src.and(MASK37);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 46));
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 18);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 928 + i * stride);
			src = src.and(MASK37);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 19));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 96 + i * stride);
			src = src.and(MASK37);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 56));
			tmp.intoArray(output, 208 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 224 + i * stride);
			src = src.and(MASK37);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 29));
			tmp.intoArray(output, 224 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 35);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 352 + i * stride);
			src = src.and(MASK37);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 2));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 480 + i * stride);
			src = src.and(MASK37);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 39));
			tmp.intoArray(output, 240 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 25);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 608 + i * stride);
			src = src.and(MASK37);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 12));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 736 + i * stride);
			src = src.and(MASK37);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 49));
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 15);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 864 + i * stride);
			src = src.and(MASK37);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 22));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 992 + i * stride);
			src = src.and(MASK37);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 59));
			tmp.intoArray(output, 272 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 5);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 16 + i * stride);
			src = src.and(MASK37);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 288 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 144 + i * stride);
			src = src.and(MASK37);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 5));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 272 + i * stride);
			src = src.and(MASK37);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 42));
			tmp.intoArray(output, 304 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 22);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 400 + i * stride);
			src = src.and(MASK37);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 15));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 528 + i * stride);
			src = src.and(MASK37);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 52));
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 656 + i * stride);
			src = src.and(MASK37);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 25));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 784 + i * stride);
			src = src.and(MASK37);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 62));
			tmp.intoArray(output, 336 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 912 + i * stride);
			src = src.and(MASK37);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 35));
			tmp.intoArray(output, 352 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 29);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 80 + i * stride);
			src = src.and(MASK37);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 208 + i * stride);
			src = src.and(MASK37);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 45));
			tmp.intoArray(output, 368 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 19);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 336 + i * stride);
			src = src.and(MASK37);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 18));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 464 + i * stride);
			src = src.and(MASK37);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 55));
			tmp.intoArray(output, 384 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 9);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 592 + i * stride);
			src = src.and(MASK37);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 28));
			tmp.intoArray(output, 400 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 36);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 720 + i * stride);
			src = src.and(MASK37);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 1));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 848 + i * stride);
			src = src.and(MASK37);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 38));
			tmp.intoArray(output, 416 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 26);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 976 + i * stride);
			src = src.and(MASK37);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 11));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 48 + i * stride);
			src = src.and(MASK37);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 48));
			tmp.intoArray(output, 432 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 176 + i * stride);
			src = src.and(MASK37);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 21));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 304 + i * stride);
			src = src.and(MASK37);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 58));
			tmp.intoArray(output, 448 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 432 + i * stride);
			src = src.and(MASK37);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 31));
			tmp.intoArray(output, 464 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 33);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 560 + i * stride);
			src = src.and(MASK37);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 4));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 688 + i * stride);
			src = src.and(MASK37);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 41));
			tmp.intoArray(output, 480 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 23);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 816 + i * stride);
			src = src.and(MASK37);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 14));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 944 + i * stride);
			src = src.and(MASK37);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 51));
			tmp.intoArray(output, 496 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 13);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 112 + i * stride);
			src = src.and(MASK37);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 240 + i * stride);
			src = src.and(MASK37);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 61));
			tmp.intoArray(output, 512 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 3);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 368 + i * stride);
			src = src.and(MASK37);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 34));
			tmp.intoArray(output, 528 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 30);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 496 + i * stride);
			src = src.and(MASK37);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 7));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 624 + i * stride);
			src = src.and(MASK37);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 44));
			tmp.intoArray(output, 544 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 752 + i * stride);
			src = src.and(MASK37);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 17));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 880 + i * stride);
			src = src.and(MASK37);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 54));
			tmp.intoArray(output, 560 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 1008 + i * stride);
			src = src.and(MASK37);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 27));
			tmp.intoArray(output, 576 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 37);
		}
	}

	public static void pack38(long[] input, long[] output) {
		int stride = LongVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 64;
		for (int i = 0; i < 16 / stride; i++) {
			LongVector src;
			LongVector tmp;
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 0 + i * stride);
			src = src.and(MASK38);
			tmp = src;
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 128 + i * stride);
			src = src.and(MASK38);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 38));
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 26);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 256 + i * stride);
			src = src.and(MASK38);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 12));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 384 + i * stride);
			src = src.and(MASK38);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 50));
			tmp.intoArray(output, 16 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 512 + i * stride);
			src = src.and(MASK38);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 640 + i * stride);
			src = src.and(MASK38);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 62));
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 768 + i * stride);
			src = src.and(MASK38);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 36));
			tmp.intoArray(output, 48 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 896 + i * stride);
			src = src.and(MASK38);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 10));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 64 + i * stride);
			src = src.and(MASK38);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 48));
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 192 + i * stride);
			src = src.and(MASK38);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 22));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 320 + i * stride);
			src = src.and(MASK38);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 60));
			tmp.intoArray(output, 80 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 448 + i * stride);
			src = src.and(MASK38);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 34));
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 30);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 576 + i * stride);
			src = src.and(MASK38);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 704 + i * stride);
			src = src.and(MASK38);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 46));
			tmp.intoArray(output, 112 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 18);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 832 + i * stride);
			src = src.and(MASK38);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 20));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 960 + i * stride);
			src = src.and(MASK38);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 58));
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 32 + i * stride);
			src = src.and(MASK38);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 144 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 160 + i * stride);
			src = src.and(MASK38);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 6));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 288 + i * stride);
			src = src.and(MASK38);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 44));
			tmp.intoArray(output, 160 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 416 + i * stride);
			src = src.and(MASK38);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 18));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 544 + i * stride);
			src = src.and(MASK38);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 56));
			tmp.intoArray(output, 176 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 672 + i * stride);
			src = src.and(MASK38);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 30));
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 34);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 800 + i * stride);
			src = src.and(MASK38);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 4));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 928 + i * stride);
			src = src.and(MASK38);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 42));
			tmp.intoArray(output, 208 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 22);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 96 + i * stride);
			src = src.and(MASK38);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 224 + i * stride);
			src = src.and(MASK38);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 54));
			tmp.intoArray(output, 224 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 352 + i * stride);
			src = src.and(MASK38);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 28));
			tmp.intoArray(output, 240 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 36);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 480 + i * stride);
			src = src.and(MASK38);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 2));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 608 + i * stride);
			src = src.and(MASK38);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 40));
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 736 + i * stride);
			src = src.and(MASK38);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 14));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 864 + i * stride);
			src = src.and(MASK38);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 52));
			tmp.intoArray(output, 272 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 992 + i * stride);
			src = src.and(MASK38);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 26));
			tmp.intoArray(output, 288 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 38);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 16 + i * stride);
			src = src.and(MASK38);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 144 + i * stride);
			src = src.and(MASK38);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 38));
			tmp.intoArray(output, 304 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 26);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 272 + i * stride);
			src = src.and(MASK38);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 12));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 400 + i * stride);
			src = src.and(MASK38);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 50));
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 528 + i * stride);
			src = src.and(MASK38);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 656 + i * stride);
			src = src.and(MASK38);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 62));
			tmp.intoArray(output, 336 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 784 + i * stride);
			src = src.and(MASK38);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 36));
			tmp.intoArray(output, 352 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 912 + i * stride);
			src = src.and(MASK38);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 10));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 80 + i * stride);
			src = src.and(MASK38);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 48));
			tmp.intoArray(output, 368 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 208 + i * stride);
			src = src.and(MASK38);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 22));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 336 + i * stride);
			src = src.and(MASK38);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 60));
			tmp.intoArray(output, 384 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 464 + i * stride);
			src = src.and(MASK38);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 34));
			tmp.intoArray(output, 400 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 30);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 592 + i * stride);
			src = src.and(MASK38);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 720 + i * stride);
			src = src.and(MASK38);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 46));
			tmp.intoArray(output, 416 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 18);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 848 + i * stride);
			src = src.and(MASK38);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 20));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 976 + i * stride);
			src = src.and(MASK38);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 58));
			tmp.intoArray(output, 432 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 48 + i * stride);
			src = src.and(MASK38);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 448 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 176 + i * stride);
			src = src.and(MASK38);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 6));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 304 + i * stride);
			src = src.and(MASK38);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 44));
			tmp.intoArray(output, 464 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 432 + i * stride);
			src = src.and(MASK38);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 18));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 560 + i * stride);
			src = src.and(MASK38);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 56));
			tmp.intoArray(output, 480 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 688 + i * stride);
			src = src.and(MASK38);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 30));
			tmp.intoArray(output, 496 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 34);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 816 + i * stride);
			src = src.and(MASK38);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 4));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 944 + i * stride);
			src = src.and(MASK38);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 42));
			tmp.intoArray(output, 512 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 22);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 112 + i * stride);
			src = src.and(MASK38);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 240 + i * stride);
			src = src.and(MASK38);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 54));
			tmp.intoArray(output, 528 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 368 + i * stride);
			src = src.and(MASK38);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 28));
			tmp.intoArray(output, 544 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 36);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 496 + i * stride);
			src = src.and(MASK38);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 2));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 624 + i * stride);
			src = src.and(MASK38);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 40));
			tmp.intoArray(output, 560 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 752 + i * stride);
			src = src.and(MASK38);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 14));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 880 + i * stride);
			src = src.and(MASK38);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 52));
			tmp.intoArray(output, 576 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 1008 + i * stride);
			src = src.and(MASK38);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 26));
			tmp.intoArray(output, 592 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 38);
		}
	}

	public static void pack39(long[] input, long[] output) {
		int stride = LongVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 64;
		for (int i = 0; i < 16 / stride; i++) {
			LongVector src;
			LongVector tmp;
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 0 + i * stride);
			src = src.and(MASK39);
			tmp = src;
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 128 + i * stride);
			src = src.and(MASK39);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 39));
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 25);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 256 + i * stride);
			src = src.and(MASK39);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 14));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 384 + i * stride);
			src = src.and(MASK39);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 53));
			tmp.intoArray(output, 16 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 11);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 512 + i * stride);
			src = src.and(MASK39);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 28));
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 36);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 640 + i * stride);
			src = src.and(MASK39);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 3));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 768 + i * stride);
			src = src.and(MASK39);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 42));
			tmp.intoArray(output, 48 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 22);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 896 + i * stride);
			src = src.and(MASK39);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 17));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 64 + i * stride);
			src = src.and(MASK39);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 56));
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 192 + i * stride);
			src = src.and(MASK39);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 31));
			tmp.intoArray(output, 80 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 33);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 320 + i * stride);
			src = src.and(MASK39);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 6));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 448 + i * stride);
			src = src.and(MASK39);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 45));
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 19);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 576 + i * stride);
			src = src.and(MASK39);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 20));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 704 + i * stride);
			src = src.and(MASK39);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 59));
			tmp.intoArray(output, 112 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 5);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 832 + i * stride);
			src = src.and(MASK39);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 34));
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 30);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 960 + i * stride);
			src = src.and(MASK39);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 9));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 32 + i * stride);
			src = src.and(MASK39);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 48));
			tmp.intoArray(output, 144 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 160 + i * stride);
			src = src.and(MASK39);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 23));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 288 + i * stride);
			src = src.and(MASK39);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 62));
			tmp.intoArray(output, 160 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 416 + i * stride);
			src = src.and(MASK39);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 37));
			tmp.intoArray(output, 176 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 27);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 544 + i * stride);
			src = src.and(MASK39);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 12));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 672 + i * stride);
			src = src.and(MASK39);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 51));
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 13);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 800 + i * stride);
			src = src.and(MASK39);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 26));
			tmp.intoArray(output, 208 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 38);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 928 + i * stride);
			src = src.and(MASK39);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 1));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 96 + i * stride);
			src = src.and(MASK39);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 40));
			tmp.intoArray(output, 224 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 224 + i * stride);
			src = src.and(MASK39);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 15));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 352 + i * stride);
			src = src.and(MASK39);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 54));
			tmp.intoArray(output, 240 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 480 + i * stride);
			src = src.and(MASK39);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 29));
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 35);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 608 + i * stride);
			src = src.and(MASK39);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 4));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 736 + i * stride);
			src = src.and(MASK39);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 43));
			tmp.intoArray(output, 272 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 21);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 864 + i * stride);
			src = src.and(MASK39);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 18));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 992 + i * stride);
			src = src.and(MASK39);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 57));
			tmp.intoArray(output, 288 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 7);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 16 + i * stride);
			src = src.and(MASK39);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 304 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 144 + i * stride);
			src = src.and(MASK39);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 7));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 272 + i * stride);
			src = src.and(MASK39);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 46));
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 18);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 400 + i * stride);
			src = src.and(MASK39);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 21));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 528 + i * stride);
			src = src.and(MASK39);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 60));
			tmp.intoArray(output, 336 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 656 + i * stride);
			src = src.and(MASK39);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 35));
			tmp.intoArray(output, 352 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 29);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 784 + i * stride);
			src = src.and(MASK39);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 10));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 912 + i * stride);
			src = src.and(MASK39);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 49));
			tmp.intoArray(output, 368 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 15);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 80 + i * stride);
			src = src.and(MASK39);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 208 + i * stride);
			src = src.and(MASK39);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 63));
			tmp.intoArray(output, 384 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 1);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 336 + i * stride);
			src = src.and(MASK39);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 38));
			tmp.intoArray(output, 400 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 26);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 464 + i * stride);
			src = src.and(MASK39);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 13));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 592 + i * stride);
			src = src.and(MASK39);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 52));
			tmp.intoArray(output, 416 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 720 + i * stride);
			src = src.and(MASK39);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 27));
			tmp.intoArray(output, 432 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 37);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 848 + i * stride);
			src = src.and(MASK39);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 2));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 976 + i * stride);
			src = src.and(MASK39);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 41));
			tmp.intoArray(output, 448 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 23);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 48 + i * stride);
			src = src.and(MASK39);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 176 + i * stride);
			src = src.and(MASK39);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 55));
			tmp.intoArray(output, 464 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 9);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 304 + i * stride);
			src = src.and(MASK39);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 30));
			tmp.intoArray(output, 480 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 34);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 432 + i * stride);
			src = src.and(MASK39);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 5));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 560 + i * stride);
			src = src.and(MASK39);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 44));
			tmp.intoArray(output, 496 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 688 + i * stride);
			src = src.and(MASK39);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 19));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 816 + i * stride);
			src = src.and(MASK39);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 58));
			tmp.intoArray(output, 512 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 944 + i * stride);
			src = src.and(MASK39);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 33));
			tmp.intoArray(output, 528 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 31);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 112 + i * stride);
			src = src.and(MASK39);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 240 + i * stride);
			src = src.and(MASK39);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 47));
			tmp.intoArray(output, 544 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 17);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 368 + i * stride);
			src = src.and(MASK39);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 22));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 496 + i * stride);
			src = src.and(MASK39);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 61));
			tmp.intoArray(output, 560 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 3);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 624 + i * stride);
			src = src.and(MASK39);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 36));
			tmp.intoArray(output, 576 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 752 + i * stride);
			src = src.and(MASK39);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 11));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 880 + i * stride);
			src = src.and(MASK39);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 50));
			tmp.intoArray(output, 592 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 1008 + i * stride);
			src = src.and(MASK39);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 25));
			tmp.intoArray(output, 608 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 39);
		}
	}

	public static void pack40(long[] input, long[] output) {
		int stride = LongVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 64;
		for (int i = 0; i < 16 / stride; i++) {
			LongVector src;
			LongVector tmp;
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 0 + i * stride);
			src = src.and(MASK40);
			tmp = src;
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 128 + i * stride);
			src = src.and(MASK40);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 40));
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 256 + i * stride);
			src = src.and(MASK40);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 384 + i * stride);
			src = src.and(MASK40);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 56));
			tmp.intoArray(output, 16 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 512 + i * stride);
			src = src.and(MASK40);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 640 + i * stride);
			src = src.and(MASK40);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 768 + i * stride);
			src = src.and(MASK40);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 48));
			tmp.intoArray(output, 48 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 896 + i * stride);
			src = src.and(MASK40);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 64 + i * stride);
			src = src.and(MASK40);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 192 + i * stride);
			src = src.and(MASK40);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 40));
			tmp.intoArray(output, 80 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 320 + i * stride);
			src = src.and(MASK40);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 448 + i * stride);
			src = src.and(MASK40);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 56));
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 576 + i * stride);
			src = src.and(MASK40);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 112 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 704 + i * stride);
			src = src.and(MASK40);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 832 + i * stride);
			src = src.and(MASK40);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 48));
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 960 + i * stride);
			src = src.and(MASK40);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 144 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 32 + i * stride);
			src = src.and(MASK40);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 160 + i * stride);
			src = src.and(MASK40);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 40));
			tmp.intoArray(output, 160 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 288 + i * stride);
			src = src.and(MASK40);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 416 + i * stride);
			src = src.and(MASK40);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 56));
			tmp.intoArray(output, 176 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 544 + i * stride);
			src = src.and(MASK40);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 672 + i * stride);
			src = src.and(MASK40);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 800 + i * stride);
			src = src.and(MASK40);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 48));
			tmp.intoArray(output, 208 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 928 + i * stride);
			src = src.and(MASK40);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 224 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 96 + i * stride);
			src = src.and(MASK40);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 224 + i * stride);
			src = src.and(MASK40);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 40));
			tmp.intoArray(output, 240 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 352 + i * stride);
			src = src.and(MASK40);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 480 + i * stride);
			src = src.and(MASK40);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 56));
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 608 + i * stride);
			src = src.and(MASK40);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 272 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 736 + i * stride);
			src = src.and(MASK40);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 864 + i * stride);
			src = src.and(MASK40);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 48));
			tmp.intoArray(output, 288 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 992 + i * stride);
			src = src.and(MASK40);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 304 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 16 + i * stride);
			src = src.and(MASK40);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 144 + i * stride);
			src = src.and(MASK40);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 40));
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 272 + i * stride);
			src = src.and(MASK40);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 400 + i * stride);
			src = src.and(MASK40);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 56));
			tmp.intoArray(output, 336 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 528 + i * stride);
			src = src.and(MASK40);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 352 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 656 + i * stride);
			src = src.and(MASK40);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 784 + i * stride);
			src = src.and(MASK40);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 48));
			tmp.intoArray(output, 368 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 912 + i * stride);
			src = src.and(MASK40);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 384 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 80 + i * stride);
			src = src.and(MASK40);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 208 + i * stride);
			src = src.and(MASK40);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 40));
			tmp.intoArray(output, 400 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 336 + i * stride);
			src = src.and(MASK40);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 464 + i * stride);
			src = src.and(MASK40);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 56));
			tmp.intoArray(output, 416 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 592 + i * stride);
			src = src.and(MASK40);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 432 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 720 + i * stride);
			src = src.and(MASK40);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 848 + i * stride);
			src = src.and(MASK40);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 48));
			tmp.intoArray(output, 448 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 976 + i * stride);
			src = src.and(MASK40);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 464 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 48 + i * stride);
			src = src.and(MASK40);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 176 + i * stride);
			src = src.and(MASK40);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 40));
			tmp.intoArray(output, 480 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 304 + i * stride);
			src = src.and(MASK40);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 432 + i * stride);
			src = src.and(MASK40);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 56));
			tmp.intoArray(output, 496 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 560 + i * stride);
			src = src.and(MASK40);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 512 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 688 + i * stride);
			src = src.and(MASK40);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 816 + i * stride);
			src = src.and(MASK40);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 48));
			tmp.intoArray(output, 528 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 944 + i * stride);
			src = src.and(MASK40);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 544 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 112 + i * stride);
			src = src.and(MASK40);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 240 + i * stride);
			src = src.and(MASK40);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 40));
			tmp.intoArray(output, 560 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 368 + i * stride);
			src = src.and(MASK40);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 496 + i * stride);
			src = src.and(MASK40);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 56));
			tmp.intoArray(output, 576 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 624 + i * stride);
			src = src.and(MASK40);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 592 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 752 + i * stride);
			src = src.and(MASK40);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 880 + i * stride);
			src = src.and(MASK40);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 48));
			tmp.intoArray(output, 608 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 1008 + i * stride);
			src = src.and(MASK40);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 624 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40);
		}
	}

	public static void pack41(long[] input, long[] output) {
		int stride = LongVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 64;
		for (int i = 0; i < 16 / stride; i++) {
			LongVector src;
			LongVector tmp;
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 0 + i * stride);
			src = src.and(MASK41);
			tmp = src;
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 128 + i * stride);
			src = src.and(MASK41);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 41));
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 23);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 256 + i * stride);
			src = src.and(MASK41);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 18));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 384 + i * stride);
			src = src.and(MASK41);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 59));
			tmp.intoArray(output, 16 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 5);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 512 + i * stride);
			src = src.and(MASK41);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 36));
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 640 + i * stride);
			src = src.and(MASK41);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 13));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 768 + i * stride);
			src = src.and(MASK41);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 54));
			tmp.intoArray(output, 48 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 896 + i * stride);
			src = src.and(MASK41);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 31));
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 33);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 64 + i * stride);
			src = src.and(MASK41);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 192 + i * stride);
			src = src.and(MASK41);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 49));
			tmp.intoArray(output, 80 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 15);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 320 + i * stride);
			src = src.and(MASK41);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 26));
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 38);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 448 + i * stride);
			src = src.and(MASK41);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 3));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 576 + i * stride);
			src = src.and(MASK41);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 44));
			tmp.intoArray(output, 112 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 704 + i * stride);
			src = src.and(MASK41);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 21));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 832 + i * stride);
			src = src.and(MASK41);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 62));
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 960 + i * stride);
			src = src.and(MASK41);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 39));
			tmp.intoArray(output, 144 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 25);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 32 + i * stride);
			src = src.and(MASK41);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 160 + i * stride);
			src = src.and(MASK41);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 57));
			tmp.intoArray(output, 160 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 7);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 288 + i * stride);
			src = src.and(MASK41);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 34));
			tmp.intoArray(output, 176 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 30);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 416 + i * stride);
			src = src.and(MASK41);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 11));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 544 + i * stride);
			src = src.and(MASK41);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 52));
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 672 + i * stride);
			src = src.and(MASK41);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 29));
			tmp.intoArray(output, 208 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 35);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 800 + i * stride);
			src = src.and(MASK41);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 6));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 928 + i * stride);
			src = src.and(MASK41);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 47));
			tmp.intoArray(output, 224 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 17);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 96 + i * stride);
			src = src.and(MASK41);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 240 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 224 + i * stride);
			src = src.and(MASK41);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 1));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 352 + i * stride);
			src = src.and(MASK41);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 42));
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 22);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 480 + i * stride);
			src = src.and(MASK41);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 19));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 608 + i * stride);
			src = src.and(MASK41);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 60));
			tmp.intoArray(output, 272 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 736 + i * stride);
			src = src.and(MASK41);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 37));
			tmp.intoArray(output, 288 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 27);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 864 + i * stride);
			src = src.and(MASK41);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 14));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 992 + i * stride);
			src = src.and(MASK41);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 55));
			tmp.intoArray(output, 304 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 9);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 16 + i * stride);
			src = src.and(MASK41);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 144 + i * stride);
			src = src.and(MASK41);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 9));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 272 + i * stride);
			src = src.and(MASK41);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 50));
			tmp.intoArray(output, 336 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 400 + i * stride);
			src = src.and(MASK41);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 27));
			tmp.intoArray(output, 352 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 37);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 528 + i * stride);
			src = src.and(MASK41);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 4));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 656 + i * stride);
			src = src.and(MASK41);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 45));
			tmp.intoArray(output, 368 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 19);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 784 + i * stride);
			src = src.and(MASK41);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 22));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 912 + i * stride);
			src = src.and(MASK41);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 63));
			tmp.intoArray(output, 384 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 1);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 80 + i * stride);
			src = src.and(MASK41);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 40));
			tmp.intoArray(output, 400 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 208 + i * stride);
			src = src.and(MASK41);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 17));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 336 + i * stride);
			src = src.and(MASK41);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 58));
			tmp.intoArray(output, 416 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 464 + i * stride);
			src = src.and(MASK41);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 35));
			tmp.intoArray(output, 432 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 29);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 592 + i * stride);
			src = src.and(MASK41);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 12));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 720 + i * stride);
			src = src.and(MASK41);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 53));
			tmp.intoArray(output, 448 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 11);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 848 + i * stride);
			src = src.and(MASK41);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 30));
			tmp.intoArray(output, 464 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 34);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 976 + i * stride);
			src = src.and(MASK41);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 7));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 48 + i * stride);
			src = src.and(MASK41);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 48));
			tmp.intoArray(output, 480 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 176 + i * stride);
			src = src.and(MASK41);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 25));
			tmp.intoArray(output, 496 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 39);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 304 + i * stride);
			src = src.and(MASK41);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 2));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 432 + i * stride);
			src = src.and(MASK41);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 43));
			tmp.intoArray(output, 512 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 21);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 560 + i * stride);
			src = src.and(MASK41);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 20));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 688 + i * stride);
			src = src.and(MASK41);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 61));
			tmp.intoArray(output, 528 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 3);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 816 + i * stride);
			src = src.and(MASK41);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 38));
			tmp.intoArray(output, 544 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 26);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 944 + i * stride);
			src = src.and(MASK41);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 15));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 112 + i * stride);
			src = src.and(MASK41);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 56));
			tmp.intoArray(output, 560 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 240 + i * stride);
			src = src.and(MASK41);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 33));
			tmp.intoArray(output, 576 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 31);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 368 + i * stride);
			src = src.and(MASK41);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 10));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 496 + i * stride);
			src = src.and(MASK41);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 51));
			tmp.intoArray(output, 592 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 13);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 624 + i * stride);
			src = src.and(MASK41);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 28));
			tmp.intoArray(output, 608 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 36);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 752 + i * stride);
			src = src.and(MASK41);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 5));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 880 + i * stride);
			src = src.and(MASK41);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 46));
			tmp.intoArray(output, 624 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 18);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 1008 + i * stride);
			src = src.and(MASK41);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 23));
			tmp.intoArray(output, 640 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 41);
		}
	}

	public static void pack42(long[] input, long[] output) {
		int stride = LongVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 64;
		for (int i = 0; i < 16 / stride; i++) {
			LongVector src;
			LongVector tmp;
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 0 + i * stride);
			src = src.and(MASK42);
			tmp = src;
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 128 + i * stride);
			src = src.and(MASK42);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 42));
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 22);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 256 + i * stride);
			src = src.and(MASK42);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 20));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 384 + i * stride);
			src = src.and(MASK42);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 62));
			tmp.intoArray(output, 16 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 512 + i * stride);
			src = src.and(MASK42);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 40));
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 640 + i * stride);
			src = src.and(MASK42);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 18));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 768 + i * stride);
			src = src.and(MASK42);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 60));
			tmp.intoArray(output, 48 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 896 + i * stride);
			src = src.and(MASK42);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 38));
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 26);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 64 + i * stride);
			src = src.and(MASK42);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 192 + i * stride);
			src = src.and(MASK42);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 58));
			tmp.intoArray(output, 80 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 320 + i * stride);
			src = src.and(MASK42);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 36));
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 448 + i * stride);
			src = src.and(MASK42);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 14));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 576 + i * stride);
			src = src.and(MASK42);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 56));
			tmp.intoArray(output, 112 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 704 + i * stride);
			src = src.and(MASK42);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 34));
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 30);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 832 + i * stride);
			src = src.and(MASK42);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 12));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 960 + i * stride);
			src = src.and(MASK42);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 54));
			tmp.intoArray(output, 144 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 32 + i * stride);
			src = src.and(MASK42);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 160 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 160 + i * stride);
			src = src.and(MASK42);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 10));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 288 + i * stride);
			src = src.and(MASK42);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 52));
			tmp.intoArray(output, 176 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 416 + i * stride);
			src = src.and(MASK42);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 30));
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 34);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 544 + i * stride);
			src = src.and(MASK42);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 672 + i * stride);
			src = src.and(MASK42);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 50));
			tmp.intoArray(output, 208 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 800 + i * stride);
			src = src.and(MASK42);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 28));
			tmp.intoArray(output, 224 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 36);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 928 + i * stride);
			src = src.and(MASK42);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 6));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 96 + i * stride);
			src = src.and(MASK42);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 48));
			tmp.intoArray(output, 240 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 224 + i * stride);
			src = src.and(MASK42);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 26));
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 38);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 352 + i * stride);
			src = src.and(MASK42);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 4));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 480 + i * stride);
			src = src.and(MASK42);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 46));
			tmp.intoArray(output, 272 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 18);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 608 + i * stride);
			src = src.and(MASK42);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 288 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 736 + i * stride);
			src = src.and(MASK42);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 2));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 864 + i * stride);
			src = src.and(MASK42);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 44));
			tmp.intoArray(output, 304 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 992 + i * stride);
			src = src.and(MASK42);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 22));
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 42);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 16 + i * stride);
			src = src.and(MASK42);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 144 + i * stride);
			src = src.and(MASK42);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 42));
			tmp.intoArray(output, 336 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 22);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 272 + i * stride);
			src = src.and(MASK42);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 20));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 400 + i * stride);
			src = src.and(MASK42);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 62));
			tmp.intoArray(output, 352 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 528 + i * stride);
			src = src.and(MASK42);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 40));
			tmp.intoArray(output, 368 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 656 + i * stride);
			src = src.and(MASK42);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 18));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 784 + i * stride);
			src = src.and(MASK42);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 60));
			tmp.intoArray(output, 384 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 912 + i * stride);
			src = src.and(MASK42);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 38));
			tmp.intoArray(output, 400 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 26);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 80 + i * stride);
			src = src.and(MASK42);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 208 + i * stride);
			src = src.and(MASK42);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 58));
			tmp.intoArray(output, 416 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 336 + i * stride);
			src = src.and(MASK42);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 36));
			tmp.intoArray(output, 432 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 464 + i * stride);
			src = src.and(MASK42);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 14));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 592 + i * stride);
			src = src.and(MASK42);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 56));
			tmp.intoArray(output, 448 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 720 + i * stride);
			src = src.and(MASK42);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 34));
			tmp.intoArray(output, 464 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 30);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 848 + i * stride);
			src = src.and(MASK42);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 12));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 976 + i * stride);
			src = src.and(MASK42);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 54));
			tmp.intoArray(output, 480 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 48 + i * stride);
			src = src.and(MASK42);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 496 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 176 + i * stride);
			src = src.and(MASK42);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 10));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 304 + i * stride);
			src = src.and(MASK42);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 52));
			tmp.intoArray(output, 512 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 432 + i * stride);
			src = src.and(MASK42);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 30));
			tmp.intoArray(output, 528 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 34);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 560 + i * stride);
			src = src.and(MASK42);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 688 + i * stride);
			src = src.and(MASK42);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 50));
			tmp.intoArray(output, 544 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 816 + i * stride);
			src = src.and(MASK42);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 28));
			tmp.intoArray(output, 560 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 36);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 944 + i * stride);
			src = src.and(MASK42);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 6));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 112 + i * stride);
			src = src.and(MASK42);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 48));
			tmp.intoArray(output, 576 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 240 + i * stride);
			src = src.and(MASK42);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 26));
			tmp.intoArray(output, 592 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 38);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 368 + i * stride);
			src = src.and(MASK42);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 4));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 496 + i * stride);
			src = src.and(MASK42);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 46));
			tmp.intoArray(output, 608 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 18);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 624 + i * stride);
			src = src.and(MASK42);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 624 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 752 + i * stride);
			src = src.and(MASK42);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 2));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 880 + i * stride);
			src = src.and(MASK42);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 44));
			tmp.intoArray(output, 640 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 1008 + i * stride);
			src = src.and(MASK42);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 22));
			tmp.intoArray(output, 656 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 42);
		}
	}

	public static void pack43(long[] input, long[] output) {
		int stride = LongVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 64;
		for (int i = 0; i < 16 / stride; i++) {
			LongVector src;
			LongVector tmp;
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 0 + i * stride);
			src = src.and(MASK43);
			tmp = src;
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 128 + i * stride);
			src = src.and(MASK43);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 43));
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 21);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 256 + i * stride);
			src = src.and(MASK43);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 22));
			tmp.intoArray(output, 16 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 42);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 384 + i * stride);
			src = src.and(MASK43);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 1));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 512 + i * stride);
			src = src.and(MASK43);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 44));
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 640 + i * stride);
			src = src.and(MASK43);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 23));
			tmp.intoArray(output, 48 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 41);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 768 + i * stride);
			src = src.and(MASK43);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 2));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 896 + i * stride);
			src = src.and(MASK43);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 45));
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 19);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 64 + i * stride);
			src = src.and(MASK43);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 80 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 192 + i * stride);
			src = src.and(MASK43);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 3));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 320 + i * stride);
			src = src.and(MASK43);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 46));
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 18);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 448 + i * stride);
			src = src.and(MASK43);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 25));
			tmp.intoArray(output, 112 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 39);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 576 + i * stride);
			src = src.and(MASK43);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 4));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 704 + i * stride);
			src = src.and(MASK43);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 47));
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 17);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 832 + i * stride);
			src = src.and(MASK43);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 26));
			tmp.intoArray(output, 144 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 38);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 960 + i * stride);
			src = src.and(MASK43);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 5));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 32 + i * stride);
			src = src.and(MASK43);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 48));
			tmp.intoArray(output, 160 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 160 + i * stride);
			src = src.and(MASK43);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 27));
			tmp.intoArray(output, 176 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 37);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 288 + i * stride);
			src = src.and(MASK43);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 6));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 416 + i * stride);
			src = src.and(MASK43);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 49));
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 15);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 544 + i * stride);
			src = src.and(MASK43);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 28));
			tmp.intoArray(output, 208 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 36);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 672 + i * stride);
			src = src.and(MASK43);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 7));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 800 + i * stride);
			src = src.and(MASK43);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 50));
			tmp.intoArray(output, 224 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 928 + i * stride);
			src = src.and(MASK43);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 29));
			tmp.intoArray(output, 240 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 35);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 96 + i * stride);
			src = src.and(MASK43);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 224 + i * stride);
			src = src.and(MASK43);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 51));
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 13);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 352 + i * stride);
			src = src.and(MASK43);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 30));
			tmp.intoArray(output, 272 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 34);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 480 + i * stride);
			src = src.and(MASK43);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 9));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 608 + i * stride);
			src = src.and(MASK43);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 52));
			tmp.intoArray(output, 288 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 736 + i * stride);
			src = src.and(MASK43);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 31));
			tmp.intoArray(output, 304 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 33);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 864 + i * stride);
			src = src.and(MASK43);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 10));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 992 + i * stride);
			src = src.and(MASK43);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 53));
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 11);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 16 + i * stride);
			src = src.and(MASK43);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 336 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 144 + i * stride);
			src = src.and(MASK43);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 11));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 272 + i * stride);
			src = src.and(MASK43);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 54));
			tmp.intoArray(output, 352 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 400 + i * stride);
			src = src.and(MASK43);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 33));
			tmp.intoArray(output, 368 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 31);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 528 + i * stride);
			src = src.and(MASK43);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 12));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 656 + i * stride);
			src = src.and(MASK43);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 55));
			tmp.intoArray(output, 384 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 9);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 784 + i * stride);
			src = src.and(MASK43);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 34));
			tmp.intoArray(output, 400 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 30);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 912 + i * stride);
			src = src.and(MASK43);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 13));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 80 + i * stride);
			src = src.and(MASK43);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 56));
			tmp.intoArray(output, 416 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 208 + i * stride);
			src = src.and(MASK43);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 35));
			tmp.intoArray(output, 432 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 29);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 336 + i * stride);
			src = src.and(MASK43);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 14));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 464 + i * stride);
			src = src.and(MASK43);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 57));
			tmp.intoArray(output, 448 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 7);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 592 + i * stride);
			src = src.and(MASK43);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 36));
			tmp.intoArray(output, 464 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 720 + i * stride);
			src = src.and(MASK43);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 15));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 848 + i * stride);
			src = src.and(MASK43);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 58));
			tmp.intoArray(output, 480 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 976 + i * stride);
			src = src.and(MASK43);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 37));
			tmp.intoArray(output, 496 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 27);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 48 + i * stride);
			src = src.and(MASK43);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 176 + i * stride);
			src = src.and(MASK43);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 59));
			tmp.intoArray(output, 512 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 5);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 304 + i * stride);
			src = src.and(MASK43);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 38));
			tmp.intoArray(output, 528 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 26);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 432 + i * stride);
			src = src.and(MASK43);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 17));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 560 + i * stride);
			src = src.and(MASK43);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 60));
			tmp.intoArray(output, 544 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 688 + i * stride);
			src = src.and(MASK43);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 39));
			tmp.intoArray(output, 560 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 25);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 816 + i * stride);
			src = src.and(MASK43);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 18));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 944 + i * stride);
			src = src.and(MASK43);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 61));
			tmp.intoArray(output, 576 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 3);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 112 + i * stride);
			src = src.and(MASK43);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 40));
			tmp.intoArray(output, 592 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 240 + i * stride);
			src = src.and(MASK43);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 19));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 368 + i * stride);
			src = src.and(MASK43);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 62));
			tmp.intoArray(output, 608 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 496 + i * stride);
			src = src.and(MASK43);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 41));
			tmp.intoArray(output, 624 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 23);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 624 + i * stride);
			src = src.and(MASK43);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 20));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 752 + i * stride);
			src = src.and(MASK43);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 63));
			tmp.intoArray(output, 640 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 1);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 880 + i * stride);
			src = src.and(MASK43);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 42));
			tmp.intoArray(output, 656 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 22);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 1008 + i * stride);
			src = src.and(MASK43);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 21));
			tmp.intoArray(output, 672 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 43);
		}
	}

	public static void pack44(long[] input, long[] output) {
		int stride = LongVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 64;
		for (int i = 0; i < 16 / stride; i++) {
			LongVector src;
			LongVector tmp;
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 0 + i * stride);
			src = src.and(MASK44);
			tmp = src;
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 128 + i * stride);
			src = src.and(MASK44);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 44));
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 256 + i * stride);
			src = src.and(MASK44);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 16 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 384 + i * stride);
			src = src.and(MASK44);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 4));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 512 + i * stride);
			src = src.and(MASK44);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 48));
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 640 + i * stride);
			src = src.and(MASK44);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 28));
			tmp.intoArray(output, 48 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 36);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 768 + i * stride);
			src = src.and(MASK44);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 896 + i * stride);
			src = src.and(MASK44);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 52));
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 64 + i * stride);
			src = src.and(MASK44);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 80 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 192 + i * stride);
			src = src.and(MASK44);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 12));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 320 + i * stride);
			src = src.and(MASK44);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 56));
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 448 + i * stride);
			src = src.and(MASK44);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 36));
			tmp.intoArray(output, 112 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 576 + i * stride);
			src = src.and(MASK44);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 704 + i * stride);
			src = src.and(MASK44);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 60));
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 832 + i * stride);
			src = src.and(MASK44);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 40));
			tmp.intoArray(output, 144 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 960 + i * stride);
			src = src.and(MASK44);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 20));
			tmp.intoArray(output, 160 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 44);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 32 + i * stride);
			src = src.and(MASK44);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 160 + i * stride);
			src = src.and(MASK44);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 44));
			tmp.intoArray(output, 176 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 288 + i * stride);
			src = src.and(MASK44);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 416 + i * stride);
			src = src.and(MASK44);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 4));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 544 + i * stride);
			src = src.and(MASK44);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 48));
			tmp.intoArray(output, 208 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 672 + i * stride);
			src = src.and(MASK44);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 28));
			tmp.intoArray(output, 224 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 36);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 800 + i * stride);
			src = src.and(MASK44);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 928 + i * stride);
			src = src.and(MASK44);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 52));
			tmp.intoArray(output, 240 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 96 + i * stride);
			src = src.and(MASK44);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 224 + i * stride);
			src = src.and(MASK44);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 12));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 352 + i * stride);
			src = src.and(MASK44);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 56));
			tmp.intoArray(output, 272 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 480 + i * stride);
			src = src.and(MASK44);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 36));
			tmp.intoArray(output, 288 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 608 + i * stride);
			src = src.and(MASK44);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 736 + i * stride);
			src = src.and(MASK44);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 60));
			tmp.intoArray(output, 304 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 864 + i * stride);
			src = src.and(MASK44);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 40));
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 992 + i * stride);
			src = src.and(MASK44);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 20));
			tmp.intoArray(output, 336 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 44);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 16 + i * stride);
			src = src.and(MASK44);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 144 + i * stride);
			src = src.and(MASK44);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 44));
			tmp.intoArray(output, 352 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 272 + i * stride);
			src = src.and(MASK44);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 368 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 400 + i * stride);
			src = src.and(MASK44);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 4));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 528 + i * stride);
			src = src.and(MASK44);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 48));
			tmp.intoArray(output, 384 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 656 + i * stride);
			src = src.and(MASK44);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 28));
			tmp.intoArray(output, 400 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 36);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 784 + i * stride);
			src = src.and(MASK44);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 912 + i * stride);
			src = src.and(MASK44);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 52));
			tmp.intoArray(output, 416 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 80 + i * stride);
			src = src.and(MASK44);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 432 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 208 + i * stride);
			src = src.and(MASK44);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 12));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 336 + i * stride);
			src = src.and(MASK44);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 56));
			tmp.intoArray(output, 448 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 464 + i * stride);
			src = src.and(MASK44);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 36));
			tmp.intoArray(output, 464 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 592 + i * stride);
			src = src.and(MASK44);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 720 + i * stride);
			src = src.and(MASK44);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 60));
			tmp.intoArray(output, 480 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 848 + i * stride);
			src = src.and(MASK44);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 40));
			tmp.intoArray(output, 496 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 976 + i * stride);
			src = src.and(MASK44);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 20));
			tmp.intoArray(output, 512 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 44);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 48 + i * stride);
			src = src.and(MASK44);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 176 + i * stride);
			src = src.and(MASK44);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 44));
			tmp.intoArray(output, 528 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 304 + i * stride);
			src = src.and(MASK44);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 544 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 432 + i * stride);
			src = src.and(MASK44);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 4));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 560 + i * stride);
			src = src.and(MASK44);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 48));
			tmp.intoArray(output, 560 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 688 + i * stride);
			src = src.and(MASK44);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 28));
			tmp.intoArray(output, 576 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 36);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 816 + i * stride);
			src = src.and(MASK44);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 944 + i * stride);
			src = src.and(MASK44);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 52));
			tmp.intoArray(output, 592 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 112 + i * stride);
			src = src.and(MASK44);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 608 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 240 + i * stride);
			src = src.and(MASK44);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 12));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 368 + i * stride);
			src = src.and(MASK44);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 56));
			tmp.intoArray(output, 624 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 496 + i * stride);
			src = src.and(MASK44);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 36));
			tmp.intoArray(output, 640 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 624 + i * stride);
			src = src.and(MASK44);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 752 + i * stride);
			src = src.and(MASK44);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 60));
			tmp.intoArray(output, 656 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 880 + i * stride);
			src = src.and(MASK44);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 40));
			tmp.intoArray(output, 672 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 1008 + i * stride);
			src = src.and(MASK44);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 20));
			tmp.intoArray(output, 688 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 44);
		}
	}

	public static void pack45(long[] input, long[] output) {
		int stride = LongVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 64;
		for (int i = 0; i < 16 / stride; i++) {
			LongVector src;
			LongVector tmp;
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 0 + i * stride);
			src = src.and(MASK45);
			tmp = src;
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 128 + i * stride);
			src = src.and(MASK45);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 45));
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 19);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 256 + i * stride);
			src = src.and(MASK45);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 26));
			tmp.intoArray(output, 16 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 38);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 384 + i * stride);
			src = src.and(MASK45);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 7));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 512 + i * stride);
			src = src.and(MASK45);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 52));
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 640 + i * stride);
			src = src.and(MASK45);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 33));
			tmp.intoArray(output, 48 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 31);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 768 + i * stride);
			src = src.and(MASK45);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 14));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 896 + i * stride);
			src = src.and(MASK45);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 59));
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 5);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 64 + i * stride);
			src = src.and(MASK45);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 40));
			tmp.intoArray(output, 80 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 192 + i * stride);
			src = src.and(MASK45);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 21));
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 43);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 320 + i * stride);
			src = src.and(MASK45);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 2));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 448 + i * stride);
			src = src.and(MASK45);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 47));
			tmp.intoArray(output, 112 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 17);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 576 + i * stride);
			src = src.and(MASK45);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 28));
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 36);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 704 + i * stride);
			src = src.and(MASK45);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 9));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 832 + i * stride);
			src = src.and(MASK45);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 54));
			tmp.intoArray(output, 144 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 960 + i * stride);
			src = src.and(MASK45);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 35));
			tmp.intoArray(output, 160 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 29);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 32 + i * stride);
			src = src.and(MASK45);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 160 + i * stride);
			src = src.and(MASK45);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 61));
			tmp.intoArray(output, 176 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 3);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 288 + i * stride);
			src = src.and(MASK45);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 42));
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 22);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 416 + i * stride);
			src = src.and(MASK45);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 23));
			tmp.intoArray(output, 208 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 41);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 544 + i * stride);
			src = src.and(MASK45);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 4));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 672 + i * stride);
			src = src.and(MASK45);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 49));
			tmp.intoArray(output, 224 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 15);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 800 + i * stride);
			src = src.and(MASK45);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 30));
			tmp.intoArray(output, 240 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 34);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 928 + i * stride);
			src = src.and(MASK45);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 11));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 96 + i * stride);
			src = src.and(MASK45);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 56));
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 224 + i * stride);
			src = src.and(MASK45);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 37));
			tmp.intoArray(output, 272 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 27);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 352 + i * stride);
			src = src.and(MASK45);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 18));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 480 + i * stride);
			src = src.and(MASK45);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 63));
			tmp.intoArray(output, 288 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 1);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 608 + i * stride);
			src = src.and(MASK45);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 44));
			tmp.intoArray(output, 304 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 736 + i * stride);
			src = src.and(MASK45);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 25));
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 39);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 864 + i * stride);
			src = src.and(MASK45);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 6));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 992 + i * stride);
			src = src.and(MASK45);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 51));
			tmp.intoArray(output, 336 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 13);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 16 + i * stride);
			src = src.and(MASK45);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 352 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 144 + i * stride);
			src = src.and(MASK45);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 13));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 272 + i * stride);
			src = src.and(MASK45);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 58));
			tmp.intoArray(output, 368 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 400 + i * stride);
			src = src.and(MASK45);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 39));
			tmp.intoArray(output, 384 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 25);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 528 + i * stride);
			src = src.and(MASK45);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 20));
			tmp.intoArray(output, 400 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 44);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 656 + i * stride);
			src = src.and(MASK45);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 1));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 784 + i * stride);
			src = src.and(MASK45);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 46));
			tmp.intoArray(output, 416 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 18);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 912 + i * stride);
			src = src.and(MASK45);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 27));
			tmp.intoArray(output, 432 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 37);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 80 + i * stride);
			src = src.and(MASK45);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 208 + i * stride);
			src = src.and(MASK45);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 53));
			tmp.intoArray(output, 448 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 11);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 336 + i * stride);
			src = src.and(MASK45);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 34));
			tmp.intoArray(output, 464 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 30);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 464 + i * stride);
			src = src.and(MASK45);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 15));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 592 + i * stride);
			src = src.and(MASK45);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 60));
			tmp.intoArray(output, 480 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 720 + i * stride);
			src = src.and(MASK45);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 41));
			tmp.intoArray(output, 496 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 23);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 848 + i * stride);
			src = src.and(MASK45);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 22));
			tmp.intoArray(output, 512 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 42);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 976 + i * stride);
			src = src.and(MASK45);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 3));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 48 + i * stride);
			src = src.and(MASK45);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 48));
			tmp.intoArray(output, 528 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 176 + i * stride);
			src = src.and(MASK45);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 29));
			tmp.intoArray(output, 544 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 35);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 304 + i * stride);
			src = src.and(MASK45);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 10));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 432 + i * stride);
			src = src.and(MASK45);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 55));
			tmp.intoArray(output, 560 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 9);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 560 + i * stride);
			src = src.and(MASK45);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 36));
			tmp.intoArray(output, 576 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 688 + i * stride);
			src = src.and(MASK45);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 17));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 816 + i * stride);
			src = src.and(MASK45);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 62));
			tmp.intoArray(output, 592 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 944 + i * stride);
			src = src.and(MASK45);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 43));
			tmp.intoArray(output, 608 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 21);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 112 + i * stride);
			src = src.and(MASK45);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 624 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 240 + i * stride);
			src = src.and(MASK45);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 5));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 368 + i * stride);
			src = src.and(MASK45);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 50));
			tmp.intoArray(output, 640 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 496 + i * stride);
			src = src.and(MASK45);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 31));
			tmp.intoArray(output, 656 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 33);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 624 + i * stride);
			src = src.and(MASK45);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 12));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 752 + i * stride);
			src = src.and(MASK45);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 57));
			tmp.intoArray(output, 672 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 7);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 880 + i * stride);
			src = src.and(MASK45);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 38));
			tmp.intoArray(output, 688 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 26);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 1008 + i * stride);
			src = src.and(MASK45);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 19));
			tmp.intoArray(output, 704 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 45);
		}
	}

	public static void pack46(long[] input, long[] output) {
		int stride = LongVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 64;
		for (int i = 0; i < 16 / stride; i++) {
			LongVector src;
			LongVector tmp;
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 0 + i * stride);
			src = src.and(MASK46);
			tmp = src;
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 128 + i * stride);
			src = src.and(MASK46);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 46));
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 18);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 256 + i * stride);
			src = src.and(MASK46);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 28));
			tmp.intoArray(output, 16 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 36);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 384 + i * stride);
			src = src.and(MASK46);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 10));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 512 + i * stride);
			src = src.and(MASK46);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 56));
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 640 + i * stride);
			src = src.and(MASK46);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 38));
			tmp.intoArray(output, 48 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 26);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 768 + i * stride);
			src = src.and(MASK46);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 20));
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 44);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 896 + i * stride);
			src = src.and(MASK46);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 2));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 64 + i * stride);
			src = src.and(MASK46);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 48));
			tmp.intoArray(output, 80 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 192 + i * stride);
			src = src.and(MASK46);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 30));
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 34);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 320 + i * stride);
			src = src.and(MASK46);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 12));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 448 + i * stride);
			src = src.and(MASK46);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 58));
			tmp.intoArray(output, 112 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 576 + i * stride);
			src = src.and(MASK46);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 40));
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 704 + i * stride);
			src = src.and(MASK46);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 22));
			tmp.intoArray(output, 144 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 42);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 832 + i * stride);
			src = src.and(MASK46);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 4));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 960 + i * stride);
			src = src.and(MASK46);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 50));
			tmp.intoArray(output, 160 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 32 + i * stride);
			src = src.and(MASK46);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 176 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 160 + i * stride);
			src = src.and(MASK46);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 14));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 288 + i * stride);
			src = src.and(MASK46);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 60));
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 416 + i * stride);
			src = src.and(MASK46);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 42));
			tmp.intoArray(output, 208 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 22);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 544 + i * stride);
			src = src.and(MASK46);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 224 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 672 + i * stride);
			src = src.and(MASK46);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 6));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 800 + i * stride);
			src = src.and(MASK46);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 52));
			tmp.intoArray(output, 240 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 928 + i * stride);
			src = src.and(MASK46);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 34));
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 30);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 96 + i * stride);
			src = src.and(MASK46);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 224 + i * stride);
			src = src.and(MASK46);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 62));
			tmp.intoArray(output, 272 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 352 + i * stride);
			src = src.and(MASK46);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 44));
			tmp.intoArray(output, 288 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 480 + i * stride);
			src = src.and(MASK46);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 26));
			tmp.intoArray(output, 304 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 38);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 608 + i * stride);
			src = src.and(MASK46);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 736 + i * stride);
			src = src.and(MASK46);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 54));
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 864 + i * stride);
			src = src.and(MASK46);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 36));
			tmp.intoArray(output, 336 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 992 + i * stride);
			src = src.and(MASK46);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 18));
			tmp.intoArray(output, 352 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 46);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 16 + i * stride);
			src = src.and(MASK46);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 144 + i * stride);
			src = src.and(MASK46);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 46));
			tmp.intoArray(output, 368 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 18);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 272 + i * stride);
			src = src.and(MASK46);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 28));
			tmp.intoArray(output, 384 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 36);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 400 + i * stride);
			src = src.and(MASK46);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 10));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 528 + i * stride);
			src = src.and(MASK46);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 56));
			tmp.intoArray(output, 400 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 656 + i * stride);
			src = src.and(MASK46);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 38));
			tmp.intoArray(output, 416 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 26);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 784 + i * stride);
			src = src.and(MASK46);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 20));
			tmp.intoArray(output, 432 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 44);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 912 + i * stride);
			src = src.and(MASK46);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 2));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 80 + i * stride);
			src = src.and(MASK46);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 48));
			tmp.intoArray(output, 448 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 208 + i * stride);
			src = src.and(MASK46);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 30));
			tmp.intoArray(output, 464 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 34);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 336 + i * stride);
			src = src.and(MASK46);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 12));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 464 + i * stride);
			src = src.and(MASK46);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 58));
			tmp.intoArray(output, 480 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 592 + i * stride);
			src = src.and(MASK46);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 40));
			tmp.intoArray(output, 496 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 720 + i * stride);
			src = src.and(MASK46);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 22));
			tmp.intoArray(output, 512 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 42);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 848 + i * stride);
			src = src.and(MASK46);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 4));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 976 + i * stride);
			src = src.and(MASK46);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 50));
			tmp.intoArray(output, 528 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 48 + i * stride);
			src = src.and(MASK46);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 544 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 176 + i * stride);
			src = src.and(MASK46);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 14));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 304 + i * stride);
			src = src.and(MASK46);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 60));
			tmp.intoArray(output, 560 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 432 + i * stride);
			src = src.and(MASK46);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 42));
			tmp.intoArray(output, 576 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 22);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 560 + i * stride);
			src = src.and(MASK46);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 592 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 688 + i * stride);
			src = src.and(MASK46);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 6));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 816 + i * stride);
			src = src.and(MASK46);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 52));
			tmp.intoArray(output, 608 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 944 + i * stride);
			src = src.and(MASK46);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 34));
			tmp.intoArray(output, 624 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 30);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 112 + i * stride);
			src = src.and(MASK46);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 240 + i * stride);
			src = src.and(MASK46);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 62));
			tmp.intoArray(output, 640 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 368 + i * stride);
			src = src.and(MASK46);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 44));
			tmp.intoArray(output, 656 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 496 + i * stride);
			src = src.and(MASK46);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 26));
			tmp.intoArray(output, 672 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 38);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 624 + i * stride);
			src = src.and(MASK46);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 752 + i * stride);
			src = src.and(MASK46);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 54));
			tmp.intoArray(output, 688 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 880 + i * stride);
			src = src.and(MASK46);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 36));
			tmp.intoArray(output, 704 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 1008 + i * stride);
			src = src.and(MASK46);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 18));
			tmp.intoArray(output, 720 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 46);
		}
	}

	public static void pack47(long[] input, long[] output) {
		int stride = LongVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 64;
		for (int i = 0; i < 16 / stride; i++) {
			LongVector src;
			LongVector tmp;
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 0 + i * stride);
			src = src.and(MASK47);
			tmp = src;
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 128 + i * stride);
			src = src.and(MASK47);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 47));
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 17);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 256 + i * stride);
			src = src.and(MASK47);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 30));
			tmp.intoArray(output, 16 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 34);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 384 + i * stride);
			src = src.and(MASK47);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 13));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 512 + i * stride);
			src = src.and(MASK47);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 60));
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 640 + i * stride);
			src = src.and(MASK47);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 43));
			tmp.intoArray(output, 48 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 21);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 768 + i * stride);
			src = src.and(MASK47);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 26));
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 38);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 896 + i * stride);
			src = src.and(MASK47);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 9));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 64 + i * stride);
			src = src.and(MASK47);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 56));
			tmp.intoArray(output, 80 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 192 + i * stride);
			src = src.and(MASK47);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 39));
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 25);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 320 + i * stride);
			src = src.and(MASK47);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 22));
			tmp.intoArray(output, 112 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 42);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 448 + i * stride);
			src = src.and(MASK47);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 5));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 576 + i * stride);
			src = src.and(MASK47);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 52));
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 704 + i * stride);
			src = src.and(MASK47);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 35));
			tmp.intoArray(output, 144 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 29);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 832 + i * stride);
			src = src.and(MASK47);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 18));
			tmp.intoArray(output, 160 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 46);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 960 + i * stride);
			src = src.and(MASK47);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 1));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 32 + i * stride);
			src = src.and(MASK47);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 48));
			tmp.intoArray(output, 176 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 160 + i * stride);
			src = src.and(MASK47);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 31));
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 33);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 288 + i * stride);
			src = src.and(MASK47);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 14));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 416 + i * stride);
			src = src.and(MASK47);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 61));
			tmp.intoArray(output, 208 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 3);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 544 + i * stride);
			src = src.and(MASK47);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 44));
			tmp.intoArray(output, 224 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 672 + i * stride);
			src = src.and(MASK47);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 27));
			tmp.intoArray(output, 240 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 37);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 800 + i * stride);
			src = src.and(MASK47);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 10));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 928 + i * stride);
			src = src.and(MASK47);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 57));
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 7);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 96 + i * stride);
			src = src.and(MASK47);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 40));
			tmp.intoArray(output, 272 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 224 + i * stride);
			src = src.and(MASK47);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 23));
			tmp.intoArray(output, 288 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 41);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 352 + i * stride);
			src = src.and(MASK47);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 6));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 480 + i * stride);
			src = src.and(MASK47);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 53));
			tmp.intoArray(output, 304 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 11);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 608 + i * stride);
			src = src.and(MASK47);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 36));
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 736 + i * stride);
			src = src.and(MASK47);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 19));
			tmp.intoArray(output, 336 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 45);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 864 + i * stride);
			src = src.and(MASK47);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 2));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 992 + i * stride);
			src = src.and(MASK47);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 49));
			tmp.intoArray(output, 352 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 15);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 16 + i * stride);
			src = src.and(MASK47);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 368 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 144 + i * stride);
			src = src.and(MASK47);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 15));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 272 + i * stride);
			src = src.and(MASK47);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 62));
			tmp.intoArray(output, 384 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 400 + i * stride);
			src = src.and(MASK47);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 45));
			tmp.intoArray(output, 400 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 19);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 528 + i * stride);
			src = src.and(MASK47);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 28));
			tmp.intoArray(output, 416 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 36);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 656 + i * stride);
			src = src.and(MASK47);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 11));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 784 + i * stride);
			src = src.and(MASK47);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 58));
			tmp.intoArray(output, 432 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 912 + i * stride);
			src = src.and(MASK47);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 41));
			tmp.intoArray(output, 448 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 23);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 80 + i * stride);
			src = src.and(MASK47);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 464 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 208 + i * stride);
			src = src.and(MASK47);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 7));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 336 + i * stride);
			src = src.and(MASK47);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 54));
			tmp.intoArray(output, 480 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 464 + i * stride);
			src = src.and(MASK47);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 37));
			tmp.intoArray(output, 496 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 27);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 592 + i * stride);
			src = src.and(MASK47);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 20));
			tmp.intoArray(output, 512 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 44);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 720 + i * stride);
			src = src.and(MASK47);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 3));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 848 + i * stride);
			src = src.and(MASK47);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 50));
			tmp.intoArray(output, 528 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 976 + i * stride);
			src = src.and(MASK47);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 33));
			tmp.intoArray(output, 544 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 31);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 48 + i * stride);
			src = src.and(MASK47);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 176 + i * stride);
			src = src.and(MASK47);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 63));
			tmp.intoArray(output, 560 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 1);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 304 + i * stride);
			src = src.and(MASK47);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 46));
			tmp.intoArray(output, 576 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 18);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 432 + i * stride);
			src = src.and(MASK47);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 29));
			tmp.intoArray(output, 592 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 35);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 560 + i * stride);
			src = src.and(MASK47);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 12));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 688 + i * stride);
			src = src.and(MASK47);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 59));
			tmp.intoArray(output, 608 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 5);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 816 + i * stride);
			src = src.and(MASK47);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 42));
			tmp.intoArray(output, 624 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 22);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 944 + i * stride);
			src = src.and(MASK47);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 25));
			tmp.intoArray(output, 640 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 39);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 112 + i * stride);
			src = src.and(MASK47);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 240 + i * stride);
			src = src.and(MASK47);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 55));
			tmp.intoArray(output, 656 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 9);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 368 + i * stride);
			src = src.and(MASK47);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 38));
			tmp.intoArray(output, 672 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 26);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 496 + i * stride);
			src = src.and(MASK47);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 21));
			tmp.intoArray(output, 688 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 43);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 624 + i * stride);
			src = src.and(MASK47);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 4));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 752 + i * stride);
			src = src.and(MASK47);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 51));
			tmp.intoArray(output, 704 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 13);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 880 + i * stride);
			src = src.and(MASK47);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 34));
			tmp.intoArray(output, 720 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 30);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 1008 + i * stride);
			src = src.and(MASK47);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 17));
			tmp.intoArray(output, 736 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 47);
		}
	}

	public static void pack48(long[] input, long[] output) {
		int stride = LongVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 64;
		for (int i = 0; i < 16 / stride; i++) {
			LongVector src;
			LongVector tmp;
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 0 + i * stride);
			src = src.and(MASK48);
			tmp = src;
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 128 + i * stride);
			src = src.and(MASK48);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 48));
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 256 + i * stride);
			src = src.and(MASK48);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 16 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 384 + i * stride);
			src = src.and(MASK48);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 512 + i * stride);
			src = src.and(MASK48);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 640 + i * stride);
			src = src.and(MASK48);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 48));
			tmp.intoArray(output, 48 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 768 + i * stride);
			src = src.and(MASK48);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 896 + i * stride);
			src = src.and(MASK48);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 80 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 64 + i * stride);
			src = src.and(MASK48);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 192 + i * stride);
			src = src.and(MASK48);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 48));
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 320 + i * stride);
			src = src.and(MASK48);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 112 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 448 + i * stride);
			src = src.and(MASK48);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 576 + i * stride);
			src = src.and(MASK48);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 704 + i * stride);
			src = src.and(MASK48);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 48));
			tmp.intoArray(output, 144 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 832 + i * stride);
			src = src.and(MASK48);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 160 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 960 + i * stride);
			src = src.and(MASK48);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 176 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 32 + i * stride);
			src = src.and(MASK48);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 160 + i * stride);
			src = src.and(MASK48);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 48));
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 288 + i * stride);
			src = src.and(MASK48);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 208 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 416 + i * stride);
			src = src.and(MASK48);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 224 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 544 + i * stride);
			src = src.and(MASK48);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 672 + i * stride);
			src = src.and(MASK48);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 48));
			tmp.intoArray(output, 240 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 800 + i * stride);
			src = src.and(MASK48);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 928 + i * stride);
			src = src.and(MASK48);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 272 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 96 + i * stride);
			src = src.and(MASK48);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 224 + i * stride);
			src = src.and(MASK48);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 48));
			tmp.intoArray(output, 288 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 352 + i * stride);
			src = src.and(MASK48);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 304 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 480 + i * stride);
			src = src.and(MASK48);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 608 + i * stride);
			src = src.and(MASK48);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 736 + i * stride);
			src = src.and(MASK48);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 48));
			tmp.intoArray(output, 336 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 864 + i * stride);
			src = src.and(MASK48);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 352 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 992 + i * stride);
			src = src.and(MASK48);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 368 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 16 + i * stride);
			src = src.and(MASK48);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 144 + i * stride);
			src = src.and(MASK48);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 48));
			tmp.intoArray(output, 384 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 272 + i * stride);
			src = src.and(MASK48);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 400 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 400 + i * stride);
			src = src.and(MASK48);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 416 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 528 + i * stride);
			src = src.and(MASK48);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 656 + i * stride);
			src = src.and(MASK48);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 48));
			tmp.intoArray(output, 432 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 784 + i * stride);
			src = src.and(MASK48);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 448 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 912 + i * stride);
			src = src.and(MASK48);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 464 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 80 + i * stride);
			src = src.and(MASK48);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 208 + i * stride);
			src = src.and(MASK48);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 48));
			tmp.intoArray(output, 480 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 336 + i * stride);
			src = src.and(MASK48);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 496 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 464 + i * stride);
			src = src.and(MASK48);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 512 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 592 + i * stride);
			src = src.and(MASK48);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 720 + i * stride);
			src = src.and(MASK48);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 48));
			tmp.intoArray(output, 528 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 848 + i * stride);
			src = src.and(MASK48);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 544 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 976 + i * stride);
			src = src.and(MASK48);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 560 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 48 + i * stride);
			src = src.and(MASK48);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 176 + i * stride);
			src = src.and(MASK48);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 48));
			tmp.intoArray(output, 576 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 304 + i * stride);
			src = src.and(MASK48);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 592 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 432 + i * stride);
			src = src.and(MASK48);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 608 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 560 + i * stride);
			src = src.and(MASK48);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 688 + i * stride);
			src = src.and(MASK48);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 48));
			tmp.intoArray(output, 624 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 816 + i * stride);
			src = src.and(MASK48);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 640 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 944 + i * stride);
			src = src.and(MASK48);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 656 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 112 + i * stride);
			src = src.and(MASK48);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 240 + i * stride);
			src = src.and(MASK48);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 48));
			tmp.intoArray(output, 672 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 368 + i * stride);
			src = src.and(MASK48);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 688 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 496 + i * stride);
			src = src.and(MASK48);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 704 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 624 + i * stride);
			src = src.and(MASK48);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 752 + i * stride);
			src = src.and(MASK48);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 48));
			tmp.intoArray(output, 720 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 880 + i * stride);
			src = src.and(MASK48);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 736 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 1008 + i * stride);
			src = src.and(MASK48);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 752 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48);
		}
	}

	public static void pack49(long[] input, long[] output) {
		int stride = LongVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 64;
		for (int i = 0; i < 16 / stride; i++) {
			LongVector src;
			LongVector tmp;
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 0 + i * stride);
			src = src.and(MASK49);
			tmp = src;
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 128 + i * stride);
			src = src.and(MASK49);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 49));
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 15);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 256 + i * stride);
			src = src.and(MASK49);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 34));
			tmp.intoArray(output, 16 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 30);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 384 + i * stride);
			src = src.and(MASK49);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 19));
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 45);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 512 + i * stride);
			src = src.and(MASK49);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 4));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 640 + i * stride);
			src = src.and(MASK49);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 53));
			tmp.intoArray(output, 48 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 11);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 768 + i * stride);
			src = src.and(MASK49);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 38));
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 26);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 896 + i * stride);
			src = src.and(MASK49);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 23));
			tmp.intoArray(output, 80 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 41);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 64 + i * stride);
			src = src.and(MASK49);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 192 + i * stride);
			src = src.and(MASK49);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 57));
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 7);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 320 + i * stride);
			src = src.and(MASK49);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 42));
			tmp.intoArray(output, 112 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 22);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 448 + i * stride);
			src = src.and(MASK49);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 27));
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 37);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 576 + i * stride);
			src = src.and(MASK49);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 12));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 704 + i * stride);
			src = src.and(MASK49);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 61));
			tmp.intoArray(output, 144 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 3);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 832 + i * stride);
			src = src.and(MASK49);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 46));
			tmp.intoArray(output, 160 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 18);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 960 + i * stride);
			src = src.and(MASK49);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 31));
			tmp.intoArray(output, 176 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 33);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 32 + i * stride);
			src = src.and(MASK49);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 160 + i * stride);
			src = src.and(MASK49);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 1));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 288 + i * stride);
			src = src.and(MASK49);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 50));
			tmp.intoArray(output, 208 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 416 + i * stride);
			src = src.and(MASK49);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 35));
			tmp.intoArray(output, 224 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 29);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 544 + i * stride);
			src = src.and(MASK49);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 20));
			tmp.intoArray(output, 240 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 44);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 672 + i * stride);
			src = src.and(MASK49);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 5));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 800 + i * stride);
			src = src.and(MASK49);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 54));
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 928 + i * stride);
			src = src.and(MASK49);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 39));
			tmp.intoArray(output, 272 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 25);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 96 + i * stride);
			src = src.and(MASK49);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 288 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 224 + i * stride);
			src = src.and(MASK49);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 9));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 352 + i * stride);
			src = src.and(MASK49);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 58));
			tmp.intoArray(output, 304 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 480 + i * stride);
			src = src.and(MASK49);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 43));
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 21);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 608 + i * stride);
			src = src.and(MASK49);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 28));
			tmp.intoArray(output, 336 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 36);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 736 + i * stride);
			src = src.and(MASK49);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 13));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 864 + i * stride);
			src = src.and(MASK49);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 62));
			tmp.intoArray(output, 352 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 992 + i * stride);
			src = src.and(MASK49);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 47));
			tmp.intoArray(output, 368 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 17);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 16 + i * stride);
			src = src.and(MASK49);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 384 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 144 + i * stride);
			src = src.and(MASK49);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 17));
			tmp.intoArray(output, 400 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 47);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 272 + i * stride);
			src = src.and(MASK49);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 2));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 400 + i * stride);
			src = src.and(MASK49);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 51));
			tmp.intoArray(output, 416 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 13);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 528 + i * stride);
			src = src.and(MASK49);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 36));
			tmp.intoArray(output, 432 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 656 + i * stride);
			src = src.and(MASK49);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 21));
			tmp.intoArray(output, 448 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 43);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 784 + i * stride);
			src = src.and(MASK49);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 6));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 912 + i * stride);
			src = src.and(MASK49);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 55));
			tmp.intoArray(output, 464 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 9);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 80 + i * stride);
			src = src.and(MASK49);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 40));
			tmp.intoArray(output, 480 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 208 + i * stride);
			src = src.and(MASK49);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 25));
			tmp.intoArray(output, 496 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 39);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 336 + i * stride);
			src = src.and(MASK49);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 10));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 464 + i * stride);
			src = src.and(MASK49);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 59));
			tmp.intoArray(output, 512 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 5);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 592 + i * stride);
			src = src.and(MASK49);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 44));
			tmp.intoArray(output, 528 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 720 + i * stride);
			src = src.and(MASK49);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 29));
			tmp.intoArray(output, 544 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 35);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 848 + i * stride);
			src = src.and(MASK49);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 14));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 976 + i * stride);
			src = src.and(MASK49);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 63));
			tmp.intoArray(output, 560 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 1);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 48 + i * stride);
			src = src.and(MASK49);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 48));
			tmp.intoArray(output, 576 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 176 + i * stride);
			src = src.and(MASK49);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 33));
			tmp.intoArray(output, 592 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 31);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 304 + i * stride);
			src = src.and(MASK49);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 18));
			tmp.intoArray(output, 608 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 46);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 432 + i * stride);
			src = src.and(MASK49);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 3));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 560 + i * stride);
			src = src.and(MASK49);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 52));
			tmp.intoArray(output, 624 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 688 + i * stride);
			src = src.and(MASK49);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 37));
			tmp.intoArray(output, 640 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 27);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 816 + i * stride);
			src = src.and(MASK49);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 22));
			tmp.intoArray(output, 656 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 42);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 944 + i * stride);
			src = src.and(MASK49);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 7));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 112 + i * stride);
			src = src.and(MASK49);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 56));
			tmp.intoArray(output, 672 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 240 + i * stride);
			src = src.and(MASK49);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 41));
			tmp.intoArray(output, 688 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 23);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 368 + i * stride);
			src = src.and(MASK49);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 26));
			tmp.intoArray(output, 704 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 38);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 496 + i * stride);
			src = src.and(MASK49);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 11));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 624 + i * stride);
			src = src.and(MASK49);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 60));
			tmp.intoArray(output, 720 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 752 + i * stride);
			src = src.and(MASK49);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 45));
			tmp.intoArray(output, 736 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 19);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 880 + i * stride);
			src = src.and(MASK49);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 30));
			tmp.intoArray(output, 752 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 34);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 1008 + i * stride);
			src = src.and(MASK49);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 15));
			tmp.intoArray(output, 768 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 49);
		}
	}

	public static void pack50(long[] input, long[] output) {
		int stride = LongVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 64;
		for (int i = 0; i < 16 / stride; i++) {
			LongVector src;
			LongVector tmp;
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 0 + i * stride);
			src = src.and(MASK50);
			tmp = src;
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 128 + i * stride);
			src = src.and(MASK50);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 50));
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 256 + i * stride);
			src = src.and(MASK50);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 36));
			tmp.intoArray(output, 16 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 384 + i * stride);
			src = src.and(MASK50);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 22));
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 42);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 512 + i * stride);
			src = src.and(MASK50);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 640 + i * stride);
			src = src.and(MASK50);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 58));
			tmp.intoArray(output, 48 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 768 + i * stride);
			src = src.and(MASK50);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 44));
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 896 + i * stride);
			src = src.and(MASK50);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 30));
			tmp.intoArray(output, 80 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 34);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 64 + i * stride);
			src = src.and(MASK50);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 192 + i * stride);
			src = src.and(MASK50);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 2));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 320 + i * stride);
			src = src.and(MASK50);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 52));
			tmp.intoArray(output, 112 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 448 + i * stride);
			src = src.and(MASK50);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 38));
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 26);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 576 + i * stride);
			src = src.and(MASK50);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 144 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 704 + i * stride);
			src = src.and(MASK50);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 10));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 832 + i * stride);
			src = src.and(MASK50);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 60));
			tmp.intoArray(output, 160 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 960 + i * stride);
			src = src.and(MASK50);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 46));
			tmp.intoArray(output, 176 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 18);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 32 + i * stride);
			src = src.and(MASK50);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 160 + i * stride);
			src = src.and(MASK50);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 18));
			tmp.intoArray(output, 208 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 46);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 288 + i * stride);
			src = src.and(MASK50);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 4));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 416 + i * stride);
			src = src.and(MASK50);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 54));
			tmp.intoArray(output, 224 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 544 + i * stride);
			src = src.and(MASK50);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 40));
			tmp.intoArray(output, 240 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 672 + i * stride);
			src = src.and(MASK50);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 26));
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 38);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 800 + i * stride);
			src = src.and(MASK50);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 12));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 928 + i * stride);
			src = src.and(MASK50);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 62));
			tmp.intoArray(output, 272 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 96 + i * stride);
			src = src.and(MASK50);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 48));
			tmp.intoArray(output, 288 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 224 + i * stride);
			src = src.and(MASK50);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 34));
			tmp.intoArray(output, 304 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 30);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 352 + i * stride);
			src = src.and(MASK50);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 20));
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 44);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 480 + i * stride);
			src = src.and(MASK50);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 6));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 608 + i * stride);
			src = src.and(MASK50);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 56));
			tmp.intoArray(output, 336 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 736 + i * stride);
			src = src.and(MASK50);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 42));
			tmp.intoArray(output, 352 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 22);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 864 + i * stride);
			src = src.and(MASK50);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 28));
			tmp.intoArray(output, 368 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 36);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 992 + i * stride);
			src = src.and(MASK50);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 14));
			tmp.intoArray(output, 384 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 50);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 16 + i * stride);
			src = src.and(MASK50);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 144 + i * stride);
			src = src.and(MASK50);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 50));
			tmp.intoArray(output, 400 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 272 + i * stride);
			src = src.and(MASK50);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 36));
			tmp.intoArray(output, 416 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 400 + i * stride);
			src = src.and(MASK50);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 22));
			tmp.intoArray(output, 432 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 42);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 528 + i * stride);
			src = src.and(MASK50);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 656 + i * stride);
			src = src.and(MASK50);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 58));
			tmp.intoArray(output, 448 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 784 + i * stride);
			src = src.and(MASK50);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 44));
			tmp.intoArray(output, 464 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 912 + i * stride);
			src = src.and(MASK50);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 30));
			tmp.intoArray(output, 480 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 34);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 80 + i * stride);
			src = src.and(MASK50);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 496 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 208 + i * stride);
			src = src.and(MASK50);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 2));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 336 + i * stride);
			src = src.and(MASK50);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 52));
			tmp.intoArray(output, 512 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 464 + i * stride);
			src = src.and(MASK50);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 38));
			tmp.intoArray(output, 528 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 26);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 592 + i * stride);
			src = src.and(MASK50);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 544 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 720 + i * stride);
			src = src.and(MASK50);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 10));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 848 + i * stride);
			src = src.and(MASK50);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 60));
			tmp.intoArray(output, 560 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 976 + i * stride);
			src = src.and(MASK50);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 46));
			tmp.intoArray(output, 576 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 18);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 48 + i * stride);
			src = src.and(MASK50);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 592 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 176 + i * stride);
			src = src.and(MASK50);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 18));
			tmp.intoArray(output, 608 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 46);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 304 + i * stride);
			src = src.and(MASK50);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 4));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 432 + i * stride);
			src = src.and(MASK50);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 54));
			tmp.intoArray(output, 624 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 560 + i * stride);
			src = src.and(MASK50);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 40));
			tmp.intoArray(output, 640 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 688 + i * stride);
			src = src.and(MASK50);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 26));
			tmp.intoArray(output, 656 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 38);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 816 + i * stride);
			src = src.and(MASK50);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 12));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 944 + i * stride);
			src = src.and(MASK50);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 62));
			tmp.intoArray(output, 672 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 112 + i * stride);
			src = src.and(MASK50);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 48));
			tmp.intoArray(output, 688 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 240 + i * stride);
			src = src.and(MASK50);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 34));
			tmp.intoArray(output, 704 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 30);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 368 + i * stride);
			src = src.and(MASK50);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 20));
			tmp.intoArray(output, 720 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 44);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 496 + i * stride);
			src = src.and(MASK50);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 6));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 624 + i * stride);
			src = src.and(MASK50);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 56));
			tmp.intoArray(output, 736 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 752 + i * stride);
			src = src.and(MASK50);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 42));
			tmp.intoArray(output, 752 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 22);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 880 + i * stride);
			src = src.and(MASK50);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 28));
			tmp.intoArray(output, 768 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 36);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 1008 + i * stride);
			src = src.and(MASK50);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 14));
			tmp.intoArray(output, 784 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 50);
		}
	}

	public static void pack51(long[] input, long[] output) {
		int stride = LongVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 64;
		for (int i = 0; i < 16 / stride; i++) {
			LongVector src;
			LongVector tmp;
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 0 + i * stride);
			src = src.and(MASK51);
			tmp = src;
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 128 + i * stride);
			src = src.and(MASK51);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 51));
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 13);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 256 + i * stride);
			src = src.and(MASK51);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 38));
			tmp.intoArray(output, 16 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 26);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 384 + i * stride);
			src = src.and(MASK51);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 25));
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 39);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 512 + i * stride);
			src = src.and(MASK51);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 12));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 640 + i * stride);
			src = src.and(MASK51);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 63));
			tmp.intoArray(output, 48 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 1);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 768 + i * stride);
			src = src.and(MASK51);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 50));
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 896 + i * stride);
			src = src.and(MASK51);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 37));
			tmp.intoArray(output, 80 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 27);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 64 + i * stride);
			src = src.and(MASK51);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 192 + i * stride);
			src = src.and(MASK51);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 11));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 320 + i * stride);
			src = src.and(MASK51);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 62));
			tmp.intoArray(output, 112 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 448 + i * stride);
			src = src.and(MASK51);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 49));
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 15);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 576 + i * stride);
			src = src.and(MASK51);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 36));
			tmp.intoArray(output, 144 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 704 + i * stride);
			src = src.and(MASK51);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 23));
			tmp.intoArray(output, 160 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 41);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 832 + i * stride);
			src = src.and(MASK51);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 10));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 960 + i * stride);
			src = src.and(MASK51);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 61));
			tmp.intoArray(output, 176 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 3);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 32 + i * stride);
			src = src.and(MASK51);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 48));
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 160 + i * stride);
			src = src.and(MASK51);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 35));
			tmp.intoArray(output, 208 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 29);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 288 + i * stride);
			src = src.and(MASK51);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 22));
			tmp.intoArray(output, 224 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 42);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 416 + i * stride);
			src = src.and(MASK51);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 9));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 544 + i * stride);
			src = src.and(MASK51);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 60));
			tmp.intoArray(output, 240 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 672 + i * stride);
			src = src.and(MASK51);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 47));
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 17);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 800 + i * stride);
			src = src.and(MASK51);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 34));
			tmp.intoArray(output, 272 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 30);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 928 + i * stride);
			src = src.and(MASK51);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 21));
			tmp.intoArray(output, 288 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 43);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 96 + i * stride);
			src = src.and(MASK51);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 224 + i * stride);
			src = src.and(MASK51);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 59));
			tmp.intoArray(output, 304 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 5);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 352 + i * stride);
			src = src.and(MASK51);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 46));
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 18);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 480 + i * stride);
			src = src.and(MASK51);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 33));
			tmp.intoArray(output, 336 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 31);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 608 + i * stride);
			src = src.and(MASK51);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 20));
			tmp.intoArray(output, 352 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 44);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 736 + i * stride);
			src = src.and(MASK51);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 7));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 864 + i * stride);
			src = src.and(MASK51);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 58));
			tmp.intoArray(output, 368 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 992 + i * stride);
			src = src.and(MASK51);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 45));
			tmp.intoArray(output, 384 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 19);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 16 + i * stride);
			src = src.and(MASK51);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 400 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 144 + i * stride);
			src = src.and(MASK51);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 19));
			tmp.intoArray(output, 416 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 45);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 272 + i * stride);
			src = src.and(MASK51);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 6));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 400 + i * stride);
			src = src.and(MASK51);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 57));
			tmp.intoArray(output, 432 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 7);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 528 + i * stride);
			src = src.and(MASK51);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 44));
			tmp.intoArray(output, 448 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 656 + i * stride);
			src = src.and(MASK51);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 31));
			tmp.intoArray(output, 464 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 33);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 784 + i * stride);
			src = src.and(MASK51);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 18));
			tmp.intoArray(output, 480 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 46);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 912 + i * stride);
			src = src.and(MASK51);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 5));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 80 + i * stride);
			src = src.and(MASK51);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 56));
			tmp.intoArray(output, 496 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 208 + i * stride);
			src = src.and(MASK51);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 43));
			tmp.intoArray(output, 512 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 21);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 336 + i * stride);
			src = src.and(MASK51);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 30));
			tmp.intoArray(output, 528 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 34);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 464 + i * stride);
			src = src.and(MASK51);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 17));
			tmp.intoArray(output, 544 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 47);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 592 + i * stride);
			src = src.and(MASK51);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 4));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 720 + i * stride);
			src = src.and(MASK51);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 55));
			tmp.intoArray(output, 560 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 9);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 848 + i * stride);
			src = src.and(MASK51);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 42));
			tmp.intoArray(output, 576 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 22);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 976 + i * stride);
			src = src.and(MASK51);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 29));
			tmp.intoArray(output, 592 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 35);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 48 + i * stride);
			src = src.and(MASK51);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 608 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 176 + i * stride);
			src = src.and(MASK51);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 3));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 304 + i * stride);
			src = src.and(MASK51);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 54));
			tmp.intoArray(output, 624 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 432 + i * stride);
			src = src.and(MASK51);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 41));
			tmp.intoArray(output, 640 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 23);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 560 + i * stride);
			src = src.and(MASK51);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 28));
			tmp.intoArray(output, 656 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 36);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 688 + i * stride);
			src = src.and(MASK51);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 15));
			tmp.intoArray(output, 672 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 49);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 816 + i * stride);
			src = src.and(MASK51);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 2));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 944 + i * stride);
			src = src.and(MASK51);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 53));
			tmp.intoArray(output, 688 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 11);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 112 + i * stride);
			src = src.and(MASK51);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 40));
			tmp.intoArray(output, 704 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 240 + i * stride);
			src = src.and(MASK51);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 27));
			tmp.intoArray(output, 720 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 37);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 368 + i * stride);
			src = src.and(MASK51);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 14));
			tmp.intoArray(output, 736 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 50);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 496 + i * stride);
			src = src.and(MASK51);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 1));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 624 + i * stride);
			src = src.and(MASK51);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 52));
			tmp.intoArray(output, 752 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 752 + i * stride);
			src = src.and(MASK51);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 39));
			tmp.intoArray(output, 768 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 25);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 880 + i * stride);
			src = src.and(MASK51);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 26));
			tmp.intoArray(output, 784 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 38);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 1008 + i * stride);
			src = src.and(MASK51);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 13));
			tmp.intoArray(output, 800 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 51);
		}
	}

	public static void pack52(long[] input, long[] output) {
		int stride = LongVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 64;
		for (int i = 0; i < 16 / stride; i++) {
			LongVector src;
			LongVector tmp;
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 0 + i * stride);
			src = src.and(MASK52);
			tmp = src;
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 128 + i * stride);
			src = src.and(MASK52);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 52));
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 256 + i * stride);
			src = src.and(MASK52);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 40));
			tmp.intoArray(output, 16 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 384 + i * stride);
			src = src.and(MASK52);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 28));
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 36);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 512 + i * stride);
			src = src.and(MASK52);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 48 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 640 + i * stride);
			src = src.and(MASK52);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 4));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 768 + i * stride);
			src = src.and(MASK52);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 56));
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 896 + i * stride);
			src = src.and(MASK52);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 44));
			tmp.intoArray(output, 80 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 64 + i * stride);
			src = src.and(MASK52);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 192 + i * stride);
			src = src.and(MASK52);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 20));
			tmp.intoArray(output, 112 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 44);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 320 + i * stride);
			src = src.and(MASK52);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 448 + i * stride);
			src = src.and(MASK52);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 60));
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 576 + i * stride);
			src = src.and(MASK52);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 48));
			tmp.intoArray(output, 144 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 704 + i * stride);
			src = src.and(MASK52);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 36));
			tmp.intoArray(output, 160 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 832 + i * stride);
			src = src.and(MASK52);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 176 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 960 + i * stride);
			src = src.and(MASK52);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 52);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 32 + i * stride);
			src = src.and(MASK52);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 160 + i * stride);
			src = src.and(MASK52);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 52));
			tmp.intoArray(output, 208 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 288 + i * stride);
			src = src.and(MASK52);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 40));
			tmp.intoArray(output, 224 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 416 + i * stride);
			src = src.and(MASK52);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 28));
			tmp.intoArray(output, 240 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 36);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 544 + i * stride);
			src = src.and(MASK52);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 672 + i * stride);
			src = src.and(MASK52);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 4));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 800 + i * stride);
			src = src.and(MASK52);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 56));
			tmp.intoArray(output, 272 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 928 + i * stride);
			src = src.and(MASK52);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 44));
			tmp.intoArray(output, 288 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 96 + i * stride);
			src = src.and(MASK52);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 304 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 224 + i * stride);
			src = src.and(MASK52);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 20));
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 44);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 352 + i * stride);
			src = src.and(MASK52);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 480 + i * stride);
			src = src.and(MASK52);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 60));
			tmp.intoArray(output, 336 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 608 + i * stride);
			src = src.and(MASK52);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 48));
			tmp.intoArray(output, 352 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 736 + i * stride);
			src = src.and(MASK52);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 36));
			tmp.intoArray(output, 368 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 864 + i * stride);
			src = src.and(MASK52);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 384 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 992 + i * stride);
			src = src.and(MASK52);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 400 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 52);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 16 + i * stride);
			src = src.and(MASK52);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 144 + i * stride);
			src = src.and(MASK52);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 52));
			tmp.intoArray(output, 416 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 272 + i * stride);
			src = src.and(MASK52);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 40));
			tmp.intoArray(output, 432 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 400 + i * stride);
			src = src.and(MASK52);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 28));
			tmp.intoArray(output, 448 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 36);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 528 + i * stride);
			src = src.and(MASK52);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 464 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 656 + i * stride);
			src = src.and(MASK52);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 4));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 784 + i * stride);
			src = src.and(MASK52);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 56));
			tmp.intoArray(output, 480 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 912 + i * stride);
			src = src.and(MASK52);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 44));
			tmp.intoArray(output, 496 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 80 + i * stride);
			src = src.and(MASK52);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 512 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 208 + i * stride);
			src = src.and(MASK52);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 20));
			tmp.intoArray(output, 528 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 44);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 336 + i * stride);
			src = src.and(MASK52);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 464 + i * stride);
			src = src.and(MASK52);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 60));
			tmp.intoArray(output, 544 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 592 + i * stride);
			src = src.and(MASK52);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 48));
			tmp.intoArray(output, 560 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 720 + i * stride);
			src = src.and(MASK52);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 36));
			tmp.intoArray(output, 576 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 848 + i * stride);
			src = src.and(MASK52);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 592 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 976 + i * stride);
			src = src.and(MASK52);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 608 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 52);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 48 + i * stride);
			src = src.and(MASK52);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 176 + i * stride);
			src = src.and(MASK52);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 52));
			tmp.intoArray(output, 624 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 304 + i * stride);
			src = src.and(MASK52);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 40));
			tmp.intoArray(output, 640 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 432 + i * stride);
			src = src.and(MASK52);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 28));
			tmp.intoArray(output, 656 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 36);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 560 + i * stride);
			src = src.and(MASK52);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 672 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 688 + i * stride);
			src = src.and(MASK52);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 4));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 816 + i * stride);
			src = src.and(MASK52);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 56));
			tmp.intoArray(output, 688 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 944 + i * stride);
			src = src.and(MASK52);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 44));
			tmp.intoArray(output, 704 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 112 + i * stride);
			src = src.and(MASK52);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 720 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 240 + i * stride);
			src = src.and(MASK52);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 20));
			tmp.intoArray(output, 736 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 44);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 368 + i * stride);
			src = src.and(MASK52);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 496 + i * stride);
			src = src.and(MASK52);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 60));
			tmp.intoArray(output, 752 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 624 + i * stride);
			src = src.and(MASK52);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 48));
			tmp.intoArray(output, 768 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 752 + i * stride);
			src = src.and(MASK52);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 36));
			tmp.intoArray(output, 784 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 880 + i * stride);
			src = src.and(MASK52);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 800 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 1008 + i * stride);
			src = src.and(MASK52);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 816 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 52);
		}
	}

	public static void pack53(long[] input, long[] output) {
		int stride = LongVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 64;
		for (int i = 0; i < 16 / stride; i++) {
			LongVector src;
			LongVector tmp;
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 0 + i * stride);
			src = src.and(MASK53);
			tmp = src;
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 128 + i * stride);
			src = src.and(MASK53);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 53));
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 11);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 256 + i * stride);
			src = src.and(MASK53);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 42));
			tmp.intoArray(output, 16 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 22);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 384 + i * stride);
			src = src.and(MASK53);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 31));
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 33);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 512 + i * stride);
			src = src.and(MASK53);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 20));
			tmp.intoArray(output, 48 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 44);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 640 + i * stride);
			src = src.and(MASK53);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 9));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 768 + i * stride);
			src = src.and(MASK53);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 62));
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 896 + i * stride);
			src = src.and(MASK53);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 51));
			tmp.intoArray(output, 80 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 13);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 64 + i * stride);
			src = src.and(MASK53);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 40));
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 192 + i * stride);
			src = src.and(MASK53);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 29));
			tmp.intoArray(output, 112 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 35);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 320 + i * stride);
			src = src.and(MASK53);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 18));
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 46);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 448 + i * stride);
			src = src.and(MASK53);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 7));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 576 + i * stride);
			src = src.and(MASK53);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 60));
			tmp.intoArray(output, 144 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 704 + i * stride);
			src = src.and(MASK53);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 49));
			tmp.intoArray(output, 160 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 15);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 832 + i * stride);
			src = src.and(MASK53);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 38));
			tmp.intoArray(output, 176 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 26);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 960 + i * stride);
			src = src.and(MASK53);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 27));
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 37);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 32 + i * stride);
			src = src.and(MASK53);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 208 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 160 + i * stride);
			src = src.and(MASK53);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 5));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 288 + i * stride);
			src = src.and(MASK53);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 58));
			tmp.intoArray(output, 224 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 416 + i * stride);
			src = src.and(MASK53);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 47));
			tmp.intoArray(output, 240 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 17);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 544 + i * stride);
			src = src.and(MASK53);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 36));
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 672 + i * stride);
			src = src.and(MASK53);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 25));
			tmp.intoArray(output, 272 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 39);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 800 + i * stride);
			src = src.and(MASK53);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 14));
			tmp.intoArray(output, 288 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 50);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 928 + i * stride);
			src = src.and(MASK53);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 3));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 96 + i * stride);
			src = src.and(MASK53);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 56));
			tmp.intoArray(output, 304 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 224 + i * stride);
			src = src.and(MASK53);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 45));
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 19);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 352 + i * stride);
			src = src.and(MASK53);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 34));
			tmp.intoArray(output, 336 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 30);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 480 + i * stride);
			src = src.and(MASK53);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 23));
			tmp.intoArray(output, 352 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 41);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 608 + i * stride);
			src = src.and(MASK53);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 368 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 52);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 736 + i * stride);
			src = src.and(MASK53);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 1));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 864 + i * stride);
			src = src.and(MASK53);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 54));
			tmp.intoArray(output, 384 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 992 + i * stride);
			src = src.and(MASK53);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 43));
			tmp.intoArray(output, 400 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 21);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 16 + i * stride);
			src = src.and(MASK53);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 416 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 144 + i * stride);
			src = src.and(MASK53);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 21));
			tmp.intoArray(output, 432 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 43);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 272 + i * stride);
			src = src.and(MASK53);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 10));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 400 + i * stride);
			src = src.and(MASK53);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 63));
			tmp.intoArray(output, 448 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 1);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 528 + i * stride);
			src = src.and(MASK53);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 52));
			tmp.intoArray(output, 464 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 656 + i * stride);
			src = src.and(MASK53);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 41));
			tmp.intoArray(output, 480 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 23);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 784 + i * stride);
			src = src.and(MASK53);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 30));
			tmp.intoArray(output, 496 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 34);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 912 + i * stride);
			src = src.and(MASK53);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 19));
			tmp.intoArray(output, 512 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 45);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 80 + i * stride);
			src = src.and(MASK53);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 208 + i * stride);
			src = src.and(MASK53);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 61));
			tmp.intoArray(output, 528 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 3);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 336 + i * stride);
			src = src.and(MASK53);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 50));
			tmp.intoArray(output, 544 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 464 + i * stride);
			src = src.and(MASK53);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 39));
			tmp.intoArray(output, 560 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 25);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 592 + i * stride);
			src = src.and(MASK53);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 28));
			tmp.intoArray(output, 576 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 36);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 720 + i * stride);
			src = src.and(MASK53);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 17));
			tmp.intoArray(output, 592 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 47);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 848 + i * stride);
			src = src.and(MASK53);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 6));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 976 + i * stride);
			src = src.and(MASK53);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 59));
			tmp.intoArray(output, 608 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 5);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 48 + i * stride);
			src = src.and(MASK53);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 48));
			tmp.intoArray(output, 624 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 176 + i * stride);
			src = src.and(MASK53);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 37));
			tmp.intoArray(output, 640 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 27);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 304 + i * stride);
			src = src.and(MASK53);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 26));
			tmp.intoArray(output, 656 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 38);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 432 + i * stride);
			src = src.and(MASK53);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 15));
			tmp.intoArray(output, 672 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 49);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 560 + i * stride);
			src = src.and(MASK53);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 4));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 688 + i * stride);
			src = src.and(MASK53);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 57));
			tmp.intoArray(output, 688 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 7);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 816 + i * stride);
			src = src.and(MASK53);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 46));
			tmp.intoArray(output, 704 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 18);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 944 + i * stride);
			src = src.and(MASK53);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 35));
			tmp.intoArray(output, 720 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 29);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 112 + i * stride);
			src = src.and(MASK53);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 736 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 240 + i * stride);
			src = src.and(MASK53);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 13));
			tmp.intoArray(output, 752 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 51);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 368 + i * stride);
			src = src.and(MASK53);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 2));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 496 + i * stride);
			src = src.and(MASK53);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 55));
			tmp.intoArray(output, 768 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 9);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 624 + i * stride);
			src = src.and(MASK53);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 44));
			tmp.intoArray(output, 784 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 752 + i * stride);
			src = src.and(MASK53);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 33));
			tmp.intoArray(output, 800 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 31);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 880 + i * stride);
			src = src.and(MASK53);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 22));
			tmp.intoArray(output, 816 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 42);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 1008 + i * stride);
			src = src.and(MASK53);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 11));
			tmp.intoArray(output, 832 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 53);
		}
	}

	public static void pack54(long[] input, long[] output) {
		int stride = LongVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 64;
		for (int i = 0; i < 16 / stride; i++) {
			LongVector src;
			LongVector tmp;
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 0 + i * stride);
			src = src.and(MASK54);
			tmp = src;
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 128 + i * stride);
			src = src.and(MASK54);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 54));
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 256 + i * stride);
			src = src.and(MASK54);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 44));
			tmp.intoArray(output, 16 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 384 + i * stride);
			src = src.and(MASK54);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 34));
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 30);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 512 + i * stride);
			src = src.and(MASK54);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 48 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 640 + i * stride);
			src = src.and(MASK54);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 14));
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 50);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 768 + i * stride);
			src = src.and(MASK54);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 4));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 896 + i * stride);
			src = src.and(MASK54);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 58));
			tmp.intoArray(output, 80 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 64 + i * stride);
			src = src.and(MASK54);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 48));
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 192 + i * stride);
			src = src.and(MASK54);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 38));
			tmp.intoArray(output, 112 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 26);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 320 + i * stride);
			src = src.and(MASK54);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 28));
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 36);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 448 + i * stride);
			src = src.and(MASK54);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 18));
			tmp.intoArray(output, 144 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 46);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 576 + i * stride);
			src = src.and(MASK54);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 704 + i * stride);
			src = src.and(MASK54);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 62));
			tmp.intoArray(output, 160 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 832 + i * stride);
			src = src.and(MASK54);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 52));
			tmp.intoArray(output, 176 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 960 + i * stride);
			src = src.and(MASK54);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 42));
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 22);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 32 + i * stride);
			src = src.and(MASK54);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 208 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 160 + i * stride);
			src = src.and(MASK54);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 22));
			tmp.intoArray(output, 224 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 42);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 288 + i * stride);
			src = src.and(MASK54);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 240 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 52);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 416 + i * stride);
			src = src.and(MASK54);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 2));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 544 + i * stride);
			src = src.and(MASK54);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 56));
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 672 + i * stride);
			src = src.and(MASK54);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 46));
			tmp.intoArray(output, 272 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 18);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 800 + i * stride);
			src = src.and(MASK54);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 36));
			tmp.intoArray(output, 288 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 928 + i * stride);
			src = src.and(MASK54);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 26));
			tmp.intoArray(output, 304 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 38);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 96 + i * stride);
			src = src.and(MASK54);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 224 + i * stride);
			src = src.and(MASK54);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 6));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 352 + i * stride);
			src = src.and(MASK54);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 60));
			tmp.intoArray(output, 336 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 480 + i * stride);
			src = src.and(MASK54);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 50));
			tmp.intoArray(output, 352 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 608 + i * stride);
			src = src.and(MASK54);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 40));
			tmp.intoArray(output, 368 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 736 + i * stride);
			src = src.and(MASK54);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 30));
			tmp.intoArray(output, 384 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 34);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 864 + i * stride);
			src = src.and(MASK54);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 20));
			tmp.intoArray(output, 400 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 44);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 992 + i * stride);
			src = src.and(MASK54);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 10));
			tmp.intoArray(output, 416 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 54);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 16 + i * stride);
			src = src.and(MASK54);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 144 + i * stride);
			src = src.and(MASK54);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 54));
			tmp.intoArray(output, 432 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 272 + i * stride);
			src = src.and(MASK54);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 44));
			tmp.intoArray(output, 448 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 400 + i * stride);
			src = src.and(MASK54);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 34));
			tmp.intoArray(output, 464 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 30);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 528 + i * stride);
			src = src.and(MASK54);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 480 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 656 + i * stride);
			src = src.and(MASK54);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 14));
			tmp.intoArray(output, 496 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 50);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 784 + i * stride);
			src = src.and(MASK54);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 4));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 912 + i * stride);
			src = src.and(MASK54);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 58));
			tmp.intoArray(output, 512 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 80 + i * stride);
			src = src.and(MASK54);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 48));
			tmp.intoArray(output, 528 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 208 + i * stride);
			src = src.and(MASK54);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 38));
			tmp.intoArray(output, 544 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 26);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 336 + i * stride);
			src = src.and(MASK54);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 28));
			tmp.intoArray(output, 560 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 36);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 464 + i * stride);
			src = src.and(MASK54);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 18));
			tmp.intoArray(output, 576 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 46);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 592 + i * stride);
			src = src.and(MASK54);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 720 + i * stride);
			src = src.and(MASK54);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 62));
			tmp.intoArray(output, 592 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 848 + i * stride);
			src = src.and(MASK54);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 52));
			tmp.intoArray(output, 608 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 976 + i * stride);
			src = src.and(MASK54);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 42));
			tmp.intoArray(output, 624 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 22);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 48 + i * stride);
			src = src.and(MASK54);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 640 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 176 + i * stride);
			src = src.and(MASK54);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 22));
			tmp.intoArray(output, 656 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 42);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 304 + i * stride);
			src = src.and(MASK54);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 672 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 52);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 432 + i * stride);
			src = src.and(MASK54);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 2));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 560 + i * stride);
			src = src.and(MASK54);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 56));
			tmp.intoArray(output, 688 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 688 + i * stride);
			src = src.and(MASK54);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 46));
			tmp.intoArray(output, 704 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 18);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 816 + i * stride);
			src = src.and(MASK54);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 36));
			tmp.intoArray(output, 720 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 944 + i * stride);
			src = src.and(MASK54);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 26));
			tmp.intoArray(output, 736 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 38);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 112 + i * stride);
			src = src.and(MASK54);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 752 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 240 + i * stride);
			src = src.and(MASK54);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 6));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 368 + i * stride);
			src = src.and(MASK54);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 60));
			tmp.intoArray(output, 768 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 496 + i * stride);
			src = src.and(MASK54);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 50));
			tmp.intoArray(output, 784 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 624 + i * stride);
			src = src.and(MASK54);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 40));
			tmp.intoArray(output, 800 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 752 + i * stride);
			src = src.and(MASK54);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 30));
			tmp.intoArray(output, 816 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 34);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 880 + i * stride);
			src = src.and(MASK54);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 20));
			tmp.intoArray(output, 832 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 44);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 1008 + i * stride);
			src = src.and(MASK54);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 10));
			tmp.intoArray(output, 848 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 54);
		}
	}

	public static void pack55(long[] input, long[] output) {
		int stride = LongVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 64;
		for (int i = 0; i < 16 / stride; i++) {
			LongVector src;
			LongVector tmp;
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 0 + i * stride);
			src = src.and(MASK55);
			tmp = src;
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 128 + i * stride);
			src = src.and(MASK55);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 55));
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 9);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 256 + i * stride);
			src = src.and(MASK55);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 46));
			tmp.intoArray(output, 16 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 18);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 384 + i * stride);
			src = src.and(MASK55);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 37));
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 27);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 512 + i * stride);
			src = src.and(MASK55);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 28));
			tmp.intoArray(output, 48 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 36);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 640 + i * stride);
			src = src.and(MASK55);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 19));
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 45);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 768 + i * stride);
			src = src.and(MASK55);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 10));
			tmp.intoArray(output, 80 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 54);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 896 + i * stride);
			src = src.and(MASK55);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 1));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 64 + i * stride);
			src = src.and(MASK55);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 56));
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 192 + i * stride);
			src = src.and(MASK55);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 47));
			tmp.intoArray(output, 112 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 17);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 320 + i * stride);
			src = src.and(MASK55);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 38));
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 26);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 448 + i * stride);
			src = src.and(MASK55);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 29));
			tmp.intoArray(output, 144 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 35);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 576 + i * stride);
			src = src.and(MASK55);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 20));
			tmp.intoArray(output, 160 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 44);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 704 + i * stride);
			src = src.and(MASK55);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 11));
			tmp.intoArray(output, 176 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 53);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 832 + i * stride);
			src = src.and(MASK55);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 2));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 960 + i * stride);
			src = src.and(MASK55);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 57));
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 7);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 32 + i * stride);
			src = src.and(MASK55);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 48));
			tmp.intoArray(output, 208 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 160 + i * stride);
			src = src.and(MASK55);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 39));
			tmp.intoArray(output, 224 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 25);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 288 + i * stride);
			src = src.and(MASK55);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 30));
			tmp.intoArray(output, 240 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 34);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 416 + i * stride);
			src = src.and(MASK55);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 21));
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 43);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 544 + i * stride);
			src = src.and(MASK55);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 272 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 52);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 672 + i * stride);
			src = src.and(MASK55);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 3));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 800 + i * stride);
			src = src.and(MASK55);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 58));
			tmp.intoArray(output, 288 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 928 + i * stride);
			src = src.and(MASK55);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 49));
			tmp.intoArray(output, 304 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 15);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 96 + i * stride);
			src = src.and(MASK55);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 40));
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 224 + i * stride);
			src = src.and(MASK55);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 31));
			tmp.intoArray(output, 336 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 33);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 352 + i * stride);
			src = src.and(MASK55);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 22));
			tmp.intoArray(output, 352 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 42);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 480 + i * stride);
			src = src.and(MASK55);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 13));
			tmp.intoArray(output, 368 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 51);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 608 + i * stride);
			src = src.and(MASK55);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 4));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 736 + i * stride);
			src = src.and(MASK55);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 59));
			tmp.intoArray(output, 384 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 5);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 864 + i * stride);
			src = src.and(MASK55);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 50));
			tmp.intoArray(output, 400 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 992 + i * stride);
			src = src.and(MASK55);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 41));
			tmp.intoArray(output, 416 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 23);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 16 + i * stride);
			src = src.and(MASK55);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 432 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 144 + i * stride);
			src = src.and(MASK55);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 23));
			tmp.intoArray(output, 448 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 41);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 272 + i * stride);
			src = src.and(MASK55);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 14));
			tmp.intoArray(output, 464 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 50);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 400 + i * stride);
			src = src.and(MASK55);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 5));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 528 + i * stride);
			src = src.and(MASK55);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 60));
			tmp.intoArray(output, 480 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 656 + i * stride);
			src = src.and(MASK55);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 51));
			tmp.intoArray(output, 496 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 13);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 784 + i * stride);
			src = src.and(MASK55);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 42));
			tmp.intoArray(output, 512 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 22);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 912 + i * stride);
			src = src.and(MASK55);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 33));
			tmp.intoArray(output, 528 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 31);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 80 + i * stride);
			src = src.and(MASK55);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 544 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 208 + i * stride);
			src = src.and(MASK55);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 15));
			tmp.intoArray(output, 560 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 49);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 336 + i * stride);
			src = src.and(MASK55);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 6));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 464 + i * stride);
			src = src.and(MASK55);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 61));
			tmp.intoArray(output, 576 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 3);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 592 + i * stride);
			src = src.and(MASK55);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 52));
			tmp.intoArray(output, 592 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 720 + i * stride);
			src = src.and(MASK55);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 43));
			tmp.intoArray(output, 608 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 21);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 848 + i * stride);
			src = src.and(MASK55);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 34));
			tmp.intoArray(output, 624 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 30);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 976 + i * stride);
			src = src.and(MASK55);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 25));
			tmp.intoArray(output, 640 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 39);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 48 + i * stride);
			src = src.and(MASK55);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 656 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 176 + i * stride);
			src = src.and(MASK55);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 7));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 304 + i * stride);
			src = src.and(MASK55);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 62));
			tmp.intoArray(output, 672 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 432 + i * stride);
			src = src.and(MASK55);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 53));
			tmp.intoArray(output, 688 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 11);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 560 + i * stride);
			src = src.and(MASK55);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 44));
			tmp.intoArray(output, 704 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 688 + i * stride);
			src = src.and(MASK55);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 35));
			tmp.intoArray(output, 720 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 29);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 816 + i * stride);
			src = src.and(MASK55);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 26));
			tmp.intoArray(output, 736 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 38);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 944 + i * stride);
			src = src.and(MASK55);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 17));
			tmp.intoArray(output, 752 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 47);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 112 + i * stride);
			src = src.and(MASK55);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 240 + i * stride);
			src = src.and(MASK55);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 63));
			tmp.intoArray(output, 768 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 1);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 368 + i * stride);
			src = src.and(MASK55);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 54));
			tmp.intoArray(output, 784 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 496 + i * stride);
			src = src.and(MASK55);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 45));
			tmp.intoArray(output, 800 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 19);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 624 + i * stride);
			src = src.and(MASK55);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 36));
			tmp.intoArray(output, 816 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 752 + i * stride);
			src = src.and(MASK55);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 27));
			tmp.intoArray(output, 832 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 37);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 880 + i * stride);
			src = src.and(MASK55);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 18));
			tmp.intoArray(output, 848 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 46);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 1008 + i * stride);
			src = src.and(MASK55);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 9));
			tmp.intoArray(output, 864 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 55);
		}
	}

	public static void pack56(long[] input, long[] output) {
		int stride = LongVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 64;
		for (int i = 0; i < 16 / stride; i++) {
			LongVector src;
			LongVector tmp;
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 0 + i * stride);
			src = src.and(MASK56);
			tmp = src;
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 128 + i * stride);
			src = src.and(MASK56);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 56));
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 256 + i * stride);
			src = src.and(MASK56);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 48));
			tmp.intoArray(output, 16 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 384 + i * stride);
			src = src.and(MASK56);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 40));
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 512 + i * stride);
			src = src.and(MASK56);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 48 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 640 + i * stride);
			src = src.and(MASK56);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 768 + i * stride);
			src = src.and(MASK56);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 80 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 896 + i * stride);
			src = src.and(MASK56);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 56);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 64 + i * stride);
			src = src.and(MASK56);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 192 + i * stride);
			src = src.and(MASK56);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 56));
			tmp.intoArray(output, 112 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 320 + i * stride);
			src = src.and(MASK56);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 48));
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 448 + i * stride);
			src = src.and(MASK56);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 40));
			tmp.intoArray(output, 144 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 576 + i * stride);
			src = src.and(MASK56);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 160 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 704 + i * stride);
			src = src.and(MASK56);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 176 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 832 + i * stride);
			src = src.and(MASK56);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 960 + i * stride);
			src = src.and(MASK56);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 208 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 56);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 32 + i * stride);
			src = src.and(MASK56);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 160 + i * stride);
			src = src.and(MASK56);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 56));
			tmp.intoArray(output, 224 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 288 + i * stride);
			src = src.and(MASK56);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 48));
			tmp.intoArray(output, 240 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 416 + i * stride);
			src = src.and(MASK56);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 40));
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 544 + i * stride);
			src = src.and(MASK56);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 272 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 672 + i * stride);
			src = src.and(MASK56);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 288 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 800 + i * stride);
			src = src.and(MASK56);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 304 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 928 + i * stride);
			src = src.and(MASK56);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 56);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 96 + i * stride);
			src = src.and(MASK56);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 224 + i * stride);
			src = src.and(MASK56);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 56));
			tmp.intoArray(output, 336 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 352 + i * stride);
			src = src.and(MASK56);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 48));
			tmp.intoArray(output, 352 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 480 + i * stride);
			src = src.and(MASK56);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 40));
			tmp.intoArray(output, 368 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 608 + i * stride);
			src = src.and(MASK56);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 384 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 736 + i * stride);
			src = src.and(MASK56);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 400 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 864 + i * stride);
			src = src.and(MASK56);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 416 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 992 + i * stride);
			src = src.and(MASK56);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 432 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 56);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 16 + i * stride);
			src = src.and(MASK56);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 144 + i * stride);
			src = src.and(MASK56);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 56));
			tmp.intoArray(output, 448 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 272 + i * stride);
			src = src.and(MASK56);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 48));
			tmp.intoArray(output, 464 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 400 + i * stride);
			src = src.and(MASK56);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 40));
			tmp.intoArray(output, 480 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 528 + i * stride);
			src = src.and(MASK56);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 496 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 656 + i * stride);
			src = src.and(MASK56);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 512 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 784 + i * stride);
			src = src.and(MASK56);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 528 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 912 + i * stride);
			src = src.and(MASK56);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 544 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 56);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 80 + i * stride);
			src = src.and(MASK56);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 208 + i * stride);
			src = src.and(MASK56);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 56));
			tmp.intoArray(output, 560 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 336 + i * stride);
			src = src.and(MASK56);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 48));
			tmp.intoArray(output, 576 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 464 + i * stride);
			src = src.and(MASK56);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 40));
			tmp.intoArray(output, 592 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 592 + i * stride);
			src = src.and(MASK56);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 608 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 720 + i * stride);
			src = src.and(MASK56);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 624 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 848 + i * stride);
			src = src.and(MASK56);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 640 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 976 + i * stride);
			src = src.and(MASK56);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 656 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 56);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 48 + i * stride);
			src = src.and(MASK56);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 176 + i * stride);
			src = src.and(MASK56);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 56));
			tmp.intoArray(output, 672 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 304 + i * stride);
			src = src.and(MASK56);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 48));
			tmp.intoArray(output, 688 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 432 + i * stride);
			src = src.and(MASK56);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 40));
			tmp.intoArray(output, 704 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 560 + i * stride);
			src = src.and(MASK56);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 720 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 688 + i * stride);
			src = src.and(MASK56);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 736 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 816 + i * stride);
			src = src.and(MASK56);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 752 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 944 + i * stride);
			src = src.and(MASK56);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 768 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 56);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 112 + i * stride);
			src = src.and(MASK56);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 240 + i * stride);
			src = src.and(MASK56);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 56));
			tmp.intoArray(output, 784 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 368 + i * stride);
			src = src.and(MASK56);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 48));
			tmp.intoArray(output, 800 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 496 + i * stride);
			src = src.and(MASK56);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 40));
			tmp.intoArray(output, 816 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 624 + i * stride);
			src = src.and(MASK56);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 832 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 752 + i * stride);
			src = src.and(MASK56);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 848 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 880 + i * stride);
			src = src.and(MASK56);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 864 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 1008 + i * stride);
			src = src.and(MASK56);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 880 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 56);
		}
	}

	public static void pack57(long[] input, long[] output) {
		int stride = LongVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 64;
		for (int i = 0; i < 16 / stride; i++) {
			LongVector src;
			LongVector tmp;
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 0 + i * stride);
			src = src.and(MASK57);
			tmp = src;
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 128 + i * stride);
			src = src.and(MASK57);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 57));
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 7);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 256 + i * stride);
			src = src.and(MASK57);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 50));
			tmp.intoArray(output, 16 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 384 + i * stride);
			src = src.and(MASK57);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 43));
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 21);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 512 + i * stride);
			src = src.and(MASK57);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 36));
			tmp.intoArray(output, 48 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 640 + i * stride);
			src = src.and(MASK57);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 29));
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 35);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 768 + i * stride);
			src = src.and(MASK57);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 22));
			tmp.intoArray(output, 80 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 42);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 896 + i * stride);
			src = src.and(MASK57);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 15));
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 49);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 64 + i * stride);
			src = src.and(MASK57);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 112 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 56);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 192 + i * stride);
			src = src.and(MASK57);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 1));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 320 + i * stride);
			src = src.and(MASK57);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 58));
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 448 + i * stride);
			src = src.and(MASK57);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 51));
			tmp.intoArray(output, 144 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 13);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 576 + i * stride);
			src = src.and(MASK57);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 44));
			tmp.intoArray(output, 160 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 704 + i * stride);
			src = src.and(MASK57);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 37));
			tmp.intoArray(output, 176 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 27);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 832 + i * stride);
			src = src.and(MASK57);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 30));
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 34);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 960 + i * stride);
			src = src.and(MASK57);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 23));
			tmp.intoArray(output, 208 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 41);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 32 + i * stride);
			src = src.and(MASK57);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 224 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 160 + i * stride);
			src = src.and(MASK57);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 9));
			tmp.intoArray(output, 240 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 55);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 288 + i * stride);
			src = src.and(MASK57);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 2));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 416 + i * stride);
			src = src.and(MASK57);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 59));
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 5);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 544 + i * stride);
			src = src.and(MASK57);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 52));
			tmp.intoArray(output, 272 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 672 + i * stride);
			src = src.and(MASK57);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 45));
			tmp.intoArray(output, 288 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 19);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 800 + i * stride);
			src = src.and(MASK57);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 38));
			tmp.intoArray(output, 304 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 26);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 928 + i * stride);
			src = src.and(MASK57);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 31));
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 33);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 96 + i * stride);
			src = src.and(MASK57);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 336 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 224 + i * stride);
			src = src.and(MASK57);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 17));
			tmp.intoArray(output, 352 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 47);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 352 + i * stride);
			src = src.and(MASK57);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 10));
			tmp.intoArray(output, 368 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 54);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 480 + i * stride);
			src = src.and(MASK57);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 3));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 608 + i * stride);
			src = src.and(MASK57);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 60));
			tmp.intoArray(output, 384 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 736 + i * stride);
			src = src.and(MASK57);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 53));
			tmp.intoArray(output, 400 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 11);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 864 + i * stride);
			src = src.and(MASK57);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 46));
			tmp.intoArray(output, 416 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 18);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 992 + i * stride);
			src = src.and(MASK57);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 39));
			tmp.intoArray(output, 432 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 25);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 16 + i * stride);
			src = src.and(MASK57);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 448 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 144 + i * stride);
			src = src.and(MASK57);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 25));
			tmp.intoArray(output, 464 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 39);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 272 + i * stride);
			src = src.and(MASK57);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 18));
			tmp.intoArray(output, 480 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 46);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 400 + i * stride);
			src = src.and(MASK57);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 11));
			tmp.intoArray(output, 496 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 53);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 528 + i * stride);
			src = src.and(MASK57);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 4));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 656 + i * stride);
			src = src.and(MASK57);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 61));
			tmp.intoArray(output, 512 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 3);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 784 + i * stride);
			src = src.and(MASK57);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 54));
			tmp.intoArray(output, 528 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 912 + i * stride);
			src = src.and(MASK57);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 47));
			tmp.intoArray(output, 544 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 17);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 80 + i * stride);
			src = src.and(MASK57);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 40));
			tmp.intoArray(output, 560 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 208 + i * stride);
			src = src.and(MASK57);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 33));
			tmp.intoArray(output, 576 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 31);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 336 + i * stride);
			src = src.and(MASK57);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 26));
			tmp.intoArray(output, 592 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 38);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 464 + i * stride);
			src = src.and(MASK57);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 19));
			tmp.intoArray(output, 608 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 45);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 592 + i * stride);
			src = src.and(MASK57);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 624 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 52);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 720 + i * stride);
			src = src.and(MASK57);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 5));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 848 + i * stride);
			src = src.and(MASK57);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 62));
			tmp.intoArray(output, 640 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 976 + i * stride);
			src = src.and(MASK57);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 55));
			tmp.intoArray(output, 656 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 9);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 48 + i * stride);
			src = src.and(MASK57);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 48));
			tmp.intoArray(output, 672 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 176 + i * stride);
			src = src.and(MASK57);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 41));
			tmp.intoArray(output, 688 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 23);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 304 + i * stride);
			src = src.and(MASK57);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 34));
			tmp.intoArray(output, 704 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 30);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 432 + i * stride);
			src = src.and(MASK57);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 27));
			tmp.intoArray(output, 720 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 37);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 560 + i * stride);
			src = src.and(MASK57);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 20));
			tmp.intoArray(output, 736 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 44);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 688 + i * stride);
			src = src.and(MASK57);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 13));
			tmp.intoArray(output, 752 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 51);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 816 + i * stride);
			src = src.and(MASK57);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 6));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 944 + i * stride);
			src = src.and(MASK57);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 63));
			tmp.intoArray(output, 768 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 1);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 112 + i * stride);
			src = src.and(MASK57);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 56));
			tmp.intoArray(output, 784 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 240 + i * stride);
			src = src.and(MASK57);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 49));
			tmp.intoArray(output, 800 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 15);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 368 + i * stride);
			src = src.and(MASK57);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 42));
			tmp.intoArray(output, 816 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 22);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 496 + i * stride);
			src = src.and(MASK57);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 35));
			tmp.intoArray(output, 832 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 29);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 624 + i * stride);
			src = src.and(MASK57);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 28));
			tmp.intoArray(output, 848 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 36);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 752 + i * stride);
			src = src.and(MASK57);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 21));
			tmp.intoArray(output, 864 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 43);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 880 + i * stride);
			src = src.and(MASK57);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 14));
			tmp.intoArray(output, 880 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 50);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 1008 + i * stride);
			src = src.and(MASK57);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 7));
			tmp.intoArray(output, 896 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 57);
		}
	}

	public static void pack58(long[] input, long[] output) {
		int stride = LongVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 64;
		for (int i = 0; i < 16 / stride; i++) {
			LongVector src;
			LongVector tmp;
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 0 + i * stride);
			src = src.and(MASK58);
			tmp = src;
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 128 + i * stride);
			src = src.and(MASK58);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 58));
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 256 + i * stride);
			src = src.and(MASK58);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 52));
			tmp.intoArray(output, 16 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 384 + i * stride);
			src = src.and(MASK58);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 46));
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 18);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 512 + i * stride);
			src = src.and(MASK58);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 40));
			tmp.intoArray(output, 48 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 640 + i * stride);
			src = src.and(MASK58);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 34));
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 30);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 768 + i * stride);
			src = src.and(MASK58);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 28));
			tmp.intoArray(output, 80 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 36);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 896 + i * stride);
			src = src.and(MASK58);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 22));
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 42);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 64 + i * stride);
			src = src.and(MASK58);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 112 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 192 + i * stride);
			src = src.and(MASK58);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 10));
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 54);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 320 + i * stride);
			src = src.and(MASK58);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 4));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 448 + i * stride);
			src = src.and(MASK58);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 62));
			tmp.intoArray(output, 144 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 576 + i * stride);
			src = src.and(MASK58);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 56));
			tmp.intoArray(output, 160 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 704 + i * stride);
			src = src.and(MASK58);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 50));
			tmp.intoArray(output, 176 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 832 + i * stride);
			src = src.and(MASK58);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 44));
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 960 + i * stride);
			src = src.and(MASK58);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 38));
			tmp.intoArray(output, 208 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 26);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 32 + i * stride);
			src = src.and(MASK58);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 224 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 160 + i * stride);
			src = src.and(MASK58);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 26));
			tmp.intoArray(output, 240 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 38);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 288 + i * stride);
			src = src.and(MASK58);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 20));
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 44);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 416 + i * stride);
			src = src.and(MASK58);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 14));
			tmp.intoArray(output, 272 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 50);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 544 + i * stride);
			src = src.and(MASK58);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 288 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 56);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 672 + i * stride);
			src = src.and(MASK58);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 2));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 800 + i * stride);
			src = src.and(MASK58);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 60));
			tmp.intoArray(output, 304 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 928 + i * stride);
			src = src.and(MASK58);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 54));
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 96 + i * stride);
			src = src.and(MASK58);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 48));
			tmp.intoArray(output, 336 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 224 + i * stride);
			src = src.and(MASK58);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 42));
			tmp.intoArray(output, 352 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 22);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 352 + i * stride);
			src = src.and(MASK58);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 36));
			tmp.intoArray(output, 368 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 480 + i * stride);
			src = src.and(MASK58);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 30));
			tmp.intoArray(output, 384 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 34);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 608 + i * stride);
			src = src.and(MASK58);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 400 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 736 + i * stride);
			src = src.and(MASK58);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 18));
			tmp.intoArray(output, 416 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 46);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 864 + i * stride);
			src = src.and(MASK58);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 432 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 52);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 992 + i * stride);
			src = src.and(MASK58);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 6));
			tmp.intoArray(output, 448 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 58);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 16 + i * stride);
			src = src.and(MASK58);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 144 + i * stride);
			src = src.and(MASK58);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 58));
			tmp.intoArray(output, 464 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 272 + i * stride);
			src = src.and(MASK58);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 52));
			tmp.intoArray(output, 480 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 400 + i * stride);
			src = src.and(MASK58);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 46));
			tmp.intoArray(output, 496 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 18);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 528 + i * stride);
			src = src.and(MASK58);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 40));
			tmp.intoArray(output, 512 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 656 + i * stride);
			src = src.and(MASK58);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 34));
			tmp.intoArray(output, 528 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 30);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 784 + i * stride);
			src = src.and(MASK58);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 28));
			tmp.intoArray(output, 544 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 36);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 912 + i * stride);
			src = src.and(MASK58);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 22));
			tmp.intoArray(output, 560 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 42);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 80 + i * stride);
			src = src.and(MASK58);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 576 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 208 + i * stride);
			src = src.and(MASK58);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 10));
			tmp.intoArray(output, 592 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 54);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 336 + i * stride);
			src = src.and(MASK58);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 4));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 464 + i * stride);
			src = src.and(MASK58);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 62));
			tmp.intoArray(output, 608 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 592 + i * stride);
			src = src.and(MASK58);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 56));
			tmp.intoArray(output, 624 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 720 + i * stride);
			src = src.and(MASK58);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 50));
			tmp.intoArray(output, 640 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 848 + i * stride);
			src = src.and(MASK58);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 44));
			tmp.intoArray(output, 656 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 976 + i * stride);
			src = src.and(MASK58);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 38));
			tmp.intoArray(output, 672 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 26);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 48 + i * stride);
			src = src.and(MASK58);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 688 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 176 + i * stride);
			src = src.and(MASK58);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 26));
			tmp.intoArray(output, 704 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 38);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 304 + i * stride);
			src = src.and(MASK58);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 20));
			tmp.intoArray(output, 720 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 44);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 432 + i * stride);
			src = src.and(MASK58);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 14));
			tmp.intoArray(output, 736 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 50);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 560 + i * stride);
			src = src.and(MASK58);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 752 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 56);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 688 + i * stride);
			src = src.and(MASK58);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 2));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 816 + i * stride);
			src = src.and(MASK58);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 60));
			tmp.intoArray(output, 768 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 944 + i * stride);
			src = src.and(MASK58);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 54));
			tmp.intoArray(output, 784 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 112 + i * stride);
			src = src.and(MASK58);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 48));
			tmp.intoArray(output, 800 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 240 + i * stride);
			src = src.and(MASK58);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 42));
			tmp.intoArray(output, 816 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 22);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 368 + i * stride);
			src = src.and(MASK58);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 36));
			tmp.intoArray(output, 832 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 496 + i * stride);
			src = src.and(MASK58);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 30));
			tmp.intoArray(output, 848 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 34);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 624 + i * stride);
			src = src.and(MASK58);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 864 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 752 + i * stride);
			src = src.and(MASK58);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 18));
			tmp.intoArray(output, 880 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 46);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 880 + i * stride);
			src = src.and(MASK58);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 896 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 52);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 1008 + i * stride);
			src = src.and(MASK58);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 6));
			tmp.intoArray(output, 912 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 58);
		}
	}

	public static void pack59(long[] input, long[] output) {
		int stride = LongVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 64;
		for (int i = 0; i < 16 / stride; i++) {
			LongVector src;
			LongVector tmp;
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 0 + i * stride);
			src = src.and(MASK59);
			tmp = src;
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 128 + i * stride);
			src = src.and(MASK59);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 59));
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 5);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 256 + i * stride);
			src = src.and(MASK59);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 54));
			tmp.intoArray(output, 16 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 384 + i * stride);
			src = src.and(MASK59);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 49));
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 15);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 512 + i * stride);
			src = src.and(MASK59);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 44));
			tmp.intoArray(output, 48 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 640 + i * stride);
			src = src.and(MASK59);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 39));
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 25);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 768 + i * stride);
			src = src.and(MASK59);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 34));
			tmp.intoArray(output, 80 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 30);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 896 + i * stride);
			src = src.and(MASK59);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 29));
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 35);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 64 + i * stride);
			src = src.and(MASK59);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 112 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 192 + i * stride);
			src = src.and(MASK59);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 19));
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 45);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 320 + i * stride);
			src = src.and(MASK59);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 14));
			tmp.intoArray(output, 144 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 50);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 448 + i * stride);
			src = src.and(MASK59);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 9));
			tmp.intoArray(output, 160 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 55);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 576 + i * stride);
			src = src.and(MASK59);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 4));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 704 + i * stride);
			src = src.and(MASK59);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 63));
			tmp.intoArray(output, 176 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 1);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 832 + i * stride);
			src = src.and(MASK59);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 58));
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 960 + i * stride);
			src = src.and(MASK59);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 53));
			tmp.intoArray(output, 208 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 11);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 32 + i * stride);
			src = src.and(MASK59);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 48));
			tmp.intoArray(output, 224 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 160 + i * stride);
			src = src.and(MASK59);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 43));
			tmp.intoArray(output, 240 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 21);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 288 + i * stride);
			src = src.and(MASK59);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 38));
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 26);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 416 + i * stride);
			src = src.and(MASK59);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 33));
			tmp.intoArray(output, 272 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 31);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 544 + i * stride);
			src = src.and(MASK59);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 28));
			tmp.intoArray(output, 288 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 36);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 672 + i * stride);
			src = src.and(MASK59);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 23));
			tmp.intoArray(output, 304 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 41);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 800 + i * stride);
			src = src.and(MASK59);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 18));
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 46);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 928 + i * stride);
			src = src.and(MASK59);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 13));
			tmp.intoArray(output, 336 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 51);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 96 + i * stride);
			src = src.and(MASK59);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 352 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 56);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 224 + i * stride);
			src = src.and(MASK59);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 3));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 352 + i * stride);
			src = src.and(MASK59);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 62));
			tmp.intoArray(output, 368 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 480 + i * stride);
			src = src.and(MASK59);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 57));
			tmp.intoArray(output, 384 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 7);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 608 + i * stride);
			src = src.and(MASK59);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 52));
			tmp.intoArray(output, 400 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 736 + i * stride);
			src = src.and(MASK59);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 47));
			tmp.intoArray(output, 416 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 17);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 864 + i * stride);
			src = src.and(MASK59);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 42));
			tmp.intoArray(output, 432 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 22);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 992 + i * stride);
			src = src.and(MASK59);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 37));
			tmp.intoArray(output, 448 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 27);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 16 + i * stride);
			src = src.and(MASK59);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 464 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 144 + i * stride);
			src = src.and(MASK59);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 27));
			tmp.intoArray(output, 480 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 37);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 272 + i * stride);
			src = src.and(MASK59);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 22));
			tmp.intoArray(output, 496 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 42);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 400 + i * stride);
			src = src.and(MASK59);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 17));
			tmp.intoArray(output, 512 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 47);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 528 + i * stride);
			src = src.and(MASK59);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 528 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 52);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 656 + i * stride);
			src = src.and(MASK59);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 7));
			tmp.intoArray(output, 544 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 57);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 784 + i * stride);
			src = src.and(MASK59);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 2));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 912 + i * stride);
			src = src.and(MASK59);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 61));
			tmp.intoArray(output, 560 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 3);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 80 + i * stride);
			src = src.and(MASK59);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 56));
			tmp.intoArray(output, 576 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 208 + i * stride);
			src = src.and(MASK59);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 51));
			tmp.intoArray(output, 592 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 13);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 336 + i * stride);
			src = src.and(MASK59);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 46));
			tmp.intoArray(output, 608 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 18);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 464 + i * stride);
			src = src.and(MASK59);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 41));
			tmp.intoArray(output, 624 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 23);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 592 + i * stride);
			src = src.and(MASK59);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 36));
			tmp.intoArray(output, 640 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 720 + i * stride);
			src = src.and(MASK59);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 31));
			tmp.intoArray(output, 656 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 33);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 848 + i * stride);
			src = src.and(MASK59);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 26));
			tmp.intoArray(output, 672 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 38);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 976 + i * stride);
			src = src.and(MASK59);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 21));
			tmp.intoArray(output, 688 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 43);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 48 + i * stride);
			src = src.and(MASK59);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 704 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 176 + i * stride);
			src = src.and(MASK59);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 11));
			tmp.intoArray(output, 720 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 53);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 304 + i * stride);
			src = src.and(MASK59);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 6));
			tmp.intoArray(output, 736 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 58);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 432 + i * stride);
			src = src.and(MASK59);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 1));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 560 + i * stride);
			src = src.and(MASK59);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 60));
			tmp.intoArray(output, 752 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 688 + i * stride);
			src = src.and(MASK59);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 55));
			tmp.intoArray(output, 768 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 9);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 816 + i * stride);
			src = src.and(MASK59);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 50));
			tmp.intoArray(output, 784 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 944 + i * stride);
			src = src.and(MASK59);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 45));
			tmp.intoArray(output, 800 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 19);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 112 + i * stride);
			src = src.and(MASK59);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 40));
			tmp.intoArray(output, 816 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 240 + i * stride);
			src = src.and(MASK59);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 35));
			tmp.intoArray(output, 832 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 29);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 368 + i * stride);
			src = src.and(MASK59);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 30));
			tmp.intoArray(output, 848 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 34);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 496 + i * stride);
			src = src.and(MASK59);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 25));
			tmp.intoArray(output, 864 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 39);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 624 + i * stride);
			src = src.and(MASK59);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 20));
			tmp.intoArray(output, 880 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 44);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 752 + i * stride);
			src = src.and(MASK59);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 15));
			tmp.intoArray(output, 896 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 49);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 880 + i * stride);
			src = src.and(MASK59);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 10));
			tmp.intoArray(output, 912 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 54);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 1008 + i * stride);
			src = src.and(MASK59);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 5));
			tmp.intoArray(output, 928 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 59);
		}
	}

	public static void pack60(long[] input, long[] output) {
		int stride = LongVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 64;
		for (int i = 0; i < 16 / stride; i++) {
			LongVector src;
			LongVector tmp;
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 0 + i * stride);
			src = src.and(MASK60);
			tmp = src;
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 128 + i * stride);
			src = src.and(MASK60);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 60));
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 256 + i * stride);
			src = src.and(MASK60);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 56));
			tmp.intoArray(output, 16 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 384 + i * stride);
			src = src.and(MASK60);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 52));
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 512 + i * stride);
			src = src.and(MASK60);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 48));
			tmp.intoArray(output, 48 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 640 + i * stride);
			src = src.and(MASK60);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 44));
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 768 + i * stride);
			src = src.and(MASK60);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 40));
			tmp.intoArray(output, 80 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 896 + i * stride);
			src = src.and(MASK60);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 36));
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 64 + i * stride);
			src = src.and(MASK60);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 112 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 192 + i * stride);
			src = src.and(MASK60);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 28));
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 36);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 320 + i * stride);
			src = src.and(MASK60);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 144 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 448 + i * stride);
			src = src.and(MASK60);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 20));
			tmp.intoArray(output, 160 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 44);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 576 + i * stride);
			src = src.and(MASK60);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 176 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 704 + i * stride);
			src = src.and(MASK60);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 52);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 832 + i * stride);
			src = src.and(MASK60);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 208 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 56);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 960 + i * stride);
			src = src.and(MASK60);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 224 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 60);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 32 + i * stride);
			src = src.and(MASK60);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 160 + i * stride);
			src = src.and(MASK60);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 60));
			tmp.intoArray(output, 240 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 288 + i * stride);
			src = src.and(MASK60);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 56));
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 416 + i * stride);
			src = src.and(MASK60);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 52));
			tmp.intoArray(output, 272 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 544 + i * stride);
			src = src.and(MASK60);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 48));
			tmp.intoArray(output, 288 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 672 + i * stride);
			src = src.and(MASK60);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 44));
			tmp.intoArray(output, 304 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 800 + i * stride);
			src = src.and(MASK60);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 40));
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 928 + i * stride);
			src = src.and(MASK60);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 36));
			tmp.intoArray(output, 336 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 96 + i * stride);
			src = src.and(MASK60);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 352 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 224 + i * stride);
			src = src.and(MASK60);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 28));
			tmp.intoArray(output, 368 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 36);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 352 + i * stride);
			src = src.and(MASK60);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 384 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 480 + i * stride);
			src = src.and(MASK60);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 20));
			tmp.intoArray(output, 400 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 44);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 608 + i * stride);
			src = src.and(MASK60);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 416 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 736 + i * stride);
			src = src.and(MASK60);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 432 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 52);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 864 + i * stride);
			src = src.and(MASK60);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 448 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 56);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 992 + i * stride);
			src = src.and(MASK60);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 464 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 60);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 16 + i * stride);
			src = src.and(MASK60);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 144 + i * stride);
			src = src.and(MASK60);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 60));
			tmp.intoArray(output, 480 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 272 + i * stride);
			src = src.and(MASK60);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 56));
			tmp.intoArray(output, 496 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 400 + i * stride);
			src = src.and(MASK60);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 52));
			tmp.intoArray(output, 512 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 528 + i * stride);
			src = src.and(MASK60);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 48));
			tmp.intoArray(output, 528 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 656 + i * stride);
			src = src.and(MASK60);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 44));
			tmp.intoArray(output, 544 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 784 + i * stride);
			src = src.and(MASK60);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 40));
			tmp.intoArray(output, 560 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 912 + i * stride);
			src = src.and(MASK60);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 36));
			tmp.intoArray(output, 576 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 80 + i * stride);
			src = src.and(MASK60);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 592 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 208 + i * stride);
			src = src.and(MASK60);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 28));
			tmp.intoArray(output, 608 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 36);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 336 + i * stride);
			src = src.and(MASK60);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 624 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 464 + i * stride);
			src = src.and(MASK60);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 20));
			tmp.intoArray(output, 640 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 44);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 592 + i * stride);
			src = src.and(MASK60);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 656 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 720 + i * stride);
			src = src.and(MASK60);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 672 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 52);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 848 + i * stride);
			src = src.and(MASK60);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 688 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 56);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 976 + i * stride);
			src = src.and(MASK60);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 704 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 60);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 48 + i * stride);
			src = src.and(MASK60);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 176 + i * stride);
			src = src.and(MASK60);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 60));
			tmp.intoArray(output, 720 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 304 + i * stride);
			src = src.and(MASK60);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 56));
			tmp.intoArray(output, 736 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 432 + i * stride);
			src = src.and(MASK60);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 52));
			tmp.intoArray(output, 752 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 560 + i * stride);
			src = src.and(MASK60);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 48));
			tmp.intoArray(output, 768 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 688 + i * stride);
			src = src.and(MASK60);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 44));
			tmp.intoArray(output, 784 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 816 + i * stride);
			src = src.and(MASK60);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 40));
			tmp.intoArray(output, 800 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 944 + i * stride);
			src = src.and(MASK60);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 36));
			tmp.intoArray(output, 816 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 112 + i * stride);
			src = src.and(MASK60);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 832 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 240 + i * stride);
			src = src.and(MASK60);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 28));
			tmp.intoArray(output, 848 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 36);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 368 + i * stride);
			src = src.and(MASK60);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 864 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 496 + i * stride);
			src = src.and(MASK60);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 20));
			tmp.intoArray(output, 880 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 44);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 624 + i * stride);
			src = src.and(MASK60);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 896 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 752 + i * stride);
			src = src.and(MASK60);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 912 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 52);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 880 + i * stride);
			src = src.and(MASK60);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 928 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 56);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 1008 + i * stride);
			src = src.and(MASK60);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 944 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 60);
		}
	}

	public static void pack61(long[] input, long[] output) {
		int stride = LongVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 64;
		for (int i = 0; i < 16 / stride; i++) {
			LongVector src;
			LongVector tmp;
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 0 + i * stride);
			src = src.and(MASK61);
			tmp = src;
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 128 + i * stride);
			src = src.and(MASK61);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 61));
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 3);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 256 + i * stride);
			src = src.and(MASK61);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 58));
			tmp.intoArray(output, 16 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 384 + i * stride);
			src = src.and(MASK61);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 55));
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 9);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 512 + i * stride);
			src = src.and(MASK61);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 52));
			tmp.intoArray(output, 48 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 640 + i * stride);
			src = src.and(MASK61);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 49));
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 15);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 768 + i * stride);
			src = src.and(MASK61);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 46));
			tmp.intoArray(output, 80 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 18);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 896 + i * stride);
			src = src.and(MASK61);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 43));
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 21);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 64 + i * stride);
			src = src.and(MASK61);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 40));
			tmp.intoArray(output, 112 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 192 + i * stride);
			src = src.and(MASK61);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 37));
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 27);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 320 + i * stride);
			src = src.and(MASK61);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 34));
			tmp.intoArray(output, 144 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 30);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 448 + i * stride);
			src = src.and(MASK61);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 31));
			tmp.intoArray(output, 160 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 33);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 576 + i * stride);
			src = src.and(MASK61);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 28));
			tmp.intoArray(output, 176 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 36);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 704 + i * stride);
			src = src.and(MASK61);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 25));
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 39);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 832 + i * stride);
			src = src.and(MASK61);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 22));
			tmp.intoArray(output, 208 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 42);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 960 + i * stride);
			src = src.and(MASK61);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 19));
			tmp.intoArray(output, 224 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 45);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 32 + i * stride);
			src = src.and(MASK61);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 240 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 160 + i * stride);
			src = src.and(MASK61);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 13));
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 51);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 288 + i * stride);
			src = src.and(MASK61);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 10));
			tmp.intoArray(output, 272 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 54);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 416 + i * stride);
			src = src.and(MASK61);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 7));
			tmp.intoArray(output, 288 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 57);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 544 + i * stride);
			src = src.and(MASK61);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 304 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 60);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 672 + i * stride);
			src = src.and(MASK61);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 1));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 800 + i * stride);
			src = src.and(MASK61);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 62));
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 928 + i * stride);
			src = src.and(MASK61);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 59));
			tmp.intoArray(output, 336 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 5);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 96 + i * stride);
			src = src.and(MASK61);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 56));
			tmp.intoArray(output, 352 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 224 + i * stride);
			src = src.and(MASK61);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 53));
			tmp.intoArray(output, 368 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 11);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 352 + i * stride);
			src = src.and(MASK61);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 50));
			tmp.intoArray(output, 384 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 480 + i * stride);
			src = src.and(MASK61);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 47));
			tmp.intoArray(output, 400 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 17);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 608 + i * stride);
			src = src.and(MASK61);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 44));
			tmp.intoArray(output, 416 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 736 + i * stride);
			src = src.and(MASK61);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 41));
			tmp.intoArray(output, 432 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 23);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 864 + i * stride);
			src = src.and(MASK61);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 38));
			tmp.intoArray(output, 448 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 26);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 992 + i * stride);
			src = src.and(MASK61);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 35));
			tmp.intoArray(output, 464 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 29);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 16 + i * stride);
			src = src.and(MASK61);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 480 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 144 + i * stride);
			src = src.and(MASK61);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 29));
			tmp.intoArray(output, 496 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 35);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 272 + i * stride);
			src = src.and(MASK61);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 26));
			tmp.intoArray(output, 512 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 38);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 400 + i * stride);
			src = src.and(MASK61);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 23));
			tmp.intoArray(output, 528 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 41);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 528 + i * stride);
			src = src.and(MASK61);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 20));
			tmp.intoArray(output, 544 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 44);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 656 + i * stride);
			src = src.and(MASK61);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 17));
			tmp.intoArray(output, 560 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 47);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 784 + i * stride);
			src = src.and(MASK61);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 14));
			tmp.intoArray(output, 576 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 50);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 912 + i * stride);
			src = src.and(MASK61);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 11));
			tmp.intoArray(output, 592 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 53);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 80 + i * stride);
			src = src.and(MASK61);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 608 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 56);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 208 + i * stride);
			src = src.and(MASK61);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 5));
			tmp.intoArray(output, 624 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 59);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 336 + i * stride);
			src = src.and(MASK61);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 2));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 464 + i * stride);
			src = src.and(MASK61);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 63));
			tmp.intoArray(output, 640 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 1);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 592 + i * stride);
			src = src.and(MASK61);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 60));
			tmp.intoArray(output, 656 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 720 + i * stride);
			src = src.and(MASK61);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 57));
			tmp.intoArray(output, 672 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 7);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 848 + i * stride);
			src = src.and(MASK61);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 54));
			tmp.intoArray(output, 688 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 976 + i * stride);
			src = src.and(MASK61);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 51));
			tmp.intoArray(output, 704 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 13);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 48 + i * stride);
			src = src.and(MASK61);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 48));
			tmp.intoArray(output, 720 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 176 + i * stride);
			src = src.and(MASK61);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 45));
			tmp.intoArray(output, 736 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 19);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 304 + i * stride);
			src = src.and(MASK61);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 42));
			tmp.intoArray(output, 752 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 22);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 432 + i * stride);
			src = src.and(MASK61);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 39));
			tmp.intoArray(output, 768 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 25);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 560 + i * stride);
			src = src.and(MASK61);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 36));
			tmp.intoArray(output, 784 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 688 + i * stride);
			src = src.and(MASK61);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 33));
			tmp.intoArray(output, 800 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 31);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 816 + i * stride);
			src = src.and(MASK61);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 30));
			tmp.intoArray(output, 816 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 34);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 944 + i * stride);
			src = src.and(MASK61);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 27));
			tmp.intoArray(output, 832 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 37);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 112 + i * stride);
			src = src.and(MASK61);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 848 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 240 + i * stride);
			src = src.and(MASK61);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 21));
			tmp.intoArray(output, 864 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 43);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 368 + i * stride);
			src = src.and(MASK61);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 18));
			tmp.intoArray(output, 880 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 46);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 496 + i * stride);
			src = src.and(MASK61);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 15));
			tmp.intoArray(output, 896 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 49);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 624 + i * stride);
			src = src.and(MASK61);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 912 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 52);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 752 + i * stride);
			src = src.and(MASK61);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 9));
			tmp.intoArray(output, 928 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 55);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 880 + i * stride);
			src = src.and(MASK61);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 6));
			tmp.intoArray(output, 944 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 58);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 1008 + i * stride);
			src = src.and(MASK61);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 3));
			tmp.intoArray(output, 960 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 61);
		}
	}

	public static void pack62(long[] input, long[] output) {
		int stride = LongVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 64;
		for (int i = 0; i < 16 / stride; i++) {
			LongVector src;
			LongVector tmp;
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 0 + i * stride);
			src = src.and(MASK62);
			tmp = src;
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 128 + i * stride);
			src = src.and(MASK62);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 62));
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 256 + i * stride);
			src = src.and(MASK62);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 60));
			tmp.intoArray(output, 16 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 384 + i * stride);
			src = src.and(MASK62);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 58));
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 512 + i * stride);
			src = src.and(MASK62);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 56));
			tmp.intoArray(output, 48 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 640 + i * stride);
			src = src.and(MASK62);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 54));
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 768 + i * stride);
			src = src.and(MASK62);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 52));
			tmp.intoArray(output, 80 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 896 + i * stride);
			src = src.and(MASK62);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 50));
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 64 + i * stride);
			src = src.and(MASK62);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 48));
			tmp.intoArray(output, 112 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 192 + i * stride);
			src = src.and(MASK62);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 46));
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 18);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 320 + i * stride);
			src = src.and(MASK62);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 44));
			tmp.intoArray(output, 144 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 448 + i * stride);
			src = src.and(MASK62);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 42));
			tmp.intoArray(output, 160 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 22);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 576 + i * stride);
			src = src.and(MASK62);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 40));
			tmp.intoArray(output, 176 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 704 + i * stride);
			src = src.and(MASK62);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 38));
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 26);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 832 + i * stride);
			src = src.and(MASK62);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 36));
			tmp.intoArray(output, 208 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 960 + i * stride);
			src = src.and(MASK62);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 34));
			tmp.intoArray(output, 224 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 30);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 32 + i * stride);
			src = src.and(MASK62);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 240 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 160 + i * stride);
			src = src.and(MASK62);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 30));
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 34);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 288 + i * stride);
			src = src.and(MASK62);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 28));
			tmp.intoArray(output, 272 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 36);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 416 + i * stride);
			src = src.and(MASK62);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 26));
			tmp.intoArray(output, 288 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 38);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 544 + i * stride);
			src = src.and(MASK62);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 304 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 672 + i * stride);
			src = src.and(MASK62);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 22));
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 42);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 800 + i * stride);
			src = src.and(MASK62);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 20));
			tmp.intoArray(output, 336 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 44);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 928 + i * stride);
			src = src.and(MASK62);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 18));
			tmp.intoArray(output, 352 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 46);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 96 + i * stride);
			src = src.and(MASK62);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 368 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 224 + i * stride);
			src = src.and(MASK62);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 14));
			tmp.intoArray(output, 384 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 50);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 352 + i * stride);
			src = src.and(MASK62);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 400 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 52);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 480 + i * stride);
			src = src.and(MASK62);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 10));
			tmp.intoArray(output, 416 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 54);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 608 + i * stride);
			src = src.and(MASK62);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 432 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 56);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 736 + i * stride);
			src = src.and(MASK62);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 6));
			tmp.intoArray(output, 448 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 58);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 864 + i * stride);
			src = src.and(MASK62);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 464 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 60);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 992 + i * stride);
			src = src.and(MASK62);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 2));
			tmp.intoArray(output, 480 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 62);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 16 + i * stride);
			src = src.and(MASK62);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 144 + i * stride);
			src = src.and(MASK62);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 62));
			tmp.intoArray(output, 496 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 272 + i * stride);
			src = src.and(MASK62);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 60));
			tmp.intoArray(output, 512 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 400 + i * stride);
			src = src.and(MASK62);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 58));
			tmp.intoArray(output, 528 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 528 + i * stride);
			src = src.and(MASK62);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 56));
			tmp.intoArray(output, 544 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 656 + i * stride);
			src = src.and(MASK62);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 54));
			tmp.intoArray(output, 560 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 784 + i * stride);
			src = src.and(MASK62);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 52));
			tmp.intoArray(output, 576 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 912 + i * stride);
			src = src.and(MASK62);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 50));
			tmp.intoArray(output, 592 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 80 + i * stride);
			src = src.and(MASK62);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 48));
			tmp.intoArray(output, 608 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 208 + i * stride);
			src = src.and(MASK62);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 46));
			tmp.intoArray(output, 624 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 18);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 336 + i * stride);
			src = src.and(MASK62);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 44));
			tmp.intoArray(output, 640 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 464 + i * stride);
			src = src.and(MASK62);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 42));
			tmp.intoArray(output, 656 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 22);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 592 + i * stride);
			src = src.and(MASK62);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 40));
			tmp.intoArray(output, 672 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 720 + i * stride);
			src = src.and(MASK62);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 38));
			tmp.intoArray(output, 688 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 26);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 848 + i * stride);
			src = src.and(MASK62);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 36));
			tmp.intoArray(output, 704 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 976 + i * stride);
			src = src.and(MASK62);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 34));
			tmp.intoArray(output, 720 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 30);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 48 + i * stride);
			src = src.and(MASK62);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 736 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 176 + i * stride);
			src = src.and(MASK62);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 30));
			tmp.intoArray(output, 752 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 34);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 304 + i * stride);
			src = src.and(MASK62);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 28));
			tmp.intoArray(output, 768 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 36);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 432 + i * stride);
			src = src.and(MASK62);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 26));
			tmp.intoArray(output, 784 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 38);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 560 + i * stride);
			src = src.and(MASK62);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 800 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 688 + i * stride);
			src = src.and(MASK62);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 22));
			tmp.intoArray(output, 816 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 42);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 816 + i * stride);
			src = src.and(MASK62);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 20));
			tmp.intoArray(output, 832 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 44);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 944 + i * stride);
			src = src.and(MASK62);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 18));
			tmp.intoArray(output, 848 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 46);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 112 + i * stride);
			src = src.and(MASK62);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 864 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 240 + i * stride);
			src = src.and(MASK62);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 14));
			tmp.intoArray(output, 880 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 50);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 368 + i * stride);
			src = src.and(MASK62);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 896 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 52);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 496 + i * stride);
			src = src.and(MASK62);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 10));
			tmp.intoArray(output, 912 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 54);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 624 + i * stride);
			src = src.and(MASK62);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 928 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 56);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 752 + i * stride);
			src = src.and(MASK62);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 6));
			tmp.intoArray(output, 944 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 58);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 880 + i * stride);
			src = src.and(MASK62);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 960 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 60);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 1008 + i * stride);
			src = src.and(MASK62);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 2));
			tmp.intoArray(output, 976 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 62);
		}
	}

	public static void pack63(long[] input, long[] output) {
		int stride = LongVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 64;
		for (int i = 0; i < 16 / stride; i++) {
			LongVector src;
			LongVector tmp;
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 0 + i * stride);
			src = src.and(MASK63);
			tmp = src;
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 128 + i * stride);
			src = src.and(MASK63);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 63));
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 1);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 256 + i * stride);
			src = src.and(MASK63);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 62));
			tmp.intoArray(output, 16 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 384 + i * stride);
			src = src.and(MASK63);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 61));
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 3);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 512 + i * stride);
			src = src.and(MASK63);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 60));
			tmp.intoArray(output, 48 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 640 + i * stride);
			src = src.and(MASK63);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 59));
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 5);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 768 + i * stride);
			src = src.and(MASK63);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 58));
			tmp.intoArray(output, 80 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 896 + i * stride);
			src = src.and(MASK63);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 57));
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 7);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 64 + i * stride);
			src = src.and(MASK63);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 56));
			tmp.intoArray(output, 112 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 192 + i * stride);
			src = src.and(MASK63);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 55));
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 9);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 320 + i * stride);
			src = src.and(MASK63);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 54));
			tmp.intoArray(output, 144 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 448 + i * stride);
			src = src.and(MASK63);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 53));
			tmp.intoArray(output, 160 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 11);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 576 + i * stride);
			src = src.and(MASK63);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 52));
			tmp.intoArray(output, 176 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 704 + i * stride);
			src = src.and(MASK63);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 51));
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 13);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 832 + i * stride);
			src = src.and(MASK63);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 50));
			tmp.intoArray(output, 208 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 960 + i * stride);
			src = src.and(MASK63);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 49));
			tmp.intoArray(output, 224 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 15);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 32 + i * stride);
			src = src.and(MASK63);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 48));
			tmp.intoArray(output, 240 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 160 + i * stride);
			src = src.and(MASK63);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 47));
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 17);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 288 + i * stride);
			src = src.and(MASK63);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 46));
			tmp.intoArray(output, 272 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 18);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 416 + i * stride);
			src = src.and(MASK63);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 45));
			tmp.intoArray(output, 288 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 19);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 544 + i * stride);
			src = src.and(MASK63);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 44));
			tmp.intoArray(output, 304 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 672 + i * stride);
			src = src.and(MASK63);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 43));
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 21);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 800 + i * stride);
			src = src.and(MASK63);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 42));
			tmp.intoArray(output, 336 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 22);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 928 + i * stride);
			src = src.and(MASK63);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 41));
			tmp.intoArray(output, 352 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 23);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 96 + i * stride);
			src = src.and(MASK63);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 40));
			tmp.intoArray(output, 368 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 224 + i * stride);
			src = src.and(MASK63);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 39));
			tmp.intoArray(output, 384 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 25);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 352 + i * stride);
			src = src.and(MASK63);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 38));
			tmp.intoArray(output, 400 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 26);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 480 + i * stride);
			src = src.and(MASK63);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 37));
			tmp.intoArray(output, 416 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 27);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 608 + i * stride);
			src = src.and(MASK63);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 36));
			tmp.intoArray(output, 432 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 736 + i * stride);
			src = src.and(MASK63);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 35));
			tmp.intoArray(output, 448 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 29);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 864 + i * stride);
			src = src.and(MASK63);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 34));
			tmp.intoArray(output, 464 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 30);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 992 + i * stride);
			src = src.and(MASK63);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 33));
			tmp.intoArray(output, 480 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 31);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 16 + i * stride);
			src = src.and(MASK63);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 496 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 144 + i * stride);
			src = src.and(MASK63);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 31));
			tmp.intoArray(output, 512 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 33);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 272 + i * stride);
			src = src.and(MASK63);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 30));
			tmp.intoArray(output, 528 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 34);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 400 + i * stride);
			src = src.and(MASK63);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 29));
			tmp.intoArray(output, 544 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 35);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 528 + i * stride);
			src = src.and(MASK63);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 28));
			tmp.intoArray(output, 560 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 36);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 656 + i * stride);
			src = src.and(MASK63);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 27));
			tmp.intoArray(output, 576 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 37);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 784 + i * stride);
			src = src.and(MASK63);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 26));
			tmp.intoArray(output, 592 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 38);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 912 + i * stride);
			src = src.and(MASK63);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 25));
			tmp.intoArray(output, 608 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 39);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 80 + i * stride);
			src = src.and(MASK63);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 624 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 208 + i * stride);
			src = src.and(MASK63);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 23));
			tmp.intoArray(output, 640 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 41);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 336 + i * stride);
			src = src.and(MASK63);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 22));
			tmp.intoArray(output, 656 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 42);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 464 + i * stride);
			src = src.and(MASK63);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 21));
			tmp.intoArray(output, 672 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 43);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 592 + i * stride);
			src = src.and(MASK63);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 20));
			tmp.intoArray(output, 688 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 44);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 720 + i * stride);
			src = src.and(MASK63);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 19));
			tmp.intoArray(output, 704 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 45);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 848 + i * stride);
			src = src.and(MASK63);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 18));
			tmp.intoArray(output, 720 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 46);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 976 + i * stride);
			src = src.and(MASK63);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 17));
			tmp.intoArray(output, 736 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 47);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 48 + i * stride);
			src = src.and(MASK63);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 752 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 176 + i * stride);
			src = src.and(MASK63);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 15));
			tmp.intoArray(output, 768 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 49);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 304 + i * stride);
			src = src.and(MASK63);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 14));
			tmp.intoArray(output, 784 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 50);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 432 + i * stride);
			src = src.and(MASK63);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 13));
			tmp.intoArray(output, 800 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 51);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 560 + i * stride);
			src = src.and(MASK63);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 816 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 52);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 688 + i * stride);
			src = src.and(MASK63);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 11));
			tmp.intoArray(output, 832 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 53);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 816 + i * stride);
			src = src.and(MASK63);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 10));
			tmp.intoArray(output, 848 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 54);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 944 + i * stride);
			src = src.and(MASK63);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 9));
			tmp.intoArray(output, 864 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 55);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 112 + i * stride);
			src = src.and(MASK63);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 880 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 56);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 240 + i * stride);
			src = src.and(MASK63);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 7));
			tmp.intoArray(output, 896 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 57);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 368 + i * stride);
			src = src.and(MASK63);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 6));
			tmp.intoArray(output, 912 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 58);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 496 + i * stride);
			src = src.and(MASK63);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 5));
			tmp.intoArray(output, 928 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 59);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 624 + i * stride);
			src = src.and(MASK63);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 944 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 60);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 752 + i * stride);
			src = src.and(MASK63);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 3));
			tmp.intoArray(output, 960 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 61);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 880 + i * stride);
			src = src.and(MASK63);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 2));
			tmp.intoArray(output, 976 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 62);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 1008 + i * stride);
			src = src.and(MASK63);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 1));
			tmp.intoArray(output, 992 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 63);
		}
	}

	public static void pack64(long[] input, long[] output) {
		int stride = LongVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 64;
		for (int i = 0; i < 16 / stride; i++) {
			LongVector src;
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 0 + i * stride);
			src.intoArray(output, 0 + i * stride);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 128 + i * stride);
			src.intoArray(output, 16 + i * stride);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 256 + i * stride);
			src.intoArray(output, 32 + i * stride);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 384 + i * stride);
			src.intoArray(output, 48 + i * stride);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 512 + i * stride);
			src.intoArray(output, 64 + i * stride);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 640 + i * stride);
			src.intoArray(output, 80 + i * stride);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 768 + i * stride);
			src.intoArray(output, 96 + i * stride);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 896 + i * stride);
			src.intoArray(output, 112 + i * stride);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 64 + i * stride);
			src.intoArray(output, 128 + i * stride);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 192 + i * stride);
			src.intoArray(output, 144 + i * stride);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 320 + i * stride);
			src.intoArray(output, 160 + i * stride);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 448 + i * stride);
			src.intoArray(output, 176 + i * stride);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 576 + i * stride);
			src.intoArray(output, 192 + i * stride);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 704 + i * stride);
			src.intoArray(output, 208 + i * stride);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 832 + i * stride);
			src.intoArray(output, 224 + i * stride);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 960 + i * stride);
			src.intoArray(output, 240 + i * stride);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 32 + i * stride);
			src.intoArray(output, 256 + i * stride);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 160 + i * stride);
			src.intoArray(output, 272 + i * stride);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 288 + i * stride);
			src.intoArray(output, 288 + i * stride);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 416 + i * stride);
			src.intoArray(output, 304 + i * stride);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 544 + i * stride);
			src.intoArray(output, 320 + i * stride);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 672 + i * stride);
			src.intoArray(output, 336 + i * stride);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 800 + i * stride);
			src.intoArray(output, 352 + i * stride);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 928 + i * stride);
			src.intoArray(output, 368 + i * stride);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 96 + i * stride);
			src.intoArray(output, 384 + i * stride);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 224 + i * stride);
			src.intoArray(output, 400 + i * stride);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 352 + i * stride);
			src.intoArray(output, 416 + i * stride);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 480 + i * stride);
			src.intoArray(output, 432 + i * stride);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 608 + i * stride);
			src.intoArray(output, 448 + i * stride);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 736 + i * stride);
			src.intoArray(output, 464 + i * stride);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 864 + i * stride);
			src.intoArray(output, 480 + i * stride);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 992 + i * stride);
			src.intoArray(output, 496 + i * stride);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 16 + i * stride);
			src.intoArray(output, 512 + i * stride);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 144 + i * stride);
			src.intoArray(output, 528 + i * stride);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 272 + i * stride);
			src.intoArray(output, 544 + i * stride);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 400 + i * stride);
			src.intoArray(output, 560 + i * stride);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 528 + i * stride);
			src.intoArray(output, 576 + i * stride);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 656 + i * stride);
			src.intoArray(output, 592 + i * stride);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 784 + i * stride);
			src.intoArray(output, 608 + i * stride);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 912 + i * stride);
			src.intoArray(output, 624 + i * stride);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 80 + i * stride);
			src.intoArray(output, 640 + i * stride);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 208 + i * stride);
			src.intoArray(output, 656 + i * stride);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 336 + i * stride);
			src.intoArray(output, 672 + i * stride);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 464 + i * stride);
			src.intoArray(output, 688 + i * stride);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 592 + i * stride);
			src.intoArray(output, 704 + i * stride);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 720 + i * stride);
			src.intoArray(output, 720 + i * stride);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 848 + i * stride);
			src.intoArray(output, 736 + i * stride);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 976 + i * stride);
			src.intoArray(output, 752 + i * stride);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 48 + i * stride);
			src.intoArray(output, 768 + i * stride);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 176 + i * stride);
			src.intoArray(output, 784 + i * stride);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 304 + i * stride);
			src.intoArray(output, 800 + i * stride);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 432 + i * stride);
			src.intoArray(output, 816 + i * stride);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 560 + i * stride);
			src.intoArray(output, 832 + i * stride);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 688 + i * stride);
			src.intoArray(output, 848 + i * stride);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 816 + i * stride);
			src.intoArray(output, 864 + i * stride);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 944 + i * stride);
			src.intoArray(output, 880 + i * stride);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 112 + i * stride);
			src.intoArray(output, 896 + i * stride);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 240 + i * stride);
			src.intoArray(output, 912 + i * stride);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 368 + i * stride);
			src.intoArray(output, 928 + i * stride);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 496 + i * stride);
			src.intoArray(output, 944 + i * stride);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 624 + i * stride);
			src.intoArray(output, 960 + i * stride);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 752 + i * stride);
			src.intoArray(output, 976 + i * stride);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 880 + i * stride);
			src.intoArray(output, 992 + i * stride);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 1008 + i * stride);
			src.intoArray(output, 1008 + i * stride);
		}
	}

	public static void pack(long[] input, int width, long[] output) {
		switch (width) {
			case 0: pack0(input, output); break;
			case 1: pack1(input, output); break;
			case 2: pack2(input, output); break;
			case 3: pack3(input, output); break;
			case 4: pack4(input, output); break;
			case 5: pack5(input, output); break;
			case 6: pack6(input, output); break;
			case 7: pack7(input, output); break;
			case 8: pack8(input, output); break;
			case 9: pack9(input, output); break;
			case 10: pack10(input, output); break;
			case 11: pack11(input, output); break;
			case 12: pack12(input, output); break;
			case 13: pack13(input, output); break;
			case 14: pack14(input, output); break;
			case 15: pack15(input, output); break;
			case 16: pack16(input, output); break;
			case 17: pack17(input, output); break;
			case 18: pack18(input, output); break;
			case 19: pack19(input, output); break;
			case 20: pack20(input, output); break;
			case 21: pack21(input, output); break;
			case 22: pack22(input, output); break;
			case 23: pack23(input, output); break;
			case 24: pack24(input, output); break;
			case 25: pack25(input, output); break;
			case 26: pack26(input, output); break;
			case 27: pack27(input, output); break;
			case 28: pack28(input, output); break;
			case 29: pack29(input, output); break;
			case 30: pack30(input, output); break;
			case 31: pack31(input, output); break;
			case 32: pack32(input, output); break;
			case 33: pack33(input, output); break;
			case 34: pack34(input, output); break;
			case 35: pack35(input, output); break;
			case 36: pack36(input, output); break;
			case 37: pack37(input, output); break;
			case 38: pack38(input, output); break;
			case 39: pack39(input, output); break;
			case 40: pack40(input, output); break;
			case 41: pack41(input, output); break;
			case 42: pack42(input, output); break;
			case 43: pack43(input, output); break;
			case 44: pack44(input, output); break;
			case 45: pack45(input, output); break;
			case 46: pack46(input, output); break;
			case 47: pack47(input, output); break;
			case 48: pack48(input, output); break;
			case 49: pack49(input, output); break;
			case 50: pack50(input, output); break;
			case 51: pack51(input, output); break;
			case 52: pack52(input, output); break;
			case 53: pack53(input, output); break;
			case 54: pack54(input, output); break;
			case 55: pack55(input, output); break;
			case 56: pack56(input, output); break;
			case 57: pack57(input, output); break;
			case 58: pack58(input, output); break;
			case 59: pack59(input, output); break;
			case 60: pack60(input, output); break;
			case 61: pack61(input, output); break;
			case 62: pack62(input, output); break;
			case 63: pack63(input, output); break;
			case 64: pack64(input, output); break;
			default: throw new IllegalArgumentException();
		}
	}

	public static void unpack0(long[] input, long[] output) {
		int stride = LongVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 64;
		for (int i = 0; i < 16 / stride; i++) {
			Arrays.fill(output, (long) 0);
		}
	}

	public static void unpack1(long[] input, long[] output) {
		int stride = LongVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 64;
		for (int i = 0; i < 16 / stride; i++) {
			LongVector src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, i * stride);
			LongVector tmp;
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK1);
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 1).and(MASK1);
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2).and(MASK1);
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 3).and(MASK1);
			tmp.intoArray(output, 384 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4).and(MASK1);
			tmp.intoArray(output, 512 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 5).and(MASK1);
			tmp.intoArray(output, 640 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6).and(MASK1);
			tmp.intoArray(output, 768 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 7).and(MASK1);
			tmp.intoArray(output, 896 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK1);
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 9).and(MASK1);
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10).and(MASK1);
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 11).and(MASK1);
			tmp.intoArray(output, 448 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12).and(MASK1);
			tmp.intoArray(output, 576 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 13).and(MASK1);
			tmp.intoArray(output, 704 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14).and(MASK1);
			tmp.intoArray(output, 832 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 15).and(MASK1);
			tmp.intoArray(output, 960 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK1);
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 17).and(MASK1);
			tmp.intoArray(output, 160 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 18).and(MASK1);
			tmp.intoArray(output, 288 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 19).and(MASK1);
			tmp.intoArray(output, 416 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20).and(MASK1);
			tmp.intoArray(output, 544 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 21).and(MASK1);
			tmp.intoArray(output, 672 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 22).and(MASK1);
			tmp.intoArray(output, 800 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 23).and(MASK1);
			tmp.intoArray(output, 928 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK1);
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 25).and(MASK1);
			tmp.intoArray(output, 224 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 26).and(MASK1);
			tmp.intoArray(output, 352 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 27).and(MASK1);
			tmp.intoArray(output, 480 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28).and(MASK1);
			tmp.intoArray(output, 608 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 29).and(MASK1);
			tmp.intoArray(output, 736 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 30).and(MASK1);
			tmp.intoArray(output, 864 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 31).and(MASK1);
			tmp.intoArray(output, 992 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK1);
			tmp.intoArray(output, 16 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 33).and(MASK1);
			tmp.intoArray(output, 144 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 34).and(MASK1);
			tmp.intoArray(output, 272 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 35).and(MASK1);
			tmp.intoArray(output, 400 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 36).and(MASK1);
			tmp.intoArray(output, 528 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 37).and(MASK1);
			tmp.intoArray(output, 656 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 38).and(MASK1);
			tmp.intoArray(output, 784 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 39).and(MASK1);
			tmp.intoArray(output, 912 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40).and(MASK1);
			tmp.intoArray(output, 80 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 41).and(MASK1);
			tmp.intoArray(output, 208 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 42).and(MASK1);
			tmp.intoArray(output, 336 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 43).and(MASK1);
			tmp.intoArray(output, 464 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 44).and(MASK1);
			tmp.intoArray(output, 592 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 45).and(MASK1);
			tmp.intoArray(output, 720 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 46).and(MASK1);
			tmp.intoArray(output, 848 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 47).and(MASK1);
			tmp.intoArray(output, 976 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48).and(MASK1);
			tmp.intoArray(output, 48 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 49).and(MASK1);
			tmp.intoArray(output, 176 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 50).and(MASK1);
			tmp.intoArray(output, 304 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 51).and(MASK1);
			tmp.intoArray(output, 432 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 52).and(MASK1);
			tmp.intoArray(output, 560 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 53).and(MASK1);
			tmp.intoArray(output, 688 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 54).and(MASK1);
			tmp.intoArray(output, 816 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 55).and(MASK1);
			tmp.intoArray(output, 944 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 56).and(MASK1);
			tmp.intoArray(output, 112 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 57).and(MASK1);
			tmp.intoArray(output, 240 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 58).and(MASK1);
			tmp.intoArray(output, 368 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 59).and(MASK1);
			tmp.intoArray(output, 496 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 60).and(MASK1);
			tmp.intoArray(output, 624 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 61).and(MASK1);
			tmp.intoArray(output, 752 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 62).and(MASK1);
			tmp.intoArray(output, 880 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 63).and(MASK1);
			tmp.intoArray(output, 1008 + i * stride);
		}
	}

	public static void unpack2(long[] input, long[] output) {
		int stride = LongVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 64;
		for (int i = 0; i < 16 / stride; i++) {
			LongVector src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, i * stride);
			LongVector tmp;
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK2);
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2).and(MASK2);
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4).and(MASK2);
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6).and(MASK2);
			tmp.intoArray(output, 384 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK2);
			tmp.intoArray(output, 512 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10).and(MASK2);
			tmp.intoArray(output, 640 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12).and(MASK2);
			tmp.intoArray(output, 768 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14).and(MASK2);
			tmp.intoArray(output, 896 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK2);
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 18).and(MASK2);
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20).and(MASK2);
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 22).and(MASK2);
			tmp.intoArray(output, 448 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK2);
			tmp.intoArray(output, 576 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 26).and(MASK2);
			tmp.intoArray(output, 704 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28).and(MASK2);
			tmp.intoArray(output, 832 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 30).and(MASK2);
			tmp.intoArray(output, 960 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK2);
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 34).and(MASK2);
			tmp.intoArray(output, 160 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 36).and(MASK2);
			tmp.intoArray(output, 288 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 38).and(MASK2);
			tmp.intoArray(output, 416 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40).and(MASK2);
			tmp.intoArray(output, 544 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 42).and(MASK2);
			tmp.intoArray(output, 672 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 44).and(MASK2);
			tmp.intoArray(output, 800 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 46).and(MASK2);
			tmp.intoArray(output, 928 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48).and(MASK2);
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 50).and(MASK2);
			tmp.intoArray(output, 224 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 52).and(MASK2);
			tmp.intoArray(output, 352 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 54).and(MASK2);
			tmp.intoArray(output, 480 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 56).and(MASK2);
			tmp.intoArray(output, 608 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 58).and(MASK2);
			tmp.intoArray(output, 736 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 60).and(MASK2);
			tmp.intoArray(output, 864 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 62).and(MASK2);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 16 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 2));
			tmp.intoArray(output, 992 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK2);
			tmp.intoArray(output, 16 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2).and(MASK2);
			tmp.intoArray(output, 144 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4).and(MASK2);
			tmp.intoArray(output, 272 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6).and(MASK2);
			tmp.intoArray(output, 400 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK2);
			tmp.intoArray(output, 528 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10).and(MASK2);
			tmp.intoArray(output, 656 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12).and(MASK2);
			tmp.intoArray(output, 784 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14).and(MASK2);
			tmp.intoArray(output, 912 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK2);
			tmp.intoArray(output, 80 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 18).and(MASK2);
			tmp.intoArray(output, 208 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20).and(MASK2);
			tmp.intoArray(output, 336 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 22).and(MASK2);
			tmp.intoArray(output, 464 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK2);
			tmp.intoArray(output, 592 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 26).and(MASK2);
			tmp.intoArray(output, 720 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28).and(MASK2);
			tmp.intoArray(output, 848 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 30).and(MASK2);
			tmp.intoArray(output, 976 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK2);
			tmp.intoArray(output, 48 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 34).and(MASK2);
			tmp.intoArray(output, 176 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 36).and(MASK2);
			tmp.intoArray(output, 304 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 38).and(MASK2);
			tmp.intoArray(output, 432 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40).and(MASK2);
			tmp.intoArray(output, 560 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 42).and(MASK2);
			tmp.intoArray(output, 688 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 44).and(MASK2);
			tmp.intoArray(output, 816 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 46).and(MASK2);
			tmp.intoArray(output, 944 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48).and(MASK2);
			tmp.intoArray(output, 112 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 50).and(MASK2);
			tmp.intoArray(output, 240 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 52).and(MASK2);
			tmp.intoArray(output, 368 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 54).and(MASK2);
			tmp.intoArray(output, 496 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 56).and(MASK2);
			tmp.intoArray(output, 624 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 58).and(MASK2);
			tmp.intoArray(output, 752 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 60).and(MASK2);
			tmp.intoArray(output, 880 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 62).and(MASK2);
			tmp.intoArray(output, 1008 + i * stride);
		}
	}

	public static void unpack3(long[] input, long[] output) {
		int stride = LongVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 64;
		for (int i = 0; i < 16 / stride; i++) {
			LongVector src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, i * stride);
			LongVector tmp;
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK3);
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 3).and(MASK3);
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6).and(MASK3);
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 9).and(MASK3);
			tmp.intoArray(output, 384 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12).and(MASK3);
			tmp.intoArray(output, 512 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 15).and(MASK3);
			tmp.intoArray(output, 640 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 18).and(MASK3);
			tmp.intoArray(output, 768 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 21).and(MASK3);
			tmp.intoArray(output, 896 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK3);
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 27).and(MASK3);
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 30).and(MASK3);
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 33).and(MASK3);
			tmp.intoArray(output, 448 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 36).and(MASK3);
			tmp.intoArray(output, 576 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 39).and(MASK3);
			tmp.intoArray(output, 704 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 42).and(MASK3);
			tmp.intoArray(output, 832 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 45).and(MASK3);
			tmp.intoArray(output, 960 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48).and(MASK3);
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 51).and(MASK3);
			tmp.intoArray(output, 160 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 54).and(MASK3);
			tmp.intoArray(output, 288 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 57).and(MASK3);
			tmp.intoArray(output, 416 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 60).and(MASK3);
			tmp.intoArray(output, 544 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 63).and(MASK1);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 16 + i * stride);
			tmp = tmp.or(src.and(MASK2).lanewise(VectorOperators.LSHL, 1));
			tmp.intoArray(output, 672 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2).and(MASK3);
			tmp.intoArray(output, 800 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 5).and(MASK3);
			tmp.intoArray(output, 928 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK3);
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 11).and(MASK3);
			tmp.intoArray(output, 224 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14).and(MASK3);
			tmp.intoArray(output, 352 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 17).and(MASK3);
			tmp.intoArray(output, 480 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20).and(MASK3);
			tmp.intoArray(output, 608 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 23).and(MASK3);
			tmp.intoArray(output, 736 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 26).and(MASK3);
			tmp.intoArray(output, 864 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 29).and(MASK3);
			tmp.intoArray(output, 992 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK3);
			tmp.intoArray(output, 16 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 35).and(MASK3);
			tmp.intoArray(output, 144 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 38).and(MASK3);
			tmp.intoArray(output, 272 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 41).and(MASK3);
			tmp.intoArray(output, 400 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 44).and(MASK3);
			tmp.intoArray(output, 528 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 47).and(MASK3);
			tmp.intoArray(output, 656 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 50).and(MASK3);
			tmp.intoArray(output, 784 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 53).and(MASK3);
			tmp.intoArray(output, 912 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 56).and(MASK3);
			tmp.intoArray(output, 80 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 59).and(MASK3);
			tmp.intoArray(output, 208 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 62).and(MASK2);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 32 + i * stride);
			tmp = tmp.or(src.and(MASK1).lanewise(VectorOperators.LSHL, 2));
			tmp.intoArray(output, 336 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 1).and(MASK3);
			tmp.intoArray(output, 464 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4).and(MASK3);
			tmp.intoArray(output, 592 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 7).and(MASK3);
			tmp.intoArray(output, 720 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10).and(MASK3);
			tmp.intoArray(output, 848 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 13).and(MASK3);
			tmp.intoArray(output, 976 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK3);
			tmp.intoArray(output, 48 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 19).and(MASK3);
			tmp.intoArray(output, 176 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 22).and(MASK3);
			tmp.intoArray(output, 304 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 25).and(MASK3);
			tmp.intoArray(output, 432 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28).and(MASK3);
			tmp.intoArray(output, 560 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 31).and(MASK3);
			tmp.intoArray(output, 688 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 34).and(MASK3);
			tmp.intoArray(output, 816 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 37).and(MASK3);
			tmp.intoArray(output, 944 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40).and(MASK3);
			tmp.intoArray(output, 112 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 43).and(MASK3);
			tmp.intoArray(output, 240 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 46).and(MASK3);
			tmp.intoArray(output, 368 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 49).and(MASK3);
			tmp.intoArray(output, 496 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 52).and(MASK3);
			tmp.intoArray(output, 624 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 55).and(MASK3);
			tmp.intoArray(output, 752 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 58).and(MASK3);
			tmp.intoArray(output, 880 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 61).and(MASK3);
			tmp.intoArray(output, 1008 + i * stride);
		}
	}

	public static void unpack4(long[] input, long[] output) {
		int stride = LongVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 64;
		for (int i = 0; i < 16 / stride; i++) {
			LongVector src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, i * stride);
			LongVector tmp;
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK4);
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4).and(MASK4);
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK4);
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12).and(MASK4);
			tmp.intoArray(output, 384 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK4);
			tmp.intoArray(output, 512 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20).and(MASK4);
			tmp.intoArray(output, 640 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK4);
			tmp.intoArray(output, 768 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28).and(MASK4);
			tmp.intoArray(output, 896 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK4);
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 36).and(MASK4);
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40).and(MASK4);
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 44).and(MASK4);
			tmp.intoArray(output, 448 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48).and(MASK4);
			tmp.intoArray(output, 576 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 52).and(MASK4);
			tmp.intoArray(output, 704 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 56).and(MASK4);
			tmp.intoArray(output, 832 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 60).and(MASK4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 16 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 960 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK4);
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4).and(MASK4);
			tmp.intoArray(output, 160 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK4);
			tmp.intoArray(output, 288 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12).and(MASK4);
			tmp.intoArray(output, 416 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK4);
			tmp.intoArray(output, 544 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20).and(MASK4);
			tmp.intoArray(output, 672 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK4);
			tmp.intoArray(output, 800 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28).and(MASK4);
			tmp.intoArray(output, 928 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK4);
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 36).and(MASK4);
			tmp.intoArray(output, 224 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40).and(MASK4);
			tmp.intoArray(output, 352 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 44).and(MASK4);
			tmp.intoArray(output, 480 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48).and(MASK4);
			tmp.intoArray(output, 608 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 52).and(MASK4);
			tmp.intoArray(output, 736 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 56).and(MASK4);
			tmp.intoArray(output, 864 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 60).and(MASK4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 32 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 992 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK4);
			tmp.intoArray(output, 16 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4).and(MASK4);
			tmp.intoArray(output, 144 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK4);
			tmp.intoArray(output, 272 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12).and(MASK4);
			tmp.intoArray(output, 400 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK4);
			tmp.intoArray(output, 528 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20).and(MASK4);
			tmp.intoArray(output, 656 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK4);
			tmp.intoArray(output, 784 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28).and(MASK4);
			tmp.intoArray(output, 912 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK4);
			tmp.intoArray(output, 80 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 36).and(MASK4);
			tmp.intoArray(output, 208 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40).and(MASK4);
			tmp.intoArray(output, 336 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 44).and(MASK4);
			tmp.intoArray(output, 464 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48).and(MASK4);
			tmp.intoArray(output, 592 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 52).and(MASK4);
			tmp.intoArray(output, 720 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 56).and(MASK4);
			tmp.intoArray(output, 848 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 60).and(MASK4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 48 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 976 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK4);
			tmp.intoArray(output, 48 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4).and(MASK4);
			tmp.intoArray(output, 176 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK4);
			tmp.intoArray(output, 304 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12).and(MASK4);
			tmp.intoArray(output, 432 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK4);
			tmp.intoArray(output, 560 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20).and(MASK4);
			tmp.intoArray(output, 688 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK4);
			tmp.intoArray(output, 816 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28).and(MASK4);
			tmp.intoArray(output, 944 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK4);
			tmp.intoArray(output, 112 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 36).and(MASK4);
			tmp.intoArray(output, 240 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40).and(MASK4);
			tmp.intoArray(output, 368 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 44).and(MASK4);
			tmp.intoArray(output, 496 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48).and(MASK4);
			tmp.intoArray(output, 624 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 52).and(MASK4);
			tmp.intoArray(output, 752 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 56).and(MASK4);
			tmp.intoArray(output, 880 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 60).and(MASK4);
			tmp.intoArray(output, 1008 + i * stride);
		}
	}

	public static void unpack5(long[] input, long[] output) {
		int stride = LongVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 64;
		for (int i = 0; i < 16 / stride; i++) {
			LongVector src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, i * stride);
			LongVector tmp;
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK5);
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 5).and(MASK5);
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10).and(MASK5);
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 15).and(MASK5);
			tmp.intoArray(output, 384 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20).and(MASK5);
			tmp.intoArray(output, 512 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 25).and(MASK5);
			tmp.intoArray(output, 640 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 30).and(MASK5);
			tmp.intoArray(output, 768 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 35).and(MASK5);
			tmp.intoArray(output, 896 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40).and(MASK5);
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 45).and(MASK5);
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 50).and(MASK5);
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 55).and(MASK5);
			tmp.intoArray(output, 448 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 60).and(MASK4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 16 + i * stride);
			tmp = tmp.or(src.and(MASK1).lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 576 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 1).and(MASK5);
			tmp.intoArray(output, 704 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6).and(MASK5);
			tmp.intoArray(output, 832 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 11).and(MASK5);
			tmp.intoArray(output, 960 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK5);
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 21).and(MASK5);
			tmp.intoArray(output, 160 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 26).and(MASK5);
			tmp.intoArray(output, 288 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 31).and(MASK5);
			tmp.intoArray(output, 416 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 36).and(MASK5);
			tmp.intoArray(output, 544 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 41).and(MASK5);
			tmp.intoArray(output, 672 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 46).and(MASK5);
			tmp.intoArray(output, 800 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 51).and(MASK5);
			tmp.intoArray(output, 928 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 56).and(MASK5);
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 61).and(MASK3);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 32 + i * stride);
			tmp = tmp.or(src.and(MASK2).lanewise(VectorOperators.LSHL, 3));
			tmp.intoArray(output, 224 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2).and(MASK5);
			tmp.intoArray(output, 352 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 7).and(MASK5);
			tmp.intoArray(output, 480 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12).and(MASK5);
			tmp.intoArray(output, 608 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 17).and(MASK5);
			tmp.intoArray(output, 736 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 22).and(MASK5);
			tmp.intoArray(output, 864 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 27).and(MASK5);
			tmp.intoArray(output, 992 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK5);
			tmp.intoArray(output, 16 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 37).and(MASK5);
			tmp.intoArray(output, 144 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 42).and(MASK5);
			tmp.intoArray(output, 272 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 47).and(MASK5);
			tmp.intoArray(output, 400 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 52).and(MASK5);
			tmp.intoArray(output, 528 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 57).and(MASK5);
			tmp.intoArray(output, 656 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 62).and(MASK2);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 48 + i * stride);
			tmp = tmp.or(src.and(MASK3).lanewise(VectorOperators.LSHL, 2));
			tmp.intoArray(output, 784 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 3).and(MASK5);
			tmp.intoArray(output, 912 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK5);
			tmp.intoArray(output, 80 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 13).and(MASK5);
			tmp.intoArray(output, 208 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 18).and(MASK5);
			tmp.intoArray(output, 336 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 23).and(MASK5);
			tmp.intoArray(output, 464 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28).and(MASK5);
			tmp.intoArray(output, 592 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 33).and(MASK5);
			tmp.intoArray(output, 720 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 38).and(MASK5);
			tmp.intoArray(output, 848 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 43).and(MASK5);
			tmp.intoArray(output, 976 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48).and(MASK5);
			tmp.intoArray(output, 48 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 53).and(MASK5);
			tmp.intoArray(output, 176 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 58).and(MASK5);
			tmp.intoArray(output, 304 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 63).and(MASK1);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 64 + i * stride);
			tmp = tmp.or(src.and(MASK4).lanewise(VectorOperators.LSHL, 1));
			tmp.intoArray(output, 432 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4).and(MASK5);
			tmp.intoArray(output, 560 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 9).and(MASK5);
			tmp.intoArray(output, 688 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14).and(MASK5);
			tmp.intoArray(output, 816 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 19).and(MASK5);
			tmp.intoArray(output, 944 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK5);
			tmp.intoArray(output, 112 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 29).and(MASK5);
			tmp.intoArray(output, 240 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 34).and(MASK5);
			tmp.intoArray(output, 368 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 39).and(MASK5);
			tmp.intoArray(output, 496 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 44).and(MASK5);
			tmp.intoArray(output, 624 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 49).and(MASK5);
			tmp.intoArray(output, 752 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 54).and(MASK5);
			tmp.intoArray(output, 880 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 59).and(MASK5);
			tmp.intoArray(output, 1008 + i * stride);
		}
	}

	public static void unpack6(long[] input, long[] output) {
		int stride = LongVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 64;
		for (int i = 0; i < 16 / stride; i++) {
			LongVector src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, i * stride);
			LongVector tmp;
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK6);
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6).and(MASK6);
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12).and(MASK6);
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 18).and(MASK6);
			tmp.intoArray(output, 384 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK6);
			tmp.intoArray(output, 512 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 30).and(MASK6);
			tmp.intoArray(output, 640 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 36).and(MASK6);
			tmp.intoArray(output, 768 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 42).and(MASK6);
			tmp.intoArray(output, 896 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48).and(MASK6);
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 54).and(MASK6);
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 60).and(MASK4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 16 + i * stride);
			tmp = tmp.or(src.and(MASK2).lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2).and(MASK6);
			tmp.intoArray(output, 448 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK6);
			tmp.intoArray(output, 576 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14).and(MASK6);
			tmp.intoArray(output, 704 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20).and(MASK6);
			tmp.intoArray(output, 832 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 26).and(MASK6);
			tmp.intoArray(output, 960 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK6);
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 38).and(MASK6);
			tmp.intoArray(output, 160 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 44).and(MASK6);
			tmp.intoArray(output, 288 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 50).and(MASK6);
			tmp.intoArray(output, 416 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 56).and(MASK6);
			tmp.intoArray(output, 544 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 62).and(MASK2);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 32 + i * stride);
			tmp = tmp.or(src.and(MASK4).lanewise(VectorOperators.LSHL, 2));
			tmp.intoArray(output, 672 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4).and(MASK6);
			tmp.intoArray(output, 800 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10).and(MASK6);
			tmp.intoArray(output, 928 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK6);
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 22).and(MASK6);
			tmp.intoArray(output, 224 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28).and(MASK6);
			tmp.intoArray(output, 352 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 34).and(MASK6);
			tmp.intoArray(output, 480 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40).and(MASK6);
			tmp.intoArray(output, 608 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 46).and(MASK6);
			tmp.intoArray(output, 736 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 52).and(MASK6);
			tmp.intoArray(output, 864 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 58).and(MASK6);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 48 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 6));
			tmp.intoArray(output, 992 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK6);
			tmp.intoArray(output, 16 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6).and(MASK6);
			tmp.intoArray(output, 144 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12).and(MASK6);
			tmp.intoArray(output, 272 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 18).and(MASK6);
			tmp.intoArray(output, 400 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK6);
			tmp.intoArray(output, 528 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 30).and(MASK6);
			tmp.intoArray(output, 656 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 36).and(MASK6);
			tmp.intoArray(output, 784 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 42).and(MASK6);
			tmp.intoArray(output, 912 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48).and(MASK6);
			tmp.intoArray(output, 80 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 54).and(MASK6);
			tmp.intoArray(output, 208 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 60).and(MASK4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 64 + i * stride);
			tmp = tmp.or(src.and(MASK2).lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 336 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2).and(MASK6);
			tmp.intoArray(output, 464 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK6);
			tmp.intoArray(output, 592 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14).and(MASK6);
			tmp.intoArray(output, 720 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20).and(MASK6);
			tmp.intoArray(output, 848 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 26).and(MASK6);
			tmp.intoArray(output, 976 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK6);
			tmp.intoArray(output, 48 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 38).and(MASK6);
			tmp.intoArray(output, 176 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 44).and(MASK6);
			tmp.intoArray(output, 304 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 50).and(MASK6);
			tmp.intoArray(output, 432 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 56).and(MASK6);
			tmp.intoArray(output, 560 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 62).and(MASK2);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 80 + i * stride);
			tmp = tmp.or(src.and(MASK4).lanewise(VectorOperators.LSHL, 2));
			tmp.intoArray(output, 688 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4).and(MASK6);
			tmp.intoArray(output, 816 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10).and(MASK6);
			tmp.intoArray(output, 944 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK6);
			tmp.intoArray(output, 112 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 22).and(MASK6);
			tmp.intoArray(output, 240 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28).and(MASK6);
			tmp.intoArray(output, 368 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 34).and(MASK6);
			tmp.intoArray(output, 496 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40).and(MASK6);
			tmp.intoArray(output, 624 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 46).and(MASK6);
			tmp.intoArray(output, 752 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 52).and(MASK6);
			tmp.intoArray(output, 880 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 58).and(MASK6);
			tmp.intoArray(output, 1008 + i * stride);
		}
	}

	public static void unpack7(long[] input, long[] output) {
		int stride = LongVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 64;
		for (int i = 0; i < 16 / stride; i++) {
			LongVector src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, i * stride);
			LongVector tmp;
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK7);
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 7).and(MASK7);
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14).and(MASK7);
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 21).and(MASK7);
			tmp.intoArray(output, 384 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28).and(MASK7);
			tmp.intoArray(output, 512 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 35).and(MASK7);
			tmp.intoArray(output, 640 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 42).and(MASK7);
			tmp.intoArray(output, 768 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 49).and(MASK7);
			tmp.intoArray(output, 896 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 56).and(MASK7);
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 63).and(MASK1);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 16 + i * stride);
			tmp = tmp.or(src.and(MASK6).lanewise(VectorOperators.LSHL, 1));
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6).and(MASK7);
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 13).and(MASK7);
			tmp.intoArray(output, 448 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20).and(MASK7);
			tmp.intoArray(output, 576 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 27).and(MASK7);
			tmp.intoArray(output, 704 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 34).and(MASK7);
			tmp.intoArray(output, 832 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 41).and(MASK7);
			tmp.intoArray(output, 960 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48).and(MASK7);
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 55).and(MASK7);
			tmp.intoArray(output, 160 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 62).and(MASK2);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 32 + i * stride);
			tmp = tmp.or(src.and(MASK5).lanewise(VectorOperators.LSHL, 2));
			tmp.intoArray(output, 288 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 5).and(MASK7);
			tmp.intoArray(output, 416 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12).and(MASK7);
			tmp.intoArray(output, 544 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 19).and(MASK7);
			tmp.intoArray(output, 672 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 26).and(MASK7);
			tmp.intoArray(output, 800 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 33).and(MASK7);
			tmp.intoArray(output, 928 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40).and(MASK7);
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 47).and(MASK7);
			tmp.intoArray(output, 224 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 54).and(MASK7);
			tmp.intoArray(output, 352 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 61).and(MASK3);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 48 + i * stride);
			tmp = tmp.or(src.and(MASK4).lanewise(VectorOperators.LSHL, 3));
			tmp.intoArray(output, 480 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4).and(MASK7);
			tmp.intoArray(output, 608 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 11).and(MASK7);
			tmp.intoArray(output, 736 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 18).and(MASK7);
			tmp.intoArray(output, 864 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 25).and(MASK7);
			tmp.intoArray(output, 992 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK7);
			tmp.intoArray(output, 16 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 39).and(MASK7);
			tmp.intoArray(output, 144 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 46).and(MASK7);
			tmp.intoArray(output, 272 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 53).and(MASK7);
			tmp.intoArray(output, 400 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 60).and(MASK4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 64 + i * stride);
			tmp = tmp.or(src.and(MASK3).lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 528 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 3).and(MASK7);
			tmp.intoArray(output, 656 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10).and(MASK7);
			tmp.intoArray(output, 784 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 17).and(MASK7);
			tmp.intoArray(output, 912 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK7);
			tmp.intoArray(output, 80 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 31).and(MASK7);
			tmp.intoArray(output, 208 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 38).and(MASK7);
			tmp.intoArray(output, 336 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 45).and(MASK7);
			tmp.intoArray(output, 464 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 52).and(MASK7);
			tmp.intoArray(output, 592 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 59).and(MASK5);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 80 + i * stride);
			tmp = tmp.or(src.and(MASK2).lanewise(VectorOperators.LSHL, 5));
			tmp.intoArray(output, 720 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2).and(MASK7);
			tmp.intoArray(output, 848 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 9).and(MASK7);
			tmp.intoArray(output, 976 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK7);
			tmp.intoArray(output, 48 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 23).and(MASK7);
			tmp.intoArray(output, 176 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 30).and(MASK7);
			tmp.intoArray(output, 304 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 37).and(MASK7);
			tmp.intoArray(output, 432 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 44).and(MASK7);
			tmp.intoArray(output, 560 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 51).and(MASK7);
			tmp.intoArray(output, 688 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 58).and(MASK6);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 96 + i * stride);
			tmp = tmp.or(src.and(MASK1).lanewise(VectorOperators.LSHL, 6));
			tmp.intoArray(output, 816 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 1).and(MASK7);
			tmp.intoArray(output, 944 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK7);
			tmp.intoArray(output, 112 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 15).and(MASK7);
			tmp.intoArray(output, 240 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 22).and(MASK7);
			tmp.intoArray(output, 368 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 29).and(MASK7);
			tmp.intoArray(output, 496 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 36).and(MASK7);
			tmp.intoArray(output, 624 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 43).and(MASK7);
			tmp.intoArray(output, 752 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 50).and(MASK7);
			tmp.intoArray(output, 880 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 57).and(MASK7);
			tmp.intoArray(output, 1008 + i * stride);
		}
	}

	public static void unpack8(long[] input, long[] output) {
		int stride = LongVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 64;
		for (int i = 0; i < 16 / stride; i++) {
			LongVector src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, i * stride);
			LongVector tmp;
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK8);
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK8);
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK8);
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK8);
			tmp.intoArray(output, 384 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK8);
			tmp.intoArray(output, 512 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40).and(MASK8);
			tmp.intoArray(output, 640 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48).and(MASK8);
			tmp.intoArray(output, 768 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 56).and(MASK8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 16 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 896 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK8);
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK8);
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK8);
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK8);
			tmp.intoArray(output, 448 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK8);
			tmp.intoArray(output, 576 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40).and(MASK8);
			tmp.intoArray(output, 704 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48).and(MASK8);
			tmp.intoArray(output, 832 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 56).and(MASK8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 32 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 960 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK8);
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK8);
			tmp.intoArray(output, 160 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK8);
			tmp.intoArray(output, 288 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK8);
			tmp.intoArray(output, 416 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK8);
			tmp.intoArray(output, 544 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40).and(MASK8);
			tmp.intoArray(output, 672 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48).and(MASK8);
			tmp.intoArray(output, 800 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 56).and(MASK8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 48 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 928 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK8);
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK8);
			tmp.intoArray(output, 224 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK8);
			tmp.intoArray(output, 352 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK8);
			tmp.intoArray(output, 480 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK8);
			tmp.intoArray(output, 608 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40).and(MASK8);
			tmp.intoArray(output, 736 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48).and(MASK8);
			tmp.intoArray(output, 864 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 56).and(MASK8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 64 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 992 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK8);
			tmp.intoArray(output, 16 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK8);
			tmp.intoArray(output, 144 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK8);
			tmp.intoArray(output, 272 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK8);
			tmp.intoArray(output, 400 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK8);
			tmp.intoArray(output, 528 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40).and(MASK8);
			tmp.intoArray(output, 656 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48).and(MASK8);
			tmp.intoArray(output, 784 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 56).and(MASK8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 80 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 912 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK8);
			tmp.intoArray(output, 80 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK8);
			tmp.intoArray(output, 208 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK8);
			tmp.intoArray(output, 336 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK8);
			tmp.intoArray(output, 464 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK8);
			tmp.intoArray(output, 592 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40).and(MASK8);
			tmp.intoArray(output, 720 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48).and(MASK8);
			tmp.intoArray(output, 848 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 56).and(MASK8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 96 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 976 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK8);
			tmp.intoArray(output, 48 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK8);
			tmp.intoArray(output, 176 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK8);
			tmp.intoArray(output, 304 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK8);
			tmp.intoArray(output, 432 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK8);
			tmp.intoArray(output, 560 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40).and(MASK8);
			tmp.intoArray(output, 688 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48).and(MASK8);
			tmp.intoArray(output, 816 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 56).and(MASK8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 112 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 944 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK8);
			tmp.intoArray(output, 112 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK8);
			tmp.intoArray(output, 240 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK8);
			tmp.intoArray(output, 368 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK8);
			tmp.intoArray(output, 496 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK8);
			tmp.intoArray(output, 624 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40).and(MASK8);
			tmp.intoArray(output, 752 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48).and(MASK8);
			tmp.intoArray(output, 880 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 56).and(MASK8);
			tmp.intoArray(output, 1008 + i * stride);
		}
	}

	public static void unpack9(long[] input, long[] output) {
		int stride = LongVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 64;
		for (int i = 0; i < 16 / stride; i++) {
			LongVector src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, i * stride);
			LongVector tmp;
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK9);
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 9).and(MASK9);
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 18).and(MASK9);
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 27).and(MASK9);
			tmp.intoArray(output, 384 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 36).and(MASK9);
			tmp.intoArray(output, 512 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 45).and(MASK9);
			tmp.intoArray(output, 640 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 54).and(MASK9);
			tmp.intoArray(output, 768 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 63).and(MASK1);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 16 + i * stride);
			tmp = tmp.or(src.and(MASK8).lanewise(VectorOperators.LSHL, 1));
			tmp.intoArray(output, 896 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK9);
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 17).and(MASK9);
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 26).and(MASK9);
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 35).and(MASK9);
			tmp.intoArray(output, 448 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 44).and(MASK9);
			tmp.intoArray(output, 576 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 53).and(MASK9);
			tmp.intoArray(output, 704 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 62).and(MASK2);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 32 + i * stride);
			tmp = tmp.or(src.and(MASK7).lanewise(VectorOperators.LSHL, 2));
			tmp.intoArray(output, 832 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 7).and(MASK9);
			tmp.intoArray(output, 960 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK9);
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 25).and(MASK9);
			tmp.intoArray(output, 160 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 34).and(MASK9);
			tmp.intoArray(output, 288 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 43).and(MASK9);
			tmp.intoArray(output, 416 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 52).and(MASK9);
			tmp.intoArray(output, 544 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 61).and(MASK3);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 48 + i * stride);
			tmp = tmp.or(src.and(MASK6).lanewise(VectorOperators.LSHL, 3));
			tmp.intoArray(output, 672 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6).and(MASK9);
			tmp.intoArray(output, 800 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 15).and(MASK9);
			tmp.intoArray(output, 928 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK9);
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 33).and(MASK9);
			tmp.intoArray(output, 224 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 42).and(MASK9);
			tmp.intoArray(output, 352 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 51).and(MASK9);
			tmp.intoArray(output, 480 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 60).and(MASK4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 64 + i * stride);
			tmp = tmp.or(src.and(MASK5).lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 608 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 5).and(MASK9);
			tmp.intoArray(output, 736 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14).and(MASK9);
			tmp.intoArray(output, 864 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 23).and(MASK9);
			tmp.intoArray(output, 992 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK9);
			tmp.intoArray(output, 16 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 41).and(MASK9);
			tmp.intoArray(output, 144 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 50).and(MASK9);
			tmp.intoArray(output, 272 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 59).and(MASK5);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 80 + i * stride);
			tmp = tmp.or(src.and(MASK4).lanewise(VectorOperators.LSHL, 5));
			tmp.intoArray(output, 400 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4).and(MASK9);
			tmp.intoArray(output, 528 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 13).and(MASK9);
			tmp.intoArray(output, 656 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 22).and(MASK9);
			tmp.intoArray(output, 784 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 31).and(MASK9);
			tmp.intoArray(output, 912 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40).and(MASK9);
			tmp.intoArray(output, 80 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 49).and(MASK9);
			tmp.intoArray(output, 208 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 58).and(MASK6);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 96 + i * stride);
			tmp = tmp.or(src.and(MASK3).lanewise(VectorOperators.LSHL, 6));
			tmp.intoArray(output, 336 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 3).and(MASK9);
			tmp.intoArray(output, 464 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12).and(MASK9);
			tmp.intoArray(output, 592 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 21).and(MASK9);
			tmp.intoArray(output, 720 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 30).and(MASK9);
			tmp.intoArray(output, 848 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 39).and(MASK9);
			tmp.intoArray(output, 976 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48).and(MASK9);
			tmp.intoArray(output, 48 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 57).and(MASK7);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 112 + i * stride);
			tmp = tmp.or(src.and(MASK2).lanewise(VectorOperators.LSHL, 7));
			tmp.intoArray(output, 176 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2).and(MASK9);
			tmp.intoArray(output, 304 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 11).and(MASK9);
			tmp.intoArray(output, 432 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20).and(MASK9);
			tmp.intoArray(output, 560 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 29).and(MASK9);
			tmp.intoArray(output, 688 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 38).and(MASK9);
			tmp.intoArray(output, 816 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 47).and(MASK9);
			tmp.intoArray(output, 944 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 56).and(MASK8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 128 + i * stride);
			tmp = tmp.or(src.and(MASK1).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 112 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 1).and(MASK9);
			tmp.intoArray(output, 240 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10).and(MASK9);
			tmp.intoArray(output, 368 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 19).and(MASK9);
			tmp.intoArray(output, 496 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28).and(MASK9);
			tmp.intoArray(output, 624 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 37).and(MASK9);
			tmp.intoArray(output, 752 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 46).and(MASK9);
			tmp.intoArray(output, 880 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 55).and(MASK9);
			tmp.intoArray(output, 1008 + i * stride);
		}
	}

	public static void unpack10(long[] input, long[] output) {
		int stride = LongVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 64;
		for (int i = 0; i < 16 / stride; i++) {
			LongVector src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, i * stride);
			LongVector tmp;
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK10);
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10).and(MASK10);
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20).and(MASK10);
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 30).and(MASK10);
			tmp.intoArray(output, 384 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40).and(MASK10);
			tmp.intoArray(output, 512 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 50).and(MASK10);
			tmp.intoArray(output, 640 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 60).and(MASK4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 16 + i * stride);
			tmp = tmp.or(src.and(MASK6).lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 768 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6).and(MASK10);
			tmp.intoArray(output, 896 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK10);
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 26).and(MASK10);
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 36).and(MASK10);
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 46).and(MASK10);
			tmp.intoArray(output, 448 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 56).and(MASK8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 32 + i * stride);
			tmp = tmp.or(src.and(MASK2).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 576 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2).and(MASK10);
			tmp.intoArray(output, 704 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12).and(MASK10);
			tmp.intoArray(output, 832 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 22).and(MASK10);
			tmp.intoArray(output, 960 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK10);
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 42).and(MASK10);
			tmp.intoArray(output, 160 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 52).and(MASK10);
			tmp.intoArray(output, 288 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 62).and(MASK2);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 48 + i * stride);
			tmp = tmp.or(src.and(MASK8).lanewise(VectorOperators.LSHL, 2));
			tmp.intoArray(output, 416 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK10);
			tmp.intoArray(output, 544 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 18).and(MASK10);
			tmp.intoArray(output, 672 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28).and(MASK10);
			tmp.intoArray(output, 800 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 38).and(MASK10);
			tmp.intoArray(output, 928 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48).and(MASK10);
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 58).and(MASK6);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 64 + i * stride);
			tmp = tmp.or(src.and(MASK4).lanewise(VectorOperators.LSHL, 6));
			tmp.intoArray(output, 224 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4).and(MASK10);
			tmp.intoArray(output, 352 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14).and(MASK10);
			tmp.intoArray(output, 480 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK10);
			tmp.intoArray(output, 608 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 34).and(MASK10);
			tmp.intoArray(output, 736 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 44).and(MASK10);
			tmp.intoArray(output, 864 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 54).and(MASK10);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 80 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 10));
			tmp.intoArray(output, 992 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK10);
			tmp.intoArray(output, 16 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10).and(MASK10);
			tmp.intoArray(output, 144 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20).and(MASK10);
			tmp.intoArray(output, 272 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 30).and(MASK10);
			tmp.intoArray(output, 400 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40).and(MASK10);
			tmp.intoArray(output, 528 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 50).and(MASK10);
			tmp.intoArray(output, 656 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 60).and(MASK4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 96 + i * stride);
			tmp = tmp.or(src.and(MASK6).lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 784 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6).and(MASK10);
			tmp.intoArray(output, 912 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK10);
			tmp.intoArray(output, 80 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 26).and(MASK10);
			tmp.intoArray(output, 208 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 36).and(MASK10);
			tmp.intoArray(output, 336 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 46).and(MASK10);
			tmp.intoArray(output, 464 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 56).and(MASK8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 112 + i * stride);
			tmp = tmp.or(src.and(MASK2).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 592 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2).and(MASK10);
			tmp.intoArray(output, 720 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12).and(MASK10);
			tmp.intoArray(output, 848 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 22).and(MASK10);
			tmp.intoArray(output, 976 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK10);
			tmp.intoArray(output, 48 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 42).and(MASK10);
			tmp.intoArray(output, 176 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 52).and(MASK10);
			tmp.intoArray(output, 304 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 62).and(MASK2);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 128 + i * stride);
			tmp = tmp.or(src.and(MASK8).lanewise(VectorOperators.LSHL, 2));
			tmp.intoArray(output, 432 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK10);
			tmp.intoArray(output, 560 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 18).and(MASK10);
			tmp.intoArray(output, 688 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28).and(MASK10);
			tmp.intoArray(output, 816 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 38).and(MASK10);
			tmp.intoArray(output, 944 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48).and(MASK10);
			tmp.intoArray(output, 112 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 58).and(MASK6);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 144 + i * stride);
			tmp = tmp.or(src.and(MASK4).lanewise(VectorOperators.LSHL, 6));
			tmp.intoArray(output, 240 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4).and(MASK10);
			tmp.intoArray(output, 368 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14).and(MASK10);
			tmp.intoArray(output, 496 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK10);
			tmp.intoArray(output, 624 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 34).and(MASK10);
			tmp.intoArray(output, 752 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 44).and(MASK10);
			tmp.intoArray(output, 880 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 54).and(MASK10);
			tmp.intoArray(output, 1008 + i * stride);
		}
	}

	public static void unpack11(long[] input, long[] output) {
		int stride = LongVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 64;
		for (int i = 0; i < 16 / stride; i++) {
			LongVector src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, i * stride);
			LongVector tmp;
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK11);
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 11).and(MASK11);
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 22).and(MASK11);
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 33).and(MASK11);
			tmp.intoArray(output, 384 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 44).and(MASK11);
			tmp.intoArray(output, 512 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 55).and(MASK9);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 16 + i * stride);
			tmp = tmp.or(src.and(MASK2).lanewise(VectorOperators.LSHL, 9));
			tmp.intoArray(output, 640 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2).and(MASK11);
			tmp.intoArray(output, 768 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 13).and(MASK11);
			tmp.intoArray(output, 896 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK11);
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 35).and(MASK11);
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 46).and(MASK11);
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 57).and(MASK7);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 32 + i * stride);
			tmp = tmp.or(src.and(MASK4).lanewise(VectorOperators.LSHL, 7));
			tmp.intoArray(output, 448 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4).and(MASK11);
			tmp.intoArray(output, 576 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 15).and(MASK11);
			tmp.intoArray(output, 704 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 26).and(MASK11);
			tmp.intoArray(output, 832 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 37).and(MASK11);
			tmp.intoArray(output, 960 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48).and(MASK11);
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 59).and(MASK5);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 48 + i * stride);
			tmp = tmp.or(src.and(MASK6).lanewise(VectorOperators.LSHL, 5));
			tmp.intoArray(output, 160 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6).and(MASK11);
			tmp.intoArray(output, 288 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 17).and(MASK11);
			tmp.intoArray(output, 416 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28).and(MASK11);
			tmp.intoArray(output, 544 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 39).and(MASK11);
			tmp.intoArray(output, 672 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 50).and(MASK11);
			tmp.intoArray(output, 800 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 61).and(MASK3);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 64 + i * stride);
			tmp = tmp.or(src.and(MASK8).lanewise(VectorOperators.LSHL, 3));
			tmp.intoArray(output, 928 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK11);
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 19).and(MASK11);
			tmp.intoArray(output, 224 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 30).and(MASK11);
			tmp.intoArray(output, 352 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 41).and(MASK11);
			tmp.intoArray(output, 480 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 52).and(MASK11);
			tmp.intoArray(output, 608 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 63).and(MASK1);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 80 + i * stride);
			tmp = tmp.or(src.and(MASK10).lanewise(VectorOperators.LSHL, 1));
			tmp.intoArray(output, 736 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10).and(MASK11);
			tmp.intoArray(output, 864 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 21).and(MASK11);
			tmp.intoArray(output, 992 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK11);
			tmp.intoArray(output, 16 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 43).and(MASK11);
			tmp.intoArray(output, 144 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 54).and(MASK10);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 96 + i * stride);
			tmp = tmp.or(src.and(MASK1).lanewise(VectorOperators.LSHL, 10));
			tmp.intoArray(output, 272 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 1).and(MASK11);
			tmp.intoArray(output, 400 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12).and(MASK11);
			tmp.intoArray(output, 528 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 23).and(MASK11);
			tmp.intoArray(output, 656 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 34).and(MASK11);
			tmp.intoArray(output, 784 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 45).and(MASK11);
			tmp.intoArray(output, 912 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 56).and(MASK8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 112 + i * stride);
			tmp = tmp.or(src.and(MASK3).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 80 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 3).and(MASK11);
			tmp.intoArray(output, 208 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14).and(MASK11);
			tmp.intoArray(output, 336 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 25).and(MASK11);
			tmp.intoArray(output, 464 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 36).and(MASK11);
			tmp.intoArray(output, 592 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 47).and(MASK11);
			tmp.intoArray(output, 720 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 58).and(MASK6);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 128 + i * stride);
			tmp = tmp.or(src.and(MASK5).lanewise(VectorOperators.LSHL, 6));
			tmp.intoArray(output, 848 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 5).and(MASK11);
			tmp.intoArray(output, 976 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK11);
			tmp.intoArray(output, 48 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 27).and(MASK11);
			tmp.intoArray(output, 176 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 38).and(MASK11);
			tmp.intoArray(output, 304 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 49).and(MASK11);
			tmp.intoArray(output, 432 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 60).and(MASK4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 144 + i * stride);
			tmp = tmp.or(src.and(MASK7).lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 560 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 7).and(MASK11);
			tmp.intoArray(output, 688 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 18).and(MASK11);
			tmp.intoArray(output, 816 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 29).and(MASK11);
			tmp.intoArray(output, 944 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40).and(MASK11);
			tmp.intoArray(output, 112 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 51).and(MASK11);
			tmp.intoArray(output, 240 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 62).and(MASK2);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 160 + i * stride);
			tmp = tmp.or(src.and(MASK9).lanewise(VectorOperators.LSHL, 2));
			tmp.intoArray(output, 368 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 9).and(MASK11);
			tmp.intoArray(output, 496 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20).and(MASK11);
			tmp.intoArray(output, 624 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 31).and(MASK11);
			tmp.intoArray(output, 752 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 42).and(MASK11);
			tmp.intoArray(output, 880 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 53).and(MASK11);
			tmp.intoArray(output, 1008 + i * stride);
		}
	}

	public static void unpack12(long[] input, long[] output) {
		int stride = LongVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 64;
		for (int i = 0; i < 16 / stride; i++) {
			LongVector src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, i * stride);
			LongVector tmp;
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK12);
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12).and(MASK12);
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK12);
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 36).and(MASK12);
			tmp.intoArray(output, 384 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48).and(MASK12);
			tmp.intoArray(output, 512 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 60).and(MASK4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 16 + i * stride);
			tmp = tmp.or(src.and(MASK8).lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 640 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK12);
			tmp.intoArray(output, 768 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20).and(MASK12);
			tmp.intoArray(output, 896 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK12);
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 44).and(MASK12);
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 56).and(MASK8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 32 + i * stride);
			tmp = tmp.or(src.and(MASK4).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4).and(MASK12);
			tmp.intoArray(output, 448 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK12);
			tmp.intoArray(output, 576 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28).and(MASK12);
			tmp.intoArray(output, 704 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40).and(MASK12);
			tmp.intoArray(output, 832 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 52).and(MASK12);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 48 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 960 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK12);
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12).and(MASK12);
			tmp.intoArray(output, 160 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK12);
			tmp.intoArray(output, 288 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 36).and(MASK12);
			tmp.intoArray(output, 416 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48).and(MASK12);
			tmp.intoArray(output, 544 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 60).and(MASK4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 64 + i * stride);
			tmp = tmp.or(src.and(MASK8).lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 672 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK12);
			tmp.intoArray(output, 800 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20).and(MASK12);
			tmp.intoArray(output, 928 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK12);
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 44).and(MASK12);
			tmp.intoArray(output, 224 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 56).and(MASK8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 80 + i * stride);
			tmp = tmp.or(src.and(MASK4).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 352 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4).and(MASK12);
			tmp.intoArray(output, 480 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK12);
			tmp.intoArray(output, 608 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28).and(MASK12);
			tmp.intoArray(output, 736 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40).and(MASK12);
			tmp.intoArray(output, 864 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 52).and(MASK12);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 96 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 992 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK12);
			tmp.intoArray(output, 16 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12).and(MASK12);
			tmp.intoArray(output, 144 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK12);
			tmp.intoArray(output, 272 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 36).and(MASK12);
			tmp.intoArray(output, 400 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48).and(MASK12);
			tmp.intoArray(output, 528 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 60).and(MASK4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 112 + i * stride);
			tmp = tmp.or(src.and(MASK8).lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 656 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK12);
			tmp.intoArray(output, 784 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20).and(MASK12);
			tmp.intoArray(output, 912 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK12);
			tmp.intoArray(output, 80 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 44).and(MASK12);
			tmp.intoArray(output, 208 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 56).and(MASK8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 128 + i * stride);
			tmp = tmp.or(src.and(MASK4).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 336 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4).and(MASK12);
			tmp.intoArray(output, 464 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK12);
			tmp.intoArray(output, 592 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28).and(MASK12);
			tmp.intoArray(output, 720 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40).and(MASK12);
			tmp.intoArray(output, 848 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 52).and(MASK12);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 144 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 976 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK12);
			tmp.intoArray(output, 48 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12).and(MASK12);
			tmp.intoArray(output, 176 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK12);
			tmp.intoArray(output, 304 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 36).and(MASK12);
			tmp.intoArray(output, 432 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48).and(MASK12);
			tmp.intoArray(output, 560 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 60).and(MASK4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 160 + i * stride);
			tmp = tmp.or(src.and(MASK8).lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 688 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK12);
			tmp.intoArray(output, 816 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20).and(MASK12);
			tmp.intoArray(output, 944 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK12);
			tmp.intoArray(output, 112 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 44).and(MASK12);
			tmp.intoArray(output, 240 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 56).and(MASK8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 176 + i * stride);
			tmp = tmp.or(src.and(MASK4).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 368 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4).and(MASK12);
			tmp.intoArray(output, 496 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK12);
			tmp.intoArray(output, 624 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28).and(MASK12);
			tmp.intoArray(output, 752 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40).and(MASK12);
			tmp.intoArray(output, 880 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 52).and(MASK12);
			tmp.intoArray(output, 1008 + i * stride);
		}
	}

	public static void unpack13(long[] input, long[] output) {
		int stride = LongVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 64;
		for (int i = 0; i < 16 / stride; i++) {
			LongVector src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, i * stride);
			LongVector tmp;
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK13);
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 13).and(MASK13);
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 26).and(MASK13);
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 39).and(MASK13);
			tmp.intoArray(output, 384 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 52).and(MASK12);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 16 + i * stride);
			tmp = tmp.or(src.and(MASK1).lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 512 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 1).and(MASK13);
			tmp.intoArray(output, 640 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14).and(MASK13);
			tmp.intoArray(output, 768 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 27).and(MASK13);
			tmp.intoArray(output, 896 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40).and(MASK13);
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 53).and(MASK11);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 32 + i * stride);
			tmp = tmp.or(src.and(MASK2).lanewise(VectorOperators.LSHL, 11));
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2).and(MASK13);
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 15).and(MASK13);
			tmp.intoArray(output, 448 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28).and(MASK13);
			tmp.intoArray(output, 576 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 41).and(MASK13);
			tmp.intoArray(output, 704 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 54).and(MASK10);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 48 + i * stride);
			tmp = tmp.or(src.and(MASK3).lanewise(VectorOperators.LSHL, 10));
			tmp.intoArray(output, 832 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 3).and(MASK13);
			tmp.intoArray(output, 960 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK13);
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 29).and(MASK13);
			tmp.intoArray(output, 160 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 42).and(MASK13);
			tmp.intoArray(output, 288 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 55).and(MASK9);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 64 + i * stride);
			tmp = tmp.or(src.and(MASK4).lanewise(VectorOperators.LSHL, 9));
			tmp.intoArray(output, 416 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4).and(MASK13);
			tmp.intoArray(output, 544 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 17).and(MASK13);
			tmp.intoArray(output, 672 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 30).and(MASK13);
			tmp.intoArray(output, 800 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 43).and(MASK13);
			tmp.intoArray(output, 928 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 56).and(MASK8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 80 + i * stride);
			tmp = tmp.or(src.and(MASK5).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 5).and(MASK13);
			tmp.intoArray(output, 224 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 18).and(MASK13);
			tmp.intoArray(output, 352 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 31).and(MASK13);
			tmp.intoArray(output, 480 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 44).and(MASK13);
			tmp.intoArray(output, 608 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 57).and(MASK7);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 96 + i * stride);
			tmp = tmp.or(src.and(MASK6).lanewise(VectorOperators.LSHL, 7));
			tmp.intoArray(output, 736 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6).and(MASK13);
			tmp.intoArray(output, 864 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 19).and(MASK13);
			tmp.intoArray(output, 992 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK13);
			tmp.intoArray(output, 16 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 45).and(MASK13);
			tmp.intoArray(output, 144 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 58).and(MASK6);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 112 + i * stride);
			tmp = tmp.or(src.and(MASK7).lanewise(VectorOperators.LSHL, 6));
			tmp.intoArray(output, 272 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 7).and(MASK13);
			tmp.intoArray(output, 400 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20).and(MASK13);
			tmp.intoArray(output, 528 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 33).and(MASK13);
			tmp.intoArray(output, 656 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 46).and(MASK13);
			tmp.intoArray(output, 784 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 59).and(MASK5);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 128 + i * stride);
			tmp = tmp.or(src.and(MASK8).lanewise(VectorOperators.LSHL, 5));
			tmp.intoArray(output, 912 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK13);
			tmp.intoArray(output, 80 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 21).and(MASK13);
			tmp.intoArray(output, 208 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 34).and(MASK13);
			tmp.intoArray(output, 336 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 47).and(MASK13);
			tmp.intoArray(output, 464 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 60).and(MASK4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 144 + i * stride);
			tmp = tmp.or(src.and(MASK9).lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 592 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 9).and(MASK13);
			tmp.intoArray(output, 720 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 22).and(MASK13);
			tmp.intoArray(output, 848 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 35).and(MASK13);
			tmp.intoArray(output, 976 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48).and(MASK13);
			tmp.intoArray(output, 48 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 61).and(MASK3);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 160 + i * stride);
			tmp = tmp.or(src.and(MASK10).lanewise(VectorOperators.LSHL, 3));
			tmp.intoArray(output, 176 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10).and(MASK13);
			tmp.intoArray(output, 304 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 23).and(MASK13);
			tmp.intoArray(output, 432 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 36).and(MASK13);
			tmp.intoArray(output, 560 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 49).and(MASK13);
			tmp.intoArray(output, 688 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 62).and(MASK2);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 176 + i * stride);
			tmp = tmp.or(src.and(MASK11).lanewise(VectorOperators.LSHL, 2));
			tmp.intoArray(output, 816 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 11).and(MASK13);
			tmp.intoArray(output, 944 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK13);
			tmp.intoArray(output, 112 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 37).and(MASK13);
			tmp.intoArray(output, 240 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 50).and(MASK13);
			tmp.intoArray(output, 368 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 63).and(MASK1);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 192 + i * stride);
			tmp = tmp.or(src.and(MASK12).lanewise(VectorOperators.LSHL, 1));
			tmp.intoArray(output, 496 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12).and(MASK13);
			tmp.intoArray(output, 624 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 25).and(MASK13);
			tmp.intoArray(output, 752 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 38).and(MASK13);
			tmp.intoArray(output, 880 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 51).and(MASK13);
			tmp.intoArray(output, 1008 + i * stride);
		}
	}

	public static void unpack14(long[] input, long[] output) {
		int stride = LongVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 64;
		for (int i = 0; i < 16 / stride; i++) {
			LongVector src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, i * stride);
			LongVector tmp;
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK14);
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14).and(MASK14);
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28).and(MASK14);
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 42).and(MASK14);
			tmp.intoArray(output, 384 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 56).and(MASK8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 16 + i * stride);
			tmp = tmp.or(src.and(MASK6).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 512 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6).and(MASK14);
			tmp.intoArray(output, 640 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20).and(MASK14);
			tmp.intoArray(output, 768 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 34).and(MASK14);
			tmp.intoArray(output, 896 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48).and(MASK14);
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 62).and(MASK2);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 32 + i * stride);
			tmp = tmp.or(src.and(MASK12).lanewise(VectorOperators.LSHL, 2));
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12).and(MASK14);
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 26).and(MASK14);
			tmp.intoArray(output, 448 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40).and(MASK14);
			tmp.intoArray(output, 576 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 54).and(MASK10);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 48 + i * stride);
			tmp = tmp.or(src.and(MASK4).lanewise(VectorOperators.LSHL, 10));
			tmp.intoArray(output, 704 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4).and(MASK14);
			tmp.intoArray(output, 832 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 18).and(MASK14);
			tmp.intoArray(output, 960 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK14);
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 46).and(MASK14);
			tmp.intoArray(output, 160 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 60).and(MASK4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 64 + i * stride);
			tmp = tmp.or(src.and(MASK10).lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 288 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10).and(MASK14);
			tmp.intoArray(output, 416 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK14);
			tmp.intoArray(output, 544 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 38).and(MASK14);
			tmp.intoArray(output, 672 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 52).and(MASK12);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 80 + i * stride);
			tmp = tmp.or(src.and(MASK2).lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 800 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2).and(MASK14);
			tmp.intoArray(output, 928 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK14);
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 30).and(MASK14);
			tmp.intoArray(output, 224 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 44).and(MASK14);
			tmp.intoArray(output, 352 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 58).and(MASK6);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 96 + i * stride);
			tmp = tmp.or(src.and(MASK8).lanewise(VectorOperators.LSHL, 6));
			tmp.intoArray(output, 480 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK14);
			tmp.intoArray(output, 608 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 22).and(MASK14);
			tmp.intoArray(output, 736 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 36).and(MASK14);
			tmp.intoArray(output, 864 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 50).and(MASK14);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 112 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 14));
			tmp.intoArray(output, 992 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK14);
			tmp.intoArray(output, 16 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14).and(MASK14);
			tmp.intoArray(output, 144 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28).and(MASK14);
			tmp.intoArray(output, 272 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 42).and(MASK14);
			tmp.intoArray(output, 400 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 56).and(MASK8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 128 + i * stride);
			tmp = tmp.or(src.and(MASK6).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 528 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6).and(MASK14);
			tmp.intoArray(output, 656 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20).and(MASK14);
			tmp.intoArray(output, 784 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 34).and(MASK14);
			tmp.intoArray(output, 912 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48).and(MASK14);
			tmp.intoArray(output, 80 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 62).and(MASK2);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 144 + i * stride);
			tmp = tmp.or(src.and(MASK12).lanewise(VectorOperators.LSHL, 2));
			tmp.intoArray(output, 208 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12).and(MASK14);
			tmp.intoArray(output, 336 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 26).and(MASK14);
			tmp.intoArray(output, 464 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40).and(MASK14);
			tmp.intoArray(output, 592 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 54).and(MASK10);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 160 + i * stride);
			tmp = tmp.or(src.and(MASK4).lanewise(VectorOperators.LSHL, 10));
			tmp.intoArray(output, 720 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4).and(MASK14);
			tmp.intoArray(output, 848 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 18).and(MASK14);
			tmp.intoArray(output, 976 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK14);
			tmp.intoArray(output, 48 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 46).and(MASK14);
			tmp.intoArray(output, 176 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 60).and(MASK4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 176 + i * stride);
			tmp = tmp.or(src.and(MASK10).lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 304 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10).and(MASK14);
			tmp.intoArray(output, 432 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK14);
			tmp.intoArray(output, 560 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 38).and(MASK14);
			tmp.intoArray(output, 688 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 52).and(MASK12);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 192 + i * stride);
			tmp = tmp.or(src.and(MASK2).lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 816 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2).and(MASK14);
			tmp.intoArray(output, 944 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK14);
			tmp.intoArray(output, 112 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 30).and(MASK14);
			tmp.intoArray(output, 240 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 44).and(MASK14);
			tmp.intoArray(output, 368 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 58).and(MASK6);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 208 + i * stride);
			tmp = tmp.or(src.and(MASK8).lanewise(VectorOperators.LSHL, 6));
			tmp.intoArray(output, 496 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK14);
			tmp.intoArray(output, 624 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 22).and(MASK14);
			tmp.intoArray(output, 752 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 36).and(MASK14);
			tmp.intoArray(output, 880 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 50).and(MASK14);
			tmp.intoArray(output, 1008 + i * stride);
		}
	}

	public static void unpack15(long[] input, long[] output) {
		int stride = LongVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 64;
		for (int i = 0; i < 16 / stride; i++) {
			LongVector src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, i * stride);
			LongVector tmp;
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK15);
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 15).and(MASK15);
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 30).and(MASK15);
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 45).and(MASK15);
			tmp.intoArray(output, 384 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 60).and(MASK4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 16 + i * stride);
			tmp = tmp.or(src.and(MASK11).lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 512 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 11).and(MASK15);
			tmp.intoArray(output, 640 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 26).and(MASK15);
			tmp.intoArray(output, 768 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 41).and(MASK15);
			tmp.intoArray(output, 896 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 56).and(MASK8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 32 + i * stride);
			tmp = tmp.or(src.and(MASK7).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 7).and(MASK15);
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 22).and(MASK15);
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 37).and(MASK15);
			tmp.intoArray(output, 448 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 52).and(MASK12);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 48 + i * stride);
			tmp = tmp.or(src.and(MASK3).lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 576 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 3).and(MASK15);
			tmp.intoArray(output, 704 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 18).and(MASK15);
			tmp.intoArray(output, 832 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 33).and(MASK15);
			tmp.intoArray(output, 960 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48).and(MASK15);
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 63).and(MASK1);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 64 + i * stride);
			tmp = tmp.or(src.and(MASK14).lanewise(VectorOperators.LSHL, 1));
			tmp.intoArray(output, 160 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14).and(MASK15);
			tmp.intoArray(output, 288 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 29).and(MASK15);
			tmp.intoArray(output, 416 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 44).and(MASK15);
			tmp.intoArray(output, 544 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 59).and(MASK5);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 80 + i * stride);
			tmp = tmp.or(src.and(MASK10).lanewise(VectorOperators.LSHL, 5));
			tmp.intoArray(output, 672 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10).and(MASK15);
			tmp.intoArray(output, 800 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 25).and(MASK15);
			tmp.intoArray(output, 928 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40).and(MASK15);
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 55).and(MASK9);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 96 + i * stride);
			tmp = tmp.or(src.and(MASK6).lanewise(VectorOperators.LSHL, 9));
			tmp.intoArray(output, 224 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6).and(MASK15);
			tmp.intoArray(output, 352 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 21).and(MASK15);
			tmp.intoArray(output, 480 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 36).and(MASK15);
			tmp.intoArray(output, 608 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 51).and(MASK13);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 112 + i * stride);
			tmp = tmp.or(src.and(MASK2).lanewise(VectorOperators.LSHL, 13));
			tmp.intoArray(output, 736 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2).and(MASK15);
			tmp.intoArray(output, 864 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 17).and(MASK15);
			tmp.intoArray(output, 992 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK15);
			tmp.intoArray(output, 16 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 47).and(MASK15);
			tmp.intoArray(output, 144 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 62).and(MASK2);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 128 + i * stride);
			tmp = tmp.or(src.and(MASK13).lanewise(VectorOperators.LSHL, 2));
			tmp.intoArray(output, 272 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 13).and(MASK15);
			tmp.intoArray(output, 400 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28).and(MASK15);
			tmp.intoArray(output, 528 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 43).and(MASK15);
			tmp.intoArray(output, 656 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 58).and(MASK6);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 144 + i * stride);
			tmp = tmp.or(src.and(MASK9).lanewise(VectorOperators.LSHL, 6));
			tmp.intoArray(output, 784 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 9).and(MASK15);
			tmp.intoArray(output, 912 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK15);
			tmp.intoArray(output, 80 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 39).and(MASK15);
			tmp.intoArray(output, 208 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 54).and(MASK10);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 160 + i * stride);
			tmp = tmp.or(src.and(MASK5).lanewise(VectorOperators.LSHL, 10));
			tmp.intoArray(output, 336 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 5).and(MASK15);
			tmp.intoArray(output, 464 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20).and(MASK15);
			tmp.intoArray(output, 592 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 35).and(MASK15);
			tmp.intoArray(output, 720 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 50).and(MASK14);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 176 + i * stride);
			tmp = tmp.or(src.and(MASK1).lanewise(VectorOperators.LSHL, 14));
			tmp.intoArray(output, 848 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 1).and(MASK15);
			tmp.intoArray(output, 976 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK15);
			tmp.intoArray(output, 48 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 31).and(MASK15);
			tmp.intoArray(output, 176 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 46).and(MASK15);
			tmp.intoArray(output, 304 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 61).and(MASK3);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 192 + i * stride);
			tmp = tmp.or(src.and(MASK12).lanewise(VectorOperators.LSHL, 3));
			tmp.intoArray(output, 432 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12).and(MASK15);
			tmp.intoArray(output, 560 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 27).and(MASK15);
			tmp.intoArray(output, 688 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 42).and(MASK15);
			tmp.intoArray(output, 816 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 57).and(MASK7);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 208 + i * stride);
			tmp = tmp.or(src.and(MASK8).lanewise(VectorOperators.LSHL, 7));
			tmp.intoArray(output, 944 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK15);
			tmp.intoArray(output, 112 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 23).and(MASK15);
			tmp.intoArray(output, 240 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 38).and(MASK15);
			tmp.intoArray(output, 368 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 53).and(MASK11);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 224 + i * stride);
			tmp = tmp.or(src.and(MASK4).lanewise(VectorOperators.LSHL, 11));
			tmp.intoArray(output, 496 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4).and(MASK15);
			tmp.intoArray(output, 624 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 19).and(MASK15);
			tmp.intoArray(output, 752 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 34).and(MASK15);
			tmp.intoArray(output, 880 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 49).and(MASK15);
			tmp.intoArray(output, 1008 + i * stride);
		}
	}

	public static void unpack16(long[] input, long[] output) {
		int stride = LongVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 64;
		for (int i = 0; i < 16 / stride; i++) {
			LongVector src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, i * stride);
			LongVector tmp;
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK16);
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK16);
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK16);
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48).and(MASK16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 16 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 384 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK16);
			tmp.intoArray(output, 512 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK16);
			tmp.intoArray(output, 640 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK16);
			tmp.intoArray(output, 768 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48).and(MASK16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 32 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 896 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK16);
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK16);
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK16);
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48).and(MASK16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 48 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 448 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK16);
			tmp.intoArray(output, 576 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK16);
			tmp.intoArray(output, 704 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK16);
			tmp.intoArray(output, 832 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48).and(MASK16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 64 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 960 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK16);
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK16);
			tmp.intoArray(output, 160 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK16);
			tmp.intoArray(output, 288 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48).and(MASK16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 80 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 416 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK16);
			tmp.intoArray(output, 544 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK16);
			tmp.intoArray(output, 672 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK16);
			tmp.intoArray(output, 800 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48).and(MASK16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 96 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 928 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK16);
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK16);
			tmp.intoArray(output, 224 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK16);
			tmp.intoArray(output, 352 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48).and(MASK16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 112 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 480 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK16);
			tmp.intoArray(output, 608 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK16);
			tmp.intoArray(output, 736 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK16);
			tmp.intoArray(output, 864 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48).and(MASK16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 128 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 992 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK16);
			tmp.intoArray(output, 16 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK16);
			tmp.intoArray(output, 144 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK16);
			tmp.intoArray(output, 272 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48).and(MASK16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 144 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 400 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK16);
			tmp.intoArray(output, 528 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK16);
			tmp.intoArray(output, 656 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK16);
			tmp.intoArray(output, 784 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48).and(MASK16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 160 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 912 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK16);
			tmp.intoArray(output, 80 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK16);
			tmp.intoArray(output, 208 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK16);
			tmp.intoArray(output, 336 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48).and(MASK16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 176 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 464 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK16);
			tmp.intoArray(output, 592 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK16);
			tmp.intoArray(output, 720 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK16);
			tmp.intoArray(output, 848 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48).and(MASK16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 192 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 976 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK16);
			tmp.intoArray(output, 48 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK16);
			tmp.intoArray(output, 176 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK16);
			tmp.intoArray(output, 304 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48).and(MASK16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 208 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 432 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK16);
			tmp.intoArray(output, 560 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK16);
			tmp.intoArray(output, 688 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK16);
			tmp.intoArray(output, 816 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48).and(MASK16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 224 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 944 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK16);
			tmp.intoArray(output, 112 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK16);
			tmp.intoArray(output, 240 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK16);
			tmp.intoArray(output, 368 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48).and(MASK16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 240 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 496 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK16);
			tmp.intoArray(output, 624 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK16);
			tmp.intoArray(output, 752 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK16);
			tmp.intoArray(output, 880 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48).and(MASK16);
			tmp.intoArray(output, 1008 + i * stride);
		}
	}

	public static void unpack17(long[] input, long[] output) {
		int stride = LongVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 64;
		for (int i = 0; i < 16 / stride; i++) {
			LongVector src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, i * stride);
			LongVector tmp;
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK17);
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 17).and(MASK17);
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 34).and(MASK17);
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 51).and(MASK13);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 16 + i * stride);
			tmp = tmp.or(src.and(MASK4).lanewise(VectorOperators.LSHL, 13));
			tmp.intoArray(output, 384 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4).and(MASK17);
			tmp.intoArray(output, 512 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 21).and(MASK17);
			tmp.intoArray(output, 640 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 38).and(MASK17);
			tmp.intoArray(output, 768 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 55).and(MASK9);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 32 + i * stride);
			tmp = tmp.or(src.and(MASK8).lanewise(VectorOperators.LSHL, 9));
			tmp.intoArray(output, 896 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK17);
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 25).and(MASK17);
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 42).and(MASK17);
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 59).and(MASK5);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 48 + i * stride);
			tmp = tmp.or(src.and(MASK12).lanewise(VectorOperators.LSHL, 5));
			tmp.intoArray(output, 448 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12).and(MASK17);
			tmp.intoArray(output, 576 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 29).and(MASK17);
			tmp.intoArray(output, 704 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 46).and(MASK17);
			tmp.intoArray(output, 832 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 63).and(MASK1);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 64 + i * stride);
			tmp = tmp.or(src.and(MASK16).lanewise(VectorOperators.LSHL, 1));
			tmp.intoArray(output, 960 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK17);
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 33).and(MASK17);
			tmp.intoArray(output, 160 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 50).and(MASK14);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 80 + i * stride);
			tmp = tmp.or(src.and(MASK3).lanewise(VectorOperators.LSHL, 14));
			tmp.intoArray(output, 288 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 3).and(MASK17);
			tmp.intoArray(output, 416 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20).and(MASK17);
			tmp.intoArray(output, 544 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 37).and(MASK17);
			tmp.intoArray(output, 672 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 54).and(MASK10);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 96 + i * stride);
			tmp = tmp.or(src.and(MASK7).lanewise(VectorOperators.LSHL, 10));
			tmp.intoArray(output, 800 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 7).and(MASK17);
			tmp.intoArray(output, 928 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK17);
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 41).and(MASK17);
			tmp.intoArray(output, 224 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 58).and(MASK6);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 112 + i * stride);
			tmp = tmp.or(src.and(MASK11).lanewise(VectorOperators.LSHL, 6));
			tmp.intoArray(output, 352 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 11).and(MASK17);
			tmp.intoArray(output, 480 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28).and(MASK17);
			tmp.intoArray(output, 608 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 45).and(MASK17);
			tmp.intoArray(output, 736 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 62).and(MASK2);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 128 + i * stride);
			tmp = tmp.or(src.and(MASK15).lanewise(VectorOperators.LSHL, 2));
			tmp.intoArray(output, 864 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 15).and(MASK17);
			tmp.intoArray(output, 992 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK17);
			tmp.intoArray(output, 16 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 49).and(MASK15);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 144 + i * stride);
			tmp = tmp.or(src.and(MASK2).lanewise(VectorOperators.LSHL, 15));
			tmp.intoArray(output, 144 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2).and(MASK17);
			tmp.intoArray(output, 272 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 19).and(MASK17);
			tmp.intoArray(output, 400 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 36).and(MASK17);
			tmp.intoArray(output, 528 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 53).and(MASK11);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 160 + i * stride);
			tmp = tmp.or(src.and(MASK6).lanewise(VectorOperators.LSHL, 11));
			tmp.intoArray(output, 656 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6).and(MASK17);
			tmp.intoArray(output, 784 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 23).and(MASK17);
			tmp.intoArray(output, 912 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40).and(MASK17);
			tmp.intoArray(output, 80 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 57).and(MASK7);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 176 + i * stride);
			tmp = tmp.or(src.and(MASK10).lanewise(VectorOperators.LSHL, 7));
			tmp.intoArray(output, 208 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10).and(MASK17);
			tmp.intoArray(output, 336 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 27).and(MASK17);
			tmp.intoArray(output, 464 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 44).and(MASK17);
			tmp.intoArray(output, 592 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 61).and(MASK3);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 192 + i * stride);
			tmp = tmp.or(src.and(MASK14).lanewise(VectorOperators.LSHL, 3));
			tmp.intoArray(output, 720 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14).and(MASK17);
			tmp.intoArray(output, 848 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 31).and(MASK17);
			tmp.intoArray(output, 976 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48).and(MASK16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 208 + i * stride);
			tmp = tmp.or(src.and(MASK1).lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 48 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 1).and(MASK17);
			tmp.intoArray(output, 176 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 18).and(MASK17);
			tmp.intoArray(output, 304 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 35).and(MASK17);
			tmp.intoArray(output, 432 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 52).and(MASK12);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 224 + i * stride);
			tmp = tmp.or(src.and(MASK5).lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 560 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 5).and(MASK17);
			tmp.intoArray(output, 688 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 22).and(MASK17);
			tmp.intoArray(output, 816 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 39).and(MASK17);
			tmp.intoArray(output, 944 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 56).and(MASK8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 240 + i * stride);
			tmp = tmp.or(src.and(MASK9).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 112 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 9).and(MASK17);
			tmp.intoArray(output, 240 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 26).and(MASK17);
			tmp.intoArray(output, 368 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 43).and(MASK17);
			tmp.intoArray(output, 496 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 60).and(MASK4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 256 + i * stride);
			tmp = tmp.or(src.and(MASK13).lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 624 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 13).and(MASK17);
			tmp.intoArray(output, 752 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 30).and(MASK17);
			tmp.intoArray(output, 880 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 47).and(MASK17);
			tmp.intoArray(output, 1008 + i * stride);
		}
	}

	public static void unpack18(long[] input, long[] output) {
		int stride = LongVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 64;
		for (int i = 0; i < 16 / stride; i++) {
			LongVector src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, i * stride);
			LongVector tmp;
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK18);
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 18).and(MASK18);
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 36).and(MASK18);
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 54).and(MASK10);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 16 + i * stride);
			tmp = tmp.or(src.and(MASK8).lanewise(VectorOperators.LSHL, 10));
			tmp.intoArray(output, 384 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK18);
			tmp.intoArray(output, 512 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 26).and(MASK18);
			tmp.intoArray(output, 640 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 44).and(MASK18);
			tmp.intoArray(output, 768 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 62).and(MASK2);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 32 + i * stride);
			tmp = tmp.or(src.and(MASK16).lanewise(VectorOperators.LSHL, 2));
			tmp.intoArray(output, 896 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK18);
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 34).and(MASK18);
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 52).and(MASK12);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 48 + i * stride);
			tmp = tmp.or(src.and(MASK6).lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6).and(MASK18);
			tmp.intoArray(output, 448 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK18);
			tmp.intoArray(output, 576 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 42).and(MASK18);
			tmp.intoArray(output, 704 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 60).and(MASK4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 64 + i * stride);
			tmp = tmp.or(src.and(MASK14).lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 832 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14).and(MASK18);
			tmp.intoArray(output, 960 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK18);
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 50).and(MASK14);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 80 + i * stride);
			tmp = tmp.or(src.and(MASK4).lanewise(VectorOperators.LSHL, 14));
			tmp.intoArray(output, 160 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4).and(MASK18);
			tmp.intoArray(output, 288 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 22).and(MASK18);
			tmp.intoArray(output, 416 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40).and(MASK18);
			tmp.intoArray(output, 544 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 58).and(MASK6);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 96 + i * stride);
			tmp = tmp.or(src.and(MASK12).lanewise(VectorOperators.LSHL, 6));
			tmp.intoArray(output, 672 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12).and(MASK18);
			tmp.intoArray(output, 800 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 30).and(MASK18);
			tmp.intoArray(output, 928 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48).and(MASK16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 112 + i * stride);
			tmp = tmp.or(src.and(MASK2).lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2).and(MASK18);
			tmp.intoArray(output, 224 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20).and(MASK18);
			tmp.intoArray(output, 352 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 38).and(MASK18);
			tmp.intoArray(output, 480 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 56).and(MASK8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 128 + i * stride);
			tmp = tmp.or(src.and(MASK10).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 608 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10).and(MASK18);
			tmp.intoArray(output, 736 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28).and(MASK18);
			tmp.intoArray(output, 864 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 46).and(MASK18);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 144 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 18));
			tmp.intoArray(output, 992 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK18);
			tmp.intoArray(output, 16 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 18).and(MASK18);
			tmp.intoArray(output, 144 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 36).and(MASK18);
			tmp.intoArray(output, 272 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 54).and(MASK10);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 160 + i * stride);
			tmp = tmp.or(src.and(MASK8).lanewise(VectorOperators.LSHL, 10));
			tmp.intoArray(output, 400 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK18);
			tmp.intoArray(output, 528 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 26).and(MASK18);
			tmp.intoArray(output, 656 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 44).and(MASK18);
			tmp.intoArray(output, 784 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 62).and(MASK2);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 176 + i * stride);
			tmp = tmp.or(src.and(MASK16).lanewise(VectorOperators.LSHL, 2));
			tmp.intoArray(output, 912 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK18);
			tmp.intoArray(output, 80 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 34).and(MASK18);
			tmp.intoArray(output, 208 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 52).and(MASK12);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 192 + i * stride);
			tmp = tmp.or(src.and(MASK6).lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 336 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6).and(MASK18);
			tmp.intoArray(output, 464 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK18);
			tmp.intoArray(output, 592 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 42).and(MASK18);
			tmp.intoArray(output, 720 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 60).and(MASK4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 208 + i * stride);
			tmp = tmp.or(src.and(MASK14).lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 848 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14).and(MASK18);
			tmp.intoArray(output, 976 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK18);
			tmp.intoArray(output, 48 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 50).and(MASK14);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 224 + i * stride);
			tmp = tmp.or(src.and(MASK4).lanewise(VectorOperators.LSHL, 14));
			tmp.intoArray(output, 176 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4).and(MASK18);
			tmp.intoArray(output, 304 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 22).and(MASK18);
			tmp.intoArray(output, 432 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40).and(MASK18);
			tmp.intoArray(output, 560 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 58).and(MASK6);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 240 + i * stride);
			tmp = tmp.or(src.and(MASK12).lanewise(VectorOperators.LSHL, 6));
			tmp.intoArray(output, 688 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12).and(MASK18);
			tmp.intoArray(output, 816 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 30).and(MASK18);
			tmp.intoArray(output, 944 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48).and(MASK16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 256 + i * stride);
			tmp = tmp.or(src.and(MASK2).lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 112 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2).and(MASK18);
			tmp.intoArray(output, 240 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20).and(MASK18);
			tmp.intoArray(output, 368 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 38).and(MASK18);
			tmp.intoArray(output, 496 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 56).and(MASK8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 272 + i * stride);
			tmp = tmp.or(src.and(MASK10).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 624 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10).and(MASK18);
			tmp.intoArray(output, 752 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28).and(MASK18);
			tmp.intoArray(output, 880 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 46).and(MASK18);
			tmp.intoArray(output, 1008 + i * stride);
		}
	}

	public static void unpack19(long[] input, long[] output) {
		int stride = LongVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 64;
		for (int i = 0; i < 16 / stride; i++) {
			LongVector src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, i * stride);
			LongVector tmp;
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK19);
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 19).and(MASK19);
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 38).and(MASK19);
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 57).and(MASK7);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 16 + i * stride);
			tmp = tmp.or(src.and(MASK12).lanewise(VectorOperators.LSHL, 7));
			tmp.intoArray(output, 384 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12).and(MASK19);
			tmp.intoArray(output, 512 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 31).and(MASK19);
			tmp.intoArray(output, 640 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 50).and(MASK14);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 32 + i * stride);
			tmp = tmp.or(src.and(MASK5).lanewise(VectorOperators.LSHL, 14));
			tmp.intoArray(output, 768 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 5).and(MASK19);
			tmp.intoArray(output, 896 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK19);
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 43).and(MASK19);
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 62).and(MASK2);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 48 + i * stride);
			tmp = tmp.or(src.and(MASK17).lanewise(VectorOperators.LSHL, 2));
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 17).and(MASK19);
			tmp.intoArray(output, 448 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 36).and(MASK19);
			tmp.intoArray(output, 576 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 55).and(MASK9);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 64 + i * stride);
			tmp = tmp.or(src.and(MASK10).lanewise(VectorOperators.LSHL, 9));
			tmp.intoArray(output, 704 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10).and(MASK19);
			tmp.intoArray(output, 832 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 29).and(MASK19);
			tmp.intoArray(output, 960 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48).and(MASK16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 80 + i * stride);
			tmp = tmp.or(src.and(MASK3).lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 3).and(MASK19);
			tmp.intoArray(output, 160 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 22).and(MASK19);
			tmp.intoArray(output, 288 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 41).and(MASK19);
			tmp.intoArray(output, 416 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 60).and(MASK4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 96 + i * stride);
			tmp = tmp.or(src.and(MASK15).lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 544 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 15).and(MASK19);
			tmp.intoArray(output, 672 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 34).and(MASK19);
			tmp.intoArray(output, 800 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 53).and(MASK11);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 112 + i * stride);
			tmp = tmp.or(src.and(MASK8).lanewise(VectorOperators.LSHL, 11));
			tmp.intoArray(output, 928 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK19);
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 27).and(MASK19);
			tmp.intoArray(output, 224 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 46).and(MASK18);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 128 + i * stride);
			tmp = tmp.or(src.and(MASK1).lanewise(VectorOperators.LSHL, 18));
			tmp.intoArray(output, 352 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 1).and(MASK19);
			tmp.intoArray(output, 480 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20).and(MASK19);
			tmp.intoArray(output, 608 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 39).and(MASK19);
			tmp.intoArray(output, 736 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 58).and(MASK6);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 144 + i * stride);
			tmp = tmp.or(src.and(MASK13).lanewise(VectorOperators.LSHL, 6));
			tmp.intoArray(output, 864 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 13).and(MASK19);
			tmp.intoArray(output, 992 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK19);
			tmp.intoArray(output, 16 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 51).and(MASK13);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 160 + i * stride);
			tmp = tmp.or(src.and(MASK6).lanewise(VectorOperators.LSHL, 13));
			tmp.intoArray(output, 144 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6).and(MASK19);
			tmp.intoArray(output, 272 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 25).and(MASK19);
			tmp.intoArray(output, 400 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 44).and(MASK19);
			tmp.intoArray(output, 528 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 63).and(MASK1);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 176 + i * stride);
			tmp = tmp.or(src.and(MASK18).lanewise(VectorOperators.LSHL, 1));
			tmp.intoArray(output, 656 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 18).and(MASK19);
			tmp.intoArray(output, 784 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 37).and(MASK19);
			tmp.intoArray(output, 912 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 56).and(MASK8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 192 + i * stride);
			tmp = tmp.or(src.and(MASK11).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 80 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 11).and(MASK19);
			tmp.intoArray(output, 208 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 30).and(MASK19);
			tmp.intoArray(output, 336 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 49).and(MASK15);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 208 + i * stride);
			tmp = tmp.or(src.and(MASK4).lanewise(VectorOperators.LSHL, 15));
			tmp.intoArray(output, 464 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4).and(MASK19);
			tmp.intoArray(output, 592 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 23).and(MASK19);
			tmp.intoArray(output, 720 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 42).and(MASK19);
			tmp.intoArray(output, 848 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 61).and(MASK3);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 224 + i * stride);
			tmp = tmp.or(src.and(MASK16).lanewise(VectorOperators.LSHL, 3));
			tmp.intoArray(output, 976 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK19);
			tmp.intoArray(output, 48 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 35).and(MASK19);
			tmp.intoArray(output, 176 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 54).and(MASK10);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 240 + i * stride);
			tmp = tmp.or(src.and(MASK9).lanewise(VectorOperators.LSHL, 10));
			tmp.intoArray(output, 304 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 9).and(MASK19);
			tmp.intoArray(output, 432 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28).and(MASK19);
			tmp.intoArray(output, 560 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 47).and(MASK17);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 256 + i * stride);
			tmp = tmp.or(src.and(MASK2).lanewise(VectorOperators.LSHL, 17));
			tmp.intoArray(output, 688 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2).and(MASK19);
			tmp.intoArray(output, 816 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 21).and(MASK19);
			tmp.intoArray(output, 944 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40).and(MASK19);
			tmp.intoArray(output, 112 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 59).and(MASK5);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 272 + i * stride);
			tmp = tmp.or(src.and(MASK14).lanewise(VectorOperators.LSHL, 5));
			tmp.intoArray(output, 240 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14).and(MASK19);
			tmp.intoArray(output, 368 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 33).and(MASK19);
			tmp.intoArray(output, 496 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 52).and(MASK12);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 288 + i * stride);
			tmp = tmp.or(src.and(MASK7).lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 624 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 7).and(MASK19);
			tmp.intoArray(output, 752 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 26).and(MASK19);
			tmp.intoArray(output, 880 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 45).and(MASK19);
			tmp.intoArray(output, 1008 + i * stride);
		}
	}

	public static void unpack20(long[] input, long[] output) {
		int stride = LongVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 64;
		for (int i = 0; i < 16 / stride; i++) {
			LongVector src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, i * stride);
			LongVector tmp;
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK20);
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20).and(MASK20);
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40).and(MASK20);
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 60).and(MASK4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 16 + i * stride);
			tmp = tmp.or(src.and(MASK16).lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 384 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK20);
			tmp.intoArray(output, 512 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 36).and(MASK20);
			tmp.intoArray(output, 640 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 56).and(MASK8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 32 + i * stride);
			tmp = tmp.or(src.and(MASK12).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 768 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12).and(MASK20);
			tmp.intoArray(output, 896 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK20);
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 52).and(MASK12);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 48 + i * stride);
			tmp = tmp.or(src.and(MASK8).lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK20);
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28).and(MASK20);
			tmp.intoArray(output, 448 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48).and(MASK16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 64 + i * stride);
			tmp = tmp.or(src.and(MASK4).lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 576 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4).and(MASK20);
			tmp.intoArray(output, 704 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK20);
			tmp.intoArray(output, 832 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 44).and(MASK20);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 80 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 20));
			tmp.intoArray(output, 960 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK20);
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20).and(MASK20);
			tmp.intoArray(output, 160 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40).and(MASK20);
			tmp.intoArray(output, 288 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 60).and(MASK4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 96 + i * stride);
			tmp = tmp.or(src.and(MASK16).lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 416 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK20);
			tmp.intoArray(output, 544 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 36).and(MASK20);
			tmp.intoArray(output, 672 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 56).and(MASK8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 112 + i * stride);
			tmp = tmp.or(src.and(MASK12).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 800 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12).and(MASK20);
			tmp.intoArray(output, 928 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK20);
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 52).and(MASK12);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 128 + i * stride);
			tmp = tmp.or(src.and(MASK8).lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 224 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK20);
			tmp.intoArray(output, 352 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28).and(MASK20);
			tmp.intoArray(output, 480 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48).and(MASK16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 144 + i * stride);
			tmp = tmp.or(src.and(MASK4).lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 608 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4).and(MASK20);
			tmp.intoArray(output, 736 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK20);
			tmp.intoArray(output, 864 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 44).and(MASK20);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 160 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 20));
			tmp.intoArray(output, 992 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK20);
			tmp.intoArray(output, 16 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20).and(MASK20);
			tmp.intoArray(output, 144 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40).and(MASK20);
			tmp.intoArray(output, 272 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 60).and(MASK4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 176 + i * stride);
			tmp = tmp.or(src.and(MASK16).lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 400 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK20);
			tmp.intoArray(output, 528 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 36).and(MASK20);
			tmp.intoArray(output, 656 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 56).and(MASK8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 192 + i * stride);
			tmp = tmp.or(src.and(MASK12).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 784 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12).and(MASK20);
			tmp.intoArray(output, 912 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK20);
			tmp.intoArray(output, 80 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 52).and(MASK12);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 208 + i * stride);
			tmp = tmp.or(src.and(MASK8).lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 208 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK20);
			tmp.intoArray(output, 336 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28).and(MASK20);
			tmp.intoArray(output, 464 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48).and(MASK16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 224 + i * stride);
			tmp = tmp.or(src.and(MASK4).lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 592 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4).and(MASK20);
			tmp.intoArray(output, 720 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK20);
			tmp.intoArray(output, 848 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 44).and(MASK20);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 240 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 20));
			tmp.intoArray(output, 976 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK20);
			tmp.intoArray(output, 48 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20).and(MASK20);
			tmp.intoArray(output, 176 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40).and(MASK20);
			tmp.intoArray(output, 304 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 60).and(MASK4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 256 + i * stride);
			tmp = tmp.or(src.and(MASK16).lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 432 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK20);
			tmp.intoArray(output, 560 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 36).and(MASK20);
			tmp.intoArray(output, 688 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 56).and(MASK8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 272 + i * stride);
			tmp = tmp.or(src.and(MASK12).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 816 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12).and(MASK20);
			tmp.intoArray(output, 944 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK20);
			tmp.intoArray(output, 112 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 52).and(MASK12);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 288 + i * stride);
			tmp = tmp.or(src.and(MASK8).lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 240 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK20);
			tmp.intoArray(output, 368 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28).and(MASK20);
			tmp.intoArray(output, 496 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48).and(MASK16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 304 + i * stride);
			tmp = tmp.or(src.and(MASK4).lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 624 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4).and(MASK20);
			tmp.intoArray(output, 752 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK20);
			tmp.intoArray(output, 880 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 44).and(MASK20);
			tmp.intoArray(output, 1008 + i * stride);
		}
	}

	public static void unpack21(long[] input, long[] output) {
		int stride = LongVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 64;
		for (int i = 0; i < 16 / stride; i++) {
			LongVector src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, i * stride);
			LongVector tmp;
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK21);
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 21).and(MASK21);
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 42).and(MASK21);
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 63).and(MASK1);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 16 + i * stride);
			tmp = tmp.or(src.and(MASK20).lanewise(VectorOperators.LSHL, 1));
			tmp.intoArray(output, 384 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20).and(MASK21);
			tmp.intoArray(output, 512 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 41).and(MASK21);
			tmp.intoArray(output, 640 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 62).and(MASK2);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 32 + i * stride);
			tmp = tmp.or(src.and(MASK19).lanewise(VectorOperators.LSHL, 2));
			tmp.intoArray(output, 768 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 19).and(MASK21);
			tmp.intoArray(output, 896 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40).and(MASK21);
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 61).and(MASK3);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 48 + i * stride);
			tmp = tmp.or(src.and(MASK18).lanewise(VectorOperators.LSHL, 3));
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 18).and(MASK21);
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 39).and(MASK21);
			tmp.intoArray(output, 448 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 60).and(MASK4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 64 + i * stride);
			tmp = tmp.or(src.and(MASK17).lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 576 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 17).and(MASK21);
			tmp.intoArray(output, 704 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 38).and(MASK21);
			tmp.intoArray(output, 832 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 59).and(MASK5);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 80 + i * stride);
			tmp = tmp.or(src.and(MASK16).lanewise(VectorOperators.LSHL, 5));
			tmp.intoArray(output, 960 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK21);
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 37).and(MASK21);
			tmp.intoArray(output, 160 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 58).and(MASK6);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 96 + i * stride);
			tmp = tmp.or(src.and(MASK15).lanewise(VectorOperators.LSHL, 6));
			tmp.intoArray(output, 288 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 15).and(MASK21);
			tmp.intoArray(output, 416 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 36).and(MASK21);
			tmp.intoArray(output, 544 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 57).and(MASK7);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 112 + i * stride);
			tmp = tmp.or(src.and(MASK14).lanewise(VectorOperators.LSHL, 7));
			tmp.intoArray(output, 672 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14).and(MASK21);
			tmp.intoArray(output, 800 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 35).and(MASK21);
			tmp.intoArray(output, 928 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 56).and(MASK8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 128 + i * stride);
			tmp = tmp.or(src.and(MASK13).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 13).and(MASK21);
			tmp.intoArray(output, 224 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 34).and(MASK21);
			tmp.intoArray(output, 352 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 55).and(MASK9);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 144 + i * stride);
			tmp = tmp.or(src.and(MASK12).lanewise(VectorOperators.LSHL, 9));
			tmp.intoArray(output, 480 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12).and(MASK21);
			tmp.intoArray(output, 608 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 33).and(MASK21);
			tmp.intoArray(output, 736 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 54).and(MASK10);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 160 + i * stride);
			tmp = tmp.or(src.and(MASK11).lanewise(VectorOperators.LSHL, 10));
			tmp.intoArray(output, 864 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 11).and(MASK21);
			tmp.intoArray(output, 992 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK21);
			tmp.intoArray(output, 16 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 53).and(MASK11);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 176 + i * stride);
			tmp = tmp.or(src.and(MASK10).lanewise(VectorOperators.LSHL, 11));
			tmp.intoArray(output, 144 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10).and(MASK21);
			tmp.intoArray(output, 272 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 31).and(MASK21);
			tmp.intoArray(output, 400 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 52).and(MASK12);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 192 + i * stride);
			tmp = tmp.or(src.and(MASK9).lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 528 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 9).and(MASK21);
			tmp.intoArray(output, 656 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 30).and(MASK21);
			tmp.intoArray(output, 784 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 51).and(MASK13);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 208 + i * stride);
			tmp = tmp.or(src.and(MASK8).lanewise(VectorOperators.LSHL, 13));
			tmp.intoArray(output, 912 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK21);
			tmp.intoArray(output, 80 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 29).and(MASK21);
			tmp.intoArray(output, 208 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 50).and(MASK14);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 224 + i * stride);
			tmp = tmp.or(src.and(MASK7).lanewise(VectorOperators.LSHL, 14));
			tmp.intoArray(output, 336 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 7).and(MASK21);
			tmp.intoArray(output, 464 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28).and(MASK21);
			tmp.intoArray(output, 592 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 49).and(MASK15);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 240 + i * stride);
			tmp = tmp.or(src.and(MASK6).lanewise(VectorOperators.LSHL, 15));
			tmp.intoArray(output, 720 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6).and(MASK21);
			tmp.intoArray(output, 848 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 27).and(MASK21);
			tmp.intoArray(output, 976 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48).and(MASK16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 256 + i * stride);
			tmp = tmp.or(src.and(MASK5).lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 48 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 5).and(MASK21);
			tmp.intoArray(output, 176 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 26).and(MASK21);
			tmp.intoArray(output, 304 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 47).and(MASK17);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 272 + i * stride);
			tmp = tmp.or(src.and(MASK4).lanewise(VectorOperators.LSHL, 17));
			tmp.intoArray(output, 432 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4).and(MASK21);
			tmp.intoArray(output, 560 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 25).and(MASK21);
			tmp.intoArray(output, 688 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 46).and(MASK18);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 288 + i * stride);
			tmp = tmp.or(src.and(MASK3).lanewise(VectorOperators.LSHL, 18));
			tmp.intoArray(output, 816 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 3).and(MASK21);
			tmp.intoArray(output, 944 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK21);
			tmp.intoArray(output, 112 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 45).and(MASK19);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 304 + i * stride);
			tmp = tmp.or(src.and(MASK2).lanewise(VectorOperators.LSHL, 19));
			tmp.intoArray(output, 240 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2).and(MASK21);
			tmp.intoArray(output, 368 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 23).and(MASK21);
			tmp.intoArray(output, 496 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 44).and(MASK20);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 320 + i * stride);
			tmp = tmp.or(src.and(MASK1).lanewise(VectorOperators.LSHL, 20));
			tmp.intoArray(output, 624 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 1).and(MASK21);
			tmp.intoArray(output, 752 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 22).and(MASK21);
			tmp.intoArray(output, 880 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 43).and(MASK21);
			tmp.intoArray(output, 1008 + i * stride);
		}
	}

	public static void unpack22(long[] input, long[] output) {
		int stride = LongVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 64;
		for (int i = 0; i < 16 / stride; i++) {
			LongVector src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, i * stride);
			LongVector tmp;
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK22);
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 22).and(MASK22);
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 44).and(MASK20);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 16 + i * stride);
			tmp = tmp.or(src.and(MASK2).lanewise(VectorOperators.LSHL, 20));
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2).and(MASK22);
			tmp.intoArray(output, 384 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK22);
			tmp.intoArray(output, 512 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 46).and(MASK18);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 32 + i * stride);
			tmp = tmp.or(src.and(MASK4).lanewise(VectorOperators.LSHL, 18));
			tmp.intoArray(output, 640 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4).and(MASK22);
			tmp.intoArray(output, 768 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 26).and(MASK22);
			tmp.intoArray(output, 896 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48).and(MASK16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 48 + i * stride);
			tmp = tmp.or(src.and(MASK6).lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6).and(MASK22);
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28).and(MASK22);
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 50).and(MASK14);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 64 + i * stride);
			tmp = tmp.or(src.and(MASK8).lanewise(VectorOperators.LSHL, 14));
			tmp.intoArray(output, 448 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK22);
			tmp.intoArray(output, 576 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 30).and(MASK22);
			tmp.intoArray(output, 704 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 52).and(MASK12);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 80 + i * stride);
			tmp = tmp.or(src.and(MASK10).lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 832 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10).and(MASK22);
			tmp.intoArray(output, 960 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK22);
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 54).and(MASK10);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 96 + i * stride);
			tmp = tmp.or(src.and(MASK12).lanewise(VectorOperators.LSHL, 10));
			tmp.intoArray(output, 160 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12).and(MASK22);
			tmp.intoArray(output, 288 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 34).and(MASK22);
			tmp.intoArray(output, 416 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 56).and(MASK8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 112 + i * stride);
			tmp = tmp.or(src.and(MASK14).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 544 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14).and(MASK22);
			tmp.intoArray(output, 672 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 36).and(MASK22);
			tmp.intoArray(output, 800 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 58).and(MASK6);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 128 + i * stride);
			tmp = tmp.or(src.and(MASK16).lanewise(VectorOperators.LSHL, 6));
			tmp.intoArray(output, 928 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK22);
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 38).and(MASK22);
			tmp.intoArray(output, 224 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 60).and(MASK4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 144 + i * stride);
			tmp = tmp.or(src.and(MASK18).lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 352 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 18).and(MASK22);
			tmp.intoArray(output, 480 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40).and(MASK22);
			tmp.intoArray(output, 608 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 62).and(MASK2);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 160 + i * stride);
			tmp = tmp.or(src.and(MASK20).lanewise(VectorOperators.LSHL, 2));
			tmp.intoArray(output, 736 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20).and(MASK22);
			tmp.intoArray(output, 864 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 42).and(MASK22);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 176 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 22));
			tmp.intoArray(output, 992 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK22);
			tmp.intoArray(output, 16 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 22).and(MASK22);
			tmp.intoArray(output, 144 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 44).and(MASK20);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 192 + i * stride);
			tmp = tmp.or(src.and(MASK2).lanewise(VectorOperators.LSHL, 20));
			tmp.intoArray(output, 272 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2).and(MASK22);
			tmp.intoArray(output, 400 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK22);
			tmp.intoArray(output, 528 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 46).and(MASK18);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 208 + i * stride);
			tmp = tmp.or(src.and(MASK4).lanewise(VectorOperators.LSHL, 18));
			tmp.intoArray(output, 656 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4).and(MASK22);
			tmp.intoArray(output, 784 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 26).and(MASK22);
			tmp.intoArray(output, 912 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48).and(MASK16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 224 + i * stride);
			tmp = tmp.or(src.and(MASK6).lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 80 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6).and(MASK22);
			tmp.intoArray(output, 208 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28).and(MASK22);
			tmp.intoArray(output, 336 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 50).and(MASK14);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 240 + i * stride);
			tmp = tmp.or(src.and(MASK8).lanewise(VectorOperators.LSHL, 14));
			tmp.intoArray(output, 464 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK22);
			tmp.intoArray(output, 592 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 30).and(MASK22);
			tmp.intoArray(output, 720 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 52).and(MASK12);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 256 + i * stride);
			tmp = tmp.or(src.and(MASK10).lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 848 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10).and(MASK22);
			tmp.intoArray(output, 976 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK22);
			tmp.intoArray(output, 48 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 54).and(MASK10);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 272 + i * stride);
			tmp = tmp.or(src.and(MASK12).lanewise(VectorOperators.LSHL, 10));
			tmp.intoArray(output, 176 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12).and(MASK22);
			tmp.intoArray(output, 304 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 34).and(MASK22);
			tmp.intoArray(output, 432 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 56).and(MASK8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 288 + i * stride);
			tmp = tmp.or(src.and(MASK14).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 560 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14).and(MASK22);
			tmp.intoArray(output, 688 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 36).and(MASK22);
			tmp.intoArray(output, 816 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 58).and(MASK6);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 304 + i * stride);
			tmp = tmp.or(src.and(MASK16).lanewise(VectorOperators.LSHL, 6));
			tmp.intoArray(output, 944 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK22);
			tmp.intoArray(output, 112 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 38).and(MASK22);
			tmp.intoArray(output, 240 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 60).and(MASK4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 320 + i * stride);
			tmp = tmp.or(src.and(MASK18).lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 368 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 18).and(MASK22);
			tmp.intoArray(output, 496 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40).and(MASK22);
			tmp.intoArray(output, 624 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 62).and(MASK2);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 336 + i * stride);
			tmp = tmp.or(src.and(MASK20).lanewise(VectorOperators.LSHL, 2));
			tmp.intoArray(output, 752 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20).and(MASK22);
			tmp.intoArray(output, 880 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 42).and(MASK22);
			tmp.intoArray(output, 1008 + i * stride);
		}
	}

	public static void unpack23(long[] input, long[] output) {
		int stride = LongVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 64;
		for (int i = 0; i < 16 / stride; i++) {
			LongVector src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, i * stride);
			LongVector tmp;
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK23);
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 23).and(MASK23);
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 46).and(MASK18);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 16 + i * stride);
			tmp = tmp.or(src.and(MASK5).lanewise(VectorOperators.LSHL, 18));
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 5).and(MASK23);
			tmp.intoArray(output, 384 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28).and(MASK23);
			tmp.intoArray(output, 512 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 51).and(MASK13);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 32 + i * stride);
			tmp = tmp.or(src.and(MASK10).lanewise(VectorOperators.LSHL, 13));
			tmp.intoArray(output, 640 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10).and(MASK23);
			tmp.intoArray(output, 768 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 33).and(MASK23);
			tmp.intoArray(output, 896 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 56).and(MASK8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 48 + i * stride);
			tmp = tmp.or(src.and(MASK15).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 15).and(MASK23);
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 38).and(MASK23);
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 61).and(MASK3);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 64 + i * stride);
			tmp = tmp.or(src.and(MASK20).lanewise(VectorOperators.LSHL, 3));
			tmp.intoArray(output, 448 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20).and(MASK23);
			tmp.intoArray(output, 576 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 43).and(MASK21);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 80 + i * stride);
			tmp = tmp.or(src.and(MASK2).lanewise(VectorOperators.LSHL, 21));
			tmp.intoArray(output, 704 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2).and(MASK23);
			tmp.intoArray(output, 832 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 25).and(MASK23);
			tmp.intoArray(output, 960 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48).and(MASK16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 96 + i * stride);
			tmp = tmp.or(src.and(MASK7).lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 7).and(MASK23);
			tmp.intoArray(output, 160 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 30).and(MASK23);
			tmp.intoArray(output, 288 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 53).and(MASK11);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 112 + i * stride);
			tmp = tmp.or(src.and(MASK12).lanewise(VectorOperators.LSHL, 11));
			tmp.intoArray(output, 416 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12).and(MASK23);
			tmp.intoArray(output, 544 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 35).and(MASK23);
			tmp.intoArray(output, 672 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 58).and(MASK6);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 128 + i * stride);
			tmp = tmp.or(src.and(MASK17).lanewise(VectorOperators.LSHL, 6));
			tmp.intoArray(output, 800 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 17).and(MASK23);
			tmp.intoArray(output, 928 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40).and(MASK23);
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 63).and(MASK1);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 144 + i * stride);
			tmp = tmp.or(src.and(MASK22).lanewise(VectorOperators.LSHL, 1));
			tmp.intoArray(output, 224 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 22).and(MASK23);
			tmp.intoArray(output, 352 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 45).and(MASK19);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 160 + i * stride);
			tmp = tmp.or(src.and(MASK4).lanewise(VectorOperators.LSHL, 19));
			tmp.intoArray(output, 480 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4).and(MASK23);
			tmp.intoArray(output, 608 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 27).and(MASK23);
			tmp.intoArray(output, 736 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 50).and(MASK14);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 176 + i * stride);
			tmp = tmp.or(src.and(MASK9).lanewise(VectorOperators.LSHL, 14));
			tmp.intoArray(output, 864 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 9).and(MASK23);
			tmp.intoArray(output, 992 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK23);
			tmp.intoArray(output, 16 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 55).and(MASK9);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 192 + i * stride);
			tmp = tmp.or(src.and(MASK14).lanewise(VectorOperators.LSHL, 9));
			tmp.intoArray(output, 144 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14).and(MASK23);
			tmp.intoArray(output, 272 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 37).and(MASK23);
			tmp.intoArray(output, 400 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 60).and(MASK4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 208 + i * stride);
			tmp = tmp.or(src.and(MASK19).lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 528 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 19).and(MASK23);
			tmp.intoArray(output, 656 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 42).and(MASK22);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 224 + i * stride);
			tmp = tmp.or(src.and(MASK1).lanewise(VectorOperators.LSHL, 22));
			tmp.intoArray(output, 784 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 1).and(MASK23);
			tmp.intoArray(output, 912 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK23);
			tmp.intoArray(output, 80 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 47).and(MASK17);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 240 + i * stride);
			tmp = tmp.or(src.and(MASK6).lanewise(VectorOperators.LSHL, 17));
			tmp.intoArray(output, 208 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6).and(MASK23);
			tmp.intoArray(output, 336 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 29).and(MASK23);
			tmp.intoArray(output, 464 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 52).and(MASK12);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 256 + i * stride);
			tmp = tmp.or(src.and(MASK11).lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 592 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 11).and(MASK23);
			tmp.intoArray(output, 720 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 34).and(MASK23);
			tmp.intoArray(output, 848 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 57).and(MASK7);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 272 + i * stride);
			tmp = tmp.or(src.and(MASK16).lanewise(VectorOperators.LSHL, 7));
			tmp.intoArray(output, 976 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK23);
			tmp.intoArray(output, 48 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 39).and(MASK23);
			tmp.intoArray(output, 176 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 62).and(MASK2);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 288 + i * stride);
			tmp = tmp.or(src.and(MASK21).lanewise(VectorOperators.LSHL, 2));
			tmp.intoArray(output, 304 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 21).and(MASK23);
			tmp.intoArray(output, 432 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 44).and(MASK20);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 304 + i * stride);
			tmp = tmp.or(src.and(MASK3).lanewise(VectorOperators.LSHL, 20));
			tmp.intoArray(output, 560 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 3).and(MASK23);
			tmp.intoArray(output, 688 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 26).and(MASK23);
			tmp.intoArray(output, 816 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 49).and(MASK15);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 320 + i * stride);
			tmp = tmp.or(src.and(MASK8).lanewise(VectorOperators.LSHL, 15));
			tmp.intoArray(output, 944 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK23);
			tmp.intoArray(output, 112 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 31).and(MASK23);
			tmp.intoArray(output, 240 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 54).and(MASK10);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 336 + i * stride);
			tmp = tmp.or(src.and(MASK13).lanewise(VectorOperators.LSHL, 10));
			tmp.intoArray(output, 368 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 13).and(MASK23);
			tmp.intoArray(output, 496 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 36).and(MASK23);
			tmp.intoArray(output, 624 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 59).and(MASK5);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 352 + i * stride);
			tmp = tmp.or(src.and(MASK18).lanewise(VectorOperators.LSHL, 5));
			tmp.intoArray(output, 752 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 18).and(MASK23);
			tmp.intoArray(output, 880 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 41).and(MASK23);
			tmp.intoArray(output, 1008 + i * stride);
		}
	}

	public static void unpack24(long[] input, long[] output) {
		int stride = LongVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 64;
		for (int i = 0; i < 16 / stride; i++) {
			LongVector src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, i * stride);
			LongVector tmp;
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK24);
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK24);
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48).and(MASK16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 16 + i * stride);
			tmp = tmp.or(src.and(MASK8).lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK24);
			tmp.intoArray(output, 384 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK24);
			tmp.intoArray(output, 512 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 56).and(MASK8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 32 + i * stride);
			tmp = tmp.or(src.and(MASK16).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 640 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK24);
			tmp.intoArray(output, 768 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40).and(MASK24);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 48 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 896 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK24);
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK24);
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48).and(MASK16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 64 + i * stride);
			tmp = tmp.or(src.and(MASK8).lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK24);
			tmp.intoArray(output, 448 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK24);
			tmp.intoArray(output, 576 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 56).and(MASK8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 80 + i * stride);
			tmp = tmp.or(src.and(MASK16).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 704 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK24);
			tmp.intoArray(output, 832 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40).and(MASK24);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 96 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 960 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK24);
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK24);
			tmp.intoArray(output, 160 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48).and(MASK16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 112 + i * stride);
			tmp = tmp.or(src.and(MASK8).lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 288 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK24);
			tmp.intoArray(output, 416 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK24);
			tmp.intoArray(output, 544 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 56).and(MASK8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 128 + i * stride);
			tmp = tmp.or(src.and(MASK16).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 672 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK24);
			tmp.intoArray(output, 800 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40).and(MASK24);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 144 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 928 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK24);
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK24);
			tmp.intoArray(output, 224 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48).and(MASK16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 160 + i * stride);
			tmp = tmp.or(src.and(MASK8).lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 352 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK24);
			tmp.intoArray(output, 480 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK24);
			tmp.intoArray(output, 608 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 56).and(MASK8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 176 + i * stride);
			tmp = tmp.or(src.and(MASK16).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 736 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK24);
			tmp.intoArray(output, 864 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40).and(MASK24);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 192 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 992 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK24);
			tmp.intoArray(output, 16 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK24);
			tmp.intoArray(output, 144 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48).and(MASK16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 208 + i * stride);
			tmp = tmp.or(src.and(MASK8).lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 272 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK24);
			tmp.intoArray(output, 400 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK24);
			tmp.intoArray(output, 528 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 56).and(MASK8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 224 + i * stride);
			tmp = tmp.or(src.and(MASK16).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 656 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK24);
			tmp.intoArray(output, 784 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40).and(MASK24);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 240 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 912 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK24);
			tmp.intoArray(output, 80 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK24);
			tmp.intoArray(output, 208 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48).and(MASK16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 256 + i * stride);
			tmp = tmp.or(src.and(MASK8).lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 336 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK24);
			tmp.intoArray(output, 464 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK24);
			tmp.intoArray(output, 592 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 56).and(MASK8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 272 + i * stride);
			tmp = tmp.or(src.and(MASK16).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 720 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK24);
			tmp.intoArray(output, 848 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40).and(MASK24);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 288 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 976 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK24);
			tmp.intoArray(output, 48 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK24);
			tmp.intoArray(output, 176 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48).and(MASK16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 304 + i * stride);
			tmp = tmp.or(src.and(MASK8).lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 304 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK24);
			tmp.intoArray(output, 432 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK24);
			tmp.intoArray(output, 560 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 56).and(MASK8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 320 + i * stride);
			tmp = tmp.or(src.and(MASK16).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 688 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK24);
			tmp.intoArray(output, 816 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40).and(MASK24);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 336 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 944 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK24);
			tmp.intoArray(output, 112 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK24);
			tmp.intoArray(output, 240 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48).and(MASK16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 352 + i * stride);
			tmp = tmp.or(src.and(MASK8).lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 368 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK24);
			tmp.intoArray(output, 496 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK24);
			tmp.intoArray(output, 624 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 56).and(MASK8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 368 + i * stride);
			tmp = tmp.or(src.and(MASK16).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 752 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK24);
			tmp.intoArray(output, 880 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40).and(MASK24);
			tmp.intoArray(output, 1008 + i * stride);
		}
	}

	public static void unpack25(long[] input, long[] output) {
		int stride = LongVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 64;
		for (int i = 0; i < 16 / stride; i++) {
			LongVector src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, i * stride);
			LongVector tmp;
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK25);
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 25).and(MASK25);
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 50).and(MASK14);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 16 + i * stride);
			tmp = tmp.or(src.and(MASK11).lanewise(VectorOperators.LSHL, 14));
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 11).and(MASK25);
			tmp.intoArray(output, 384 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 36).and(MASK25);
			tmp.intoArray(output, 512 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 61).and(MASK3);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 32 + i * stride);
			tmp = tmp.or(src.and(MASK22).lanewise(VectorOperators.LSHL, 3));
			tmp.intoArray(output, 640 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 22).and(MASK25);
			tmp.intoArray(output, 768 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 47).and(MASK17);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 48 + i * stride);
			tmp = tmp.or(src.and(MASK8).lanewise(VectorOperators.LSHL, 17));
			tmp.intoArray(output, 896 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK25);
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 33).and(MASK25);
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 58).and(MASK6);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 64 + i * stride);
			tmp = tmp.or(src.and(MASK19).lanewise(VectorOperators.LSHL, 6));
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 19).and(MASK25);
			tmp.intoArray(output, 448 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 44).and(MASK20);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 80 + i * stride);
			tmp = tmp.or(src.and(MASK5).lanewise(VectorOperators.LSHL, 20));
			tmp.intoArray(output, 576 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 5).and(MASK25);
			tmp.intoArray(output, 704 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 30).and(MASK25);
			tmp.intoArray(output, 832 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 55).and(MASK9);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 96 + i * stride);
			tmp = tmp.or(src.and(MASK16).lanewise(VectorOperators.LSHL, 9));
			tmp.intoArray(output, 960 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK25);
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 41).and(MASK23);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 112 + i * stride);
			tmp = tmp.or(src.and(MASK2).lanewise(VectorOperators.LSHL, 23));
			tmp.intoArray(output, 160 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2).and(MASK25);
			tmp.intoArray(output, 288 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 27).and(MASK25);
			tmp.intoArray(output, 416 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 52).and(MASK12);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 128 + i * stride);
			tmp = tmp.or(src.and(MASK13).lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 544 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 13).and(MASK25);
			tmp.intoArray(output, 672 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 38).and(MASK25);
			tmp.intoArray(output, 800 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 63).and(MASK1);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 144 + i * stride);
			tmp = tmp.or(src.and(MASK24).lanewise(VectorOperators.LSHL, 1));
			tmp.intoArray(output, 928 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK25);
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 49).and(MASK15);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 160 + i * stride);
			tmp = tmp.or(src.and(MASK10).lanewise(VectorOperators.LSHL, 15));
			tmp.intoArray(output, 224 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10).and(MASK25);
			tmp.intoArray(output, 352 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 35).and(MASK25);
			tmp.intoArray(output, 480 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 60).and(MASK4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 176 + i * stride);
			tmp = tmp.or(src.and(MASK21).lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 608 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 21).and(MASK25);
			tmp.intoArray(output, 736 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 46).and(MASK18);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 192 + i * stride);
			tmp = tmp.or(src.and(MASK7).lanewise(VectorOperators.LSHL, 18));
			tmp.intoArray(output, 864 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 7).and(MASK25);
			tmp.intoArray(output, 992 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK25);
			tmp.intoArray(output, 16 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 57).and(MASK7);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 208 + i * stride);
			tmp = tmp.or(src.and(MASK18).lanewise(VectorOperators.LSHL, 7));
			tmp.intoArray(output, 144 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 18).and(MASK25);
			tmp.intoArray(output, 272 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 43).and(MASK21);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 224 + i * stride);
			tmp = tmp.or(src.and(MASK4).lanewise(VectorOperators.LSHL, 21));
			tmp.intoArray(output, 400 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4).and(MASK25);
			tmp.intoArray(output, 528 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 29).and(MASK25);
			tmp.intoArray(output, 656 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 54).and(MASK10);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 240 + i * stride);
			tmp = tmp.or(src.and(MASK15).lanewise(VectorOperators.LSHL, 10));
			tmp.intoArray(output, 784 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 15).and(MASK25);
			tmp.intoArray(output, 912 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40).and(MASK24);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 256 + i * stride);
			tmp = tmp.or(src.and(MASK1).lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 80 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 1).and(MASK25);
			tmp.intoArray(output, 208 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 26).and(MASK25);
			tmp.intoArray(output, 336 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 51).and(MASK13);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 272 + i * stride);
			tmp = tmp.or(src.and(MASK12).lanewise(VectorOperators.LSHL, 13));
			tmp.intoArray(output, 464 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12).and(MASK25);
			tmp.intoArray(output, 592 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 37).and(MASK25);
			tmp.intoArray(output, 720 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 62).and(MASK2);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 288 + i * stride);
			tmp = tmp.or(src.and(MASK23).lanewise(VectorOperators.LSHL, 2));
			tmp.intoArray(output, 848 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 23).and(MASK25);
			tmp.intoArray(output, 976 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48).and(MASK16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 304 + i * stride);
			tmp = tmp.or(src.and(MASK9).lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 48 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 9).and(MASK25);
			tmp.intoArray(output, 176 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 34).and(MASK25);
			tmp.intoArray(output, 304 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 59).and(MASK5);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 320 + i * stride);
			tmp = tmp.or(src.and(MASK20).lanewise(VectorOperators.LSHL, 5));
			tmp.intoArray(output, 432 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20).and(MASK25);
			tmp.intoArray(output, 560 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 45).and(MASK19);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 336 + i * stride);
			tmp = tmp.or(src.and(MASK6).lanewise(VectorOperators.LSHL, 19));
			tmp.intoArray(output, 688 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6).and(MASK25);
			tmp.intoArray(output, 816 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 31).and(MASK25);
			tmp.intoArray(output, 944 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 56).and(MASK8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 352 + i * stride);
			tmp = tmp.or(src.and(MASK17).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 112 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 17).and(MASK25);
			tmp.intoArray(output, 240 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 42).and(MASK22);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 368 + i * stride);
			tmp = tmp.or(src.and(MASK3).lanewise(VectorOperators.LSHL, 22));
			tmp.intoArray(output, 368 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 3).and(MASK25);
			tmp.intoArray(output, 496 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28).and(MASK25);
			tmp.intoArray(output, 624 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 53).and(MASK11);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 384 + i * stride);
			tmp = tmp.or(src.and(MASK14).lanewise(VectorOperators.LSHL, 11));
			tmp.intoArray(output, 752 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14).and(MASK25);
			tmp.intoArray(output, 880 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 39).and(MASK25);
			tmp.intoArray(output, 1008 + i * stride);
		}
	}

	public static void unpack26(long[] input, long[] output) {
		int stride = LongVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 64;
		for (int i = 0; i < 16 / stride; i++) {
			LongVector src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, i * stride);
			LongVector tmp;
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK26);
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 26).and(MASK26);
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 52).and(MASK12);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 16 + i * stride);
			tmp = tmp.or(src.and(MASK14).lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14).and(MASK26);
			tmp.intoArray(output, 384 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40).and(MASK24);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 32 + i * stride);
			tmp = tmp.or(src.and(MASK2).lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 512 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2).and(MASK26);
			tmp.intoArray(output, 640 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28).and(MASK26);
			tmp.intoArray(output, 768 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 54).and(MASK10);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 48 + i * stride);
			tmp = tmp.or(src.and(MASK16).lanewise(VectorOperators.LSHL, 10));
			tmp.intoArray(output, 896 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK26);
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 42).and(MASK22);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 64 + i * stride);
			tmp = tmp.or(src.and(MASK4).lanewise(VectorOperators.LSHL, 22));
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4).and(MASK26);
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 30).and(MASK26);
			tmp.intoArray(output, 448 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 56).and(MASK8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 80 + i * stride);
			tmp = tmp.or(src.and(MASK18).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 576 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 18).and(MASK26);
			tmp.intoArray(output, 704 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 44).and(MASK20);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 96 + i * stride);
			tmp = tmp.or(src.and(MASK6).lanewise(VectorOperators.LSHL, 20));
			tmp.intoArray(output, 832 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6).and(MASK26);
			tmp.intoArray(output, 960 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK26);
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 58).and(MASK6);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 112 + i * stride);
			tmp = tmp.or(src.and(MASK20).lanewise(VectorOperators.LSHL, 6));
			tmp.intoArray(output, 160 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20).and(MASK26);
			tmp.intoArray(output, 288 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 46).and(MASK18);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 128 + i * stride);
			tmp = tmp.or(src.and(MASK8).lanewise(VectorOperators.LSHL, 18));
			tmp.intoArray(output, 416 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK26);
			tmp.intoArray(output, 544 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 34).and(MASK26);
			tmp.intoArray(output, 672 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 60).and(MASK4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 144 + i * stride);
			tmp = tmp.or(src.and(MASK22).lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 800 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 22).and(MASK26);
			tmp.intoArray(output, 928 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48).and(MASK16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 160 + i * stride);
			tmp = tmp.or(src.and(MASK10).lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10).and(MASK26);
			tmp.intoArray(output, 224 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 36).and(MASK26);
			tmp.intoArray(output, 352 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 62).and(MASK2);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 176 + i * stride);
			tmp = tmp.or(src.and(MASK24).lanewise(VectorOperators.LSHL, 2));
			tmp.intoArray(output, 480 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK26);
			tmp.intoArray(output, 608 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 50).and(MASK14);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 192 + i * stride);
			tmp = tmp.or(src.and(MASK12).lanewise(VectorOperators.LSHL, 14));
			tmp.intoArray(output, 736 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12).and(MASK26);
			tmp.intoArray(output, 864 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 38).and(MASK26);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 208 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 26));
			tmp.intoArray(output, 992 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK26);
			tmp.intoArray(output, 16 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 26).and(MASK26);
			tmp.intoArray(output, 144 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 52).and(MASK12);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 224 + i * stride);
			tmp = tmp.or(src.and(MASK14).lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 272 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14).and(MASK26);
			tmp.intoArray(output, 400 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40).and(MASK24);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 240 + i * stride);
			tmp = tmp.or(src.and(MASK2).lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 528 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2).and(MASK26);
			tmp.intoArray(output, 656 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28).and(MASK26);
			tmp.intoArray(output, 784 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 54).and(MASK10);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 256 + i * stride);
			tmp = tmp.or(src.and(MASK16).lanewise(VectorOperators.LSHL, 10));
			tmp.intoArray(output, 912 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK26);
			tmp.intoArray(output, 80 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 42).and(MASK22);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 272 + i * stride);
			tmp = tmp.or(src.and(MASK4).lanewise(VectorOperators.LSHL, 22));
			tmp.intoArray(output, 208 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4).and(MASK26);
			tmp.intoArray(output, 336 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 30).and(MASK26);
			tmp.intoArray(output, 464 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 56).and(MASK8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 288 + i * stride);
			tmp = tmp.or(src.and(MASK18).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 592 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 18).and(MASK26);
			tmp.intoArray(output, 720 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 44).and(MASK20);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 304 + i * stride);
			tmp = tmp.or(src.and(MASK6).lanewise(VectorOperators.LSHL, 20));
			tmp.intoArray(output, 848 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6).and(MASK26);
			tmp.intoArray(output, 976 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK26);
			tmp.intoArray(output, 48 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 58).and(MASK6);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 320 + i * stride);
			tmp = tmp.or(src.and(MASK20).lanewise(VectorOperators.LSHL, 6));
			tmp.intoArray(output, 176 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20).and(MASK26);
			tmp.intoArray(output, 304 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 46).and(MASK18);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 336 + i * stride);
			tmp = tmp.or(src.and(MASK8).lanewise(VectorOperators.LSHL, 18));
			tmp.intoArray(output, 432 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK26);
			tmp.intoArray(output, 560 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 34).and(MASK26);
			tmp.intoArray(output, 688 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 60).and(MASK4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 352 + i * stride);
			tmp = tmp.or(src.and(MASK22).lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 816 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 22).and(MASK26);
			tmp.intoArray(output, 944 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48).and(MASK16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 368 + i * stride);
			tmp = tmp.or(src.and(MASK10).lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 112 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10).and(MASK26);
			tmp.intoArray(output, 240 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 36).and(MASK26);
			tmp.intoArray(output, 368 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 62).and(MASK2);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 384 + i * stride);
			tmp = tmp.or(src.and(MASK24).lanewise(VectorOperators.LSHL, 2));
			tmp.intoArray(output, 496 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK26);
			tmp.intoArray(output, 624 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 50).and(MASK14);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 400 + i * stride);
			tmp = tmp.or(src.and(MASK12).lanewise(VectorOperators.LSHL, 14));
			tmp.intoArray(output, 752 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12).and(MASK26);
			tmp.intoArray(output, 880 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 38).and(MASK26);
			tmp.intoArray(output, 1008 + i * stride);
		}
	}

	public static void unpack27(long[] input, long[] output) {
		int stride = LongVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 64;
		for (int i = 0; i < 16 / stride; i++) {
			LongVector src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, i * stride);
			LongVector tmp;
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK27);
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 27).and(MASK27);
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 54).and(MASK10);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 16 + i * stride);
			tmp = tmp.or(src.and(MASK17).lanewise(VectorOperators.LSHL, 10));
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 17).and(MASK27);
			tmp.intoArray(output, 384 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 44).and(MASK20);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 32 + i * stride);
			tmp = tmp.or(src.and(MASK7).lanewise(VectorOperators.LSHL, 20));
			tmp.intoArray(output, 512 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 7).and(MASK27);
			tmp.intoArray(output, 640 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 34).and(MASK27);
			tmp.intoArray(output, 768 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 61).and(MASK3);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 48 + i * stride);
			tmp = tmp.or(src.and(MASK24).lanewise(VectorOperators.LSHL, 3));
			tmp.intoArray(output, 896 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK27);
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 51).and(MASK13);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 64 + i * stride);
			tmp = tmp.or(src.and(MASK14).lanewise(VectorOperators.LSHL, 13));
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14).and(MASK27);
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 41).and(MASK23);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 80 + i * stride);
			tmp = tmp.or(src.and(MASK4).lanewise(VectorOperators.LSHL, 23));
			tmp.intoArray(output, 448 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4).and(MASK27);
			tmp.intoArray(output, 576 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 31).and(MASK27);
			tmp.intoArray(output, 704 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 58).and(MASK6);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 96 + i * stride);
			tmp = tmp.or(src.and(MASK21).lanewise(VectorOperators.LSHL, 6));
			tmp.intoArray(output, 832 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 21).and(MASK27);
			tmp.intoArray(output, 960 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48).and(MASK16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 112 + i * stride);
			tmp = tmp.or(src.and(MASK11).lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 11).and(MASK27);
			tmp.intoArray(output, 160 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 38).and(MASK26);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 128 + i * stride);
			tmp = tmp.or(src.and(MASK1).lanewise(VectorOperators.LSHL, 26));
			tmp.intoArray(output, 288 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 1).and(MASK27);
			tmp.intoArray(output, 416 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28).and(MASK27);
			tmp.intoArray(output, 544 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 55).and(MASK9);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 144 + i * stride);
			tmp = tmp.or(src.and(MASK18).lanewise(VectorOperators.LSHL, 9));
			tmp.intoArray(output, 672 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 18).and(MASK27);
			tmp.intoArray(output, 800 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 45).and(MASK19);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 160 + i * stride);
			tmp = tmp.or(src.and(MASK8).lanewise(VectorOperators.LSHL, 19));
			tmp.intoArray(output, 928 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK27);
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 35).and(MASK27);
			tmp.intoArray(output, 224 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 62).and(MASK2);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 176 + i * stride);
			tmp = tmp.or(src.and(MASK25).lanewise(VectorOperators.LSHL, 2));
			tmp.intoArray(output, 352 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 25).and(MASK27);
			tmp.intoArray(output, 480 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 52).and(MASK12);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 192 + i * stride);
			tmp = tmp.or(src.and(MASK15).lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 608 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 15).and(MASK27);
			tmp.intoArray(output, 736 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 42).and(MASK22);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 208 + i * stride);
			tmp = tmp.or(src.and(MASK5).lanewise(VectorOperators.LSHL, 22));
			tmp.intoArray(output, 864 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 5).and(MASK27);
			tmp.intoArray(output, 992 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK27);
			tmp.intoArray(output, 16 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 59).and(MASK5);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 224 + i * stride);
			tmp = tmp.or(src.and(MASK22).lanewise(VectorOperators.LSHL, 5));
			tmp.intoArray(output, 144 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 22).and(MASK27);
			tmp.intoArray(output, 272 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 49).and(MASK15);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 240 + i * stride);
			tmp = tmp.or(src.and(MASK12).lanewise(VectorOperators.LSHL, 15));
			tmp.intoArray(output, 400 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12).and(MASK27);
			tmp.intoArray(output, 528 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 39).and(MASK25);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 256 + i * stride);
			tmp = tmp.or(src.and(MASK2).lanewise(VectorOperators.LSHL, 25));
			tmp.intoArray(output, 656 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2).and(MASK27);
			tmp.intoArray(output, 784 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 29).and(MASK27);
			tmp.intoArray(output, 912 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 56).and(MASK8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 272 + i * stride);
			tmp = tmp.or(src.and(MASK19).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 80 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 19).and(MASK27);
			tmp.intoArray(output, 208 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 46).and(MASK18);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 288 + i * stride);
			tmp = tmp.or(src.and(MASK9).lanewise(VectorOperators.LSHL, 18));
			tmp.intoArray(output, 336 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 9).and(MASK27);
			tmp.intoArray(output, 464 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 36).and(MASK27);
			tmp.intoArray(output, 592 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 63).and(MASK1);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 304 + i * stride);
			tmp = tmp.or(src.and(MASK26).lanewise(VectorOperators.LSHL, 1));
			tmp.intoArray(output, 720 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 26).and(MASK27);
			tmp.intoArray(output, 848 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 53).and(MASK11);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 320 + i * stride);
			tmp = tmp.or(src.and(MASK16).lanewise(VectorOperators.LSHL, 11));
			tmp.intoArray(output, 976 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK27);
			tmp.intoArray(output, 48 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 43).and(MASK21);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 336 + i * stride);
			tmp = tmp.or(src.and(MASK6).lanewise(VectorOperators.LSHL, 21));
			tmp.intoArray(output, 176 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6).and(MASK27);
			tmp.intoArray(output, 304 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 33).and(MASK27);
			tmp.intoArray(output, 432 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 60).and(MASK4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 352 + i * stride);
			tmp = tmp.or(src.and(MASK23).lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 560 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 23).and(MASK27);
			tmp.intoArray(output, 688 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 50).and(MASK14);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 368 + i * stride);
			tmp = tmp.or(src.and(MASK13).lanewise(VectorOperators.LSHL, 14));
			tmp.intoArray(output, 816 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 13).and(MASK27);
			tmp.intoArray(output, 944 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40).and(MASK24);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 384 + i * stride);
			tmp = tmp.or(src.and(MASK3).lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 112 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 3).and(MASK27);
			tmp.intoArray(output, 240 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 30).and(MASK27);
			tmp.intoArray(output, 368 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 57).and(MASK7);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 400 + i * stride);
			tmp = tmp.or(src.and(MASK20).lanewise(VectorOperators.LSHL, 7));
			tmp.intoArray(output, 496 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20).and(MASK27);
			tmp.intoArray(output, 624 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 47).and(MASK17);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 416 + i * stride);
			tmp = tmp.or(src.and(MASK10).lanewise(VectorOperators.LSHL, 17));
			tmp.intoArray(output, 752 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10).and(MASK27);
			tmp.intoArray(output, 880 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 37).and(MASK27);
			tmp.intoArray(output, 1008 + i * stride);
		}
	}

	public static void unpack28(long[] input, long[] output) {
		int stride = LongVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 64;
		for (int i = 0; i < 16 / stride; i++) {
			LongVector src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, i * stride);
			LongVector tmp;
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK28);
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28).and(MASK28);
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 56).and(MASK8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 16 + i * stride);
			tmp = tmp.or(src.and(MASK20).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20).and(MASK28);
			tmp.intoArray(output, 384 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48).and(MASK16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 32 + i * stride);
			tmp = tmp.or(src.and(MASK12).lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 512 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12).and(MASK28);
			tmp.intoArray(output, 640 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40).and(MASK24);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 48 + i * stride);
			tmp = tmp.or(src.and(MASK4).lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 768 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4).and(MASK28);
			tmp.intoArray(output, 896 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK28);
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 60).and(MASK4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 64 + i * stride);
			tmp = tmp.or(src.and(MASK24).lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK28);
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 52).and(MASK12);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 80 + i * stride);
			tmp = tmp.or(src.and(MASK16).lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 448 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK28);
			tmp.intoArray(output, 576 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 44).and(MASK20);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 96 + i * stride);
			tmp = tmp.or(src.and(MASK8).lanewise(VectorOperators.LSHL, 20));
			tmp.intoArray(output, 704 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK28);
			tmp.intoArray(output, 832 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 36).and(MASK28);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 112 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 28));
			tmp.intoArray(output, 960 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK28);
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28).and(MASK28);
			tmp.intoArray(output, 160 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 56).and(MASK8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 128 + i * stride);
			tmp = tmp.or(src.and(MASK20).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 288 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20).and(MASK28);
			tmp.intoArray(output, 416 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48).and(MASK16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 144 + i * stride);
			tmp = tmp.or(src.and(MASK12).lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 544 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12).and(MASK28);
			tmp.intoArray(output, 672 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40).and(MASK24);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 160 + i * stride);
			tmp = tmp.or(src.and(MASK4).lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 800 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4).and(MASK28);
			tmp.intoArray(output, 928 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK28);
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 60).and(MASK4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 176 + i * stride);
			tmp = tmp.or(src.and(MASK24).lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 224 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK28);
			tmp.intoArray(output, 352 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 52).and(MASK12);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 192 + i * stride);
			tmp = tmp.or(src.and(MASK16).lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 480 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK28);
			tmp.intoArray(output, 608 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 44).and(MASK20);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 208 + i * stride);
			tmp = tmp.or(src.and(MASK8).lanewise(VectorOperators.LSHL, 20));
			tmp.intoArray(output, 736 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK28);
			tmp.intoArray(output, 864 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 36).and(MASK28);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 224 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 28));
			tmp.intoArray(output, 992 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK28);
			tmp.intoArray(output, 16 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28).and(MASK28);
			tmp.intoArray(output, 144 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 56).and(MASK8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 240 + i * stride);
			tmp = tmp.or(src.and(MASK20).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 272 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20).and(MASK28);
			tmp.intoArray(output, 400 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48).and(MASK16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 256 + i * stride);
			tmp = tmp.or(src.and(MASK12).lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 528 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12).and(MASK28);
			tmp.intoArray(output, 656 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40).and(MASK24);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 272 + i * stride);
			tmp = tmp.or(src.and(MASK4).lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 784 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4).and(MASK28);
			tmp.intoArray(output, 912 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK28);
			tmp.intoArray(output, 80 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 60).and(MASK4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 288 + i * stride);
			tmp = tmp.or(src.and(MASK24).lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 208 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK28);
			tmp.intoArray(output, 336 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 52).and(MASK12);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 304 + i * stride);
			tmp = tmp.or(src.and(MASK16).lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 464 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK28);
			tmp.intoArray(output, 592 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 44).and(MASK20);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 320 + i * stride);
			tmp = tmp.or(src.and(MASK8).lanewise(VectorOperators.LSHL, 20));
			tmp.intoArray(output, 720 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK28);
			tmp.intoArray(output, 848 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 36).and(MASK28);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 336 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 28));
			tmp.intoArray(output, 976 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK28);
			tmp.intoArray(output, 48 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28).and(MASK28);
			tmp.intoArray(output, 176 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 56).and(MASK8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 352 + i * stride);
			tmp = tmp.or(src.and(MASK20).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 304 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20).and(MASK28);
			tmp.intoArray(output, 432 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48).and(MASK16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 368 + i * stride);
			tmp = tmp.or(src.and(MASK12).lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 560 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12).and(MASK28);
			tmp.intoArray(output, 688 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40).and(MASK24);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 384 + i * stride);
			tmp = tmp.or(src.and(MASK4).lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 816 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4).and(MASK28);
			tmp.intoArray(output, 944 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK28);
			tmp.intoArray(output, 112 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 60).and(MASK4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 400 + i * stride);
			tmp = tmp.or(src.and(MASK24).lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 240 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK28);
			tmp.intoArray(output, 368 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 52).and(MASK12);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 416 + i * stride);
			tmp = tmp.or(src.and(MASK16).lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 496 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK28);
			tmp.intoArray(output, 624 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 44).and(MASK20);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 432 + i * stride);
			tmp = tmp.or(src.and(MASK8).lanewise(VectorOperators.LSHL, 20));
			tmp.intoArray(output, 752 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK28);
			tmp.intoArray(output, 880 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 36).and(MASK28);
			tmp.intoArray(output, 1008 + i * stride);
		}
	}

	public static void unpack29(long[] input, long[] output) {
		int stride = LongVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 64;
		for (int i = 0; i < 16 / stride; i++) {
			LongVector src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, i * stride);
			LongVector tmp;
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK29);
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 29).and(MASK29);
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 58).and(MASK6);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 16 + i * stride);
			tmp = tmp.or(src.and(MASK23).lanewise(VectorOperators.LSHL, 6));
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 23).and(MASK29);
			tmp.intoArray(output, 384 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 52).and(MASK12);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 32 + i * stride);
			tmp = tmp.or(src.and(MASK17).lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 512 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 17).and(MASK29);
			tmp.intoArray(output, 640 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 46).and(MASK18);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 48 + i * stride);
			tmp = tmp.or(src.and(MASK11).lanewise(VectorOperators.LSHL, 18));
			tmp.intoArray(output, 768 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 11).and(MASK29);
			tmp.intoArray(output, 896 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40).and(MASK24);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 64 + i * stride);
			tmp = tmp.or(src.and(MASK5).lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 5).and(MASK29);
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 34).and(MASK29);
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 63).and(MASK1);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 80 + i * stride);
			tmp = tmp.or(src.and(MASK28).lanewise(VectorOperators.LSHL, 1));
			tmp.intoArray(output, 448 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28).and(MASK29);
			tmp.intoArray(output, 576 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 57).and(MASK7);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 96 + i * stride);
			tmp = tmp.or(src.and(MASK22).lanewise(VectorOperators.LSHL, 7));
			tmp.intoArray(output, 704 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 22).and(MASK29);
			tmp.intoArray(output, 832 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 51).and(MASK13);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 112 + i * stride);
			tmp = tmp.or(src.and(MASK16).lanewise(VectorOperators.LSHL, 13));
			tmp.intoArray(output, 960 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK29);
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 45).and(MASK19);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 128 + i * stride);
			tmp = tmp.or(src.and(MASK10).lanewise(VectorOperators.LSHL, 19));
			tmp.intoArray(output, 160 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10).and(MASK29);
			tmp.intoArray(output, 288 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 39).and(MASK25);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 144 + i * stride);
			tmp = tmp.or(src.and(MASK4).lanewise(VectorOperators.LSHL, 25));
			tmp.intoArray(output, 416 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4).and(MASK29);
			tmp.intoArray(output, 544 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 33).and(MASK29);
			tmp.intoArray(output, 672 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 62).and(MASK2);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 160 + i * stride);
			tmp = tmp.or(src.and(MASK27).lanewise(VectorOperators.LSHL, 2));
			tmp.intoArray(output, 800 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 27).and(MASK29);
			tmp.intoArray(output, 928 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 56).and(MASK8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 176 + i * stride);
			tmp = tmp.or(src.and(MASK21).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 21).and(MASK29);
			tmp.intoArray(output, 224 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 50).and(MASK14);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 192 + i * stride);
			tmp = tmp.or(src.and(MASK15).lanewise(VectorOperators.LSHL, 14));
			tmp.intoArray(output, 352 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 15).and(MASK29);
			tmp.intoArray(output, 480 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 44).and(MASK20);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 208 + i * stride);
			tmp = tmp.or(src.and(MASK9).lanewise(VectorOperators.LSHL, 20));
			tmp.intoArray(output, 608 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 9).and(MASK29);
			tmp.intoArray(output, 736 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 38).and(MASK26);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 224 + i * stride);
			tmp = tmp.or(src.and(MASK3).lanewise(VectorOperators.LSHL, 26));
			tmp.intoArray(output, 864 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 3).and(MASK29);
			tmp.intoArray(output, 992 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK29);
			tmp.intoArray(output, 16 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 61).and(MASK3);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 240 + i * stride);
			tmp = tmp.or(src.and(MASK26).lanewise(VectorOperators.LSHL, 3));
			tmp.intoArray(output, 144 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 26).and(MASK29);
			tmp.intoArray(output, 272 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 55).and(MASK9);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 256 + i * stride);
			tmp = tmp.or(src.and(MASK20).lanewise(VectorOperators.LSHL, 9));
			tmp.intoArray(output, 400 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20).and(MASK29);
			tmp.intoArray(output, 528 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 49).and(MASK15);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 272 + i * stride);
			tmp = tmp.or(src.and(MASK14).lanewise(VectorOperators.LSHL, 15));
			tmp.intoArray(output, 656 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14).and(MASK29);
			tmp.intoArray(output, 784 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 43).and(MASK21);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 288 + i * stride);
			tmp = tmp.or(src.and(MASK8).lanewise(VectorOperators.LSHL, 21));
			tmp.intoArray(output, 912 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK29);
			tmp.intoArray(output, 80 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 37).and(MASK27);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 304 + i * stride);
			tmp = tmp.or(src.and(MASK2).lanewise(VectorOperators.LSHL, 27));
			tmp.intoArray(output, 208 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2).and(MASK29);
			tmp.intoArray(output, 336 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 31).and(MASK29);
			tmp.intoArray(output, 464 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 60).and(MASK4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 320 + i * stride);
			tmp = tmp.or(src.and(MASK25).lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 592 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 25).and(MASK29);
			tmp.intoArray(output, 720 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 54).and(MASK10);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 336 + i * stride);
			tmp = tmp.or(src.and(MASK19).lanewise(VectorOperators.LSHL, 10));
			tmp.intoArray(output, 848 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 19).and(MASK29);
			tmp.intoArray(output, 976 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48).and(MASK16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 352 + i * stride);
			tmp = tmp.or(src.and(MASK13).lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 48 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 13).and(MASK29);
			tmp.intoArray(output, 176 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 42).and(MASK22);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 368 + i * stride);
			tmp = tmp.or(src.and(MASK7).lanewise(VectorOperators.LSHL, 22));
			tmp.intoArray(output, 304 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 7).and(MASK29);
			tmp.intoArray(output, 432 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 36).and(MASK28);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 384 + i * stride);
			tmp = tmp.or(src.and(MASK1).lanewise(VectorOperators.LSHL, 28));
			tmp.intoArray(output, 560 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 1).and(MASK29);
			tmp.intoArray(output, 688 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 30).and(MASK29);
			tmp.intoArray(output, 816 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 59).and(MASK5);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 400 + i * stride);
			tmp = tmp.or(src.and(MASK24).lanewise(VectorOperators.LSHL, 5));
			tmp.intoArray(output, 944 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK29);
			tmp.intoArray(output, 112 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 53).and(MASK11);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 416 + i * stride);
			tmp = tmp.or(src.and(MASK18).lanewise(VectorOperators.LSHL, 11));
			tmp.intoArray(output, 240 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 18).and(MASK29);
			tmp.intoArray(output, 368 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 47).and(MASK17);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 432 + i * stride);
			tmp = tmp.or(src.and(MASK12).lanewise(VectorOperators.LSHL, 17));
			tmp.intoArray(output, 496 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12).and(MASK29);
			tmp.intoArray(output, 624 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 41).and(MASK23);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 448 + i * stride);
			tmp = tmp.or(src.and(MASK6).lanewise(VectorOperators.LSHL, 23));
			tmp.intoArray(output, 752 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6).and(MASK29);
			tmp.intoArray(output, 880 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 35).and(MASK29);
			tmp.intoArray(output, 1008 + i * stride);
		}
	}

	public static void unpack30(long[] input, long[] output) {
		int stride = LongVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 64;
		for (int i = 0; i < 16 / stride; i++) {
			LongVector src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, i * stride);
			LongVector tmp;
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK30);
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 30).and(MASK30);
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 60).and(MASK4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 16 + i * stride);
			tmp = tmp.or(src.and(MASK26).lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 26).and(MASK30);
			tmp.intoArray(output, 384 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 56).and(MASK8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 32 + i * stride);
			tmp = tmp.or(src.and(MASK22).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 512 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 22).and(MASK30);
			tmp.intoArray(output, 640 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 52).and(MASK12);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 48 + i * stride);
			tmp = tmp.or(src.and(MASK18).lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 768 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 18).and(MASK30);
			tmp.intoArray(output, 896 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48).and(MASK16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 64 + i * stride);
			tmp = tmp.or(src.and(MASK14).lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14).and(MASK30);
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 44).and(MASK20);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 80 + i * stride);
			tmp = tmp.or(src.and(MASK10).lanewise(VectorOperators.LSHL, 20));
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10).and(MASK30);
			tmp.intoArray(output, 448 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40).and(MASK24);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 96 + i * stride);
			tmp = tmp.or(src.and(MASK6).lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 576 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6).and(MASK30);
			tmp.intoArray(output, 704 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 36).and(MASK28);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 112 + i * stride);
			tmp = tmp.or(src.and(MASK2).lanewise(VectorOperators.LSHL, 28));
			tmp.intoArray(output, 832 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2).and(MASK30);
			tmp.intoArray(output, 960 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK30);
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 62).and(MASK2);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 128 + i * stride);
			tmp = tmp.or(src.and(MASK28).lanewise(VectorOperators.LSHL, 2));
			tmp.intoArray(output, 160 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28).and(MASK30);
			tmp.intoArray(output, 288 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 58).and(MASK6);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 144 + i * stride);
			tmp = tmp.or(src.and(MASK24).lanewise(VectorOperators.LSHL, 6));
			tmp.intoArray(output, 416 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK30);
			tmp.intoArray(output, 544 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 54).and(MASK10);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 160 + i * stride);
			tmp = tmp.or(src.and(MASK20).lanewise(VectorOperators.LSHL, 10));
			tmp.intoArray(output, 672 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20).and(MASK30);
			tmp.intoArray(output, 800 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 50).and(MASK14);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 176 + i * stride);
			tmp = tmp.or(src.and(MASK16).lanewise(VectorOperators.LSHL, 14));
			tmp.intoArray(output, 928 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK30);
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 46).and(MASK18);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 192 + i * stride);
			tmp = tmp.or(src.and(MASK12).lanewise(VectorOperators.LSHL, 18));
			tmp.intoArray(output, 224 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12).and(MASK30);
			tmp.intoArray(output, 352 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 42).and(MASK22);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 208 + i * stride);
			tmp = tmp.or(src.and(MASK8).lanewise(VectorOperators.LSHL, 22));
			tmp.intoArray(output, 480 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK30);
			tmp.intoArray(output, 608 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 38).and(MASK26);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 224 + i * stride);
			tmp = tmp.or(src.and(MASK4).lanewise(VectorOperators.LSHL, 26));
			tmp.intoArray(output, 736 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4).and(MASK30);
			tmp.intoArray(output, 864 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 34).and(MASK30);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 240 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 30));
			tmp.intoArray(output, 992 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK30);
			tmp.intoArray(output, 16 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 30).and(MASK30);
			tmp.intoArray(output, 144 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 60).and(MASK4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 256 + i * stride);
			tmp = tmp.or(src.and(MASK26).lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 272 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 26).and(MASK30);
			tmp.intoArray(output, 400 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 56).and(MASK8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 272 + i * stride);
			tmp = tmp.or(src.and(MASK22).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 528 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 22).and(MASK30);
			tmp.intoArray(output, 656 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 52).and(MASK12);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 288 + i * stride);
			tmp = tmp.or(src.and(MASK18).lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 784 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 18).and(MASK30);
			tmp.intoArray(output, 912 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48).and(MASK16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 304 + i * stride);
			tmp = tmp.or(src.and(MASK14).lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 80 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14).and(MASK30);
			tmp.intoArray(output, 208 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 44).and(MASK20);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 320 + i * stride);
			tmp = tmp.or(src.and(MASK10).lanewise(VectorOperators.LSHL, 20));
			tmp.intoArray(output, 336 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10).and(MASK30);
			tmp.intoArray(output, 464 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40).and(MASK24);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 336 + i * stride);
			tmp = tmp.or(src.and(MASK6).lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 592 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6).and(MASK30);
			tmp.intoArray(output, 720 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 36).and(MASK28);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 352 + i * stride);
			tmp = tmp.or(src.and(MASK2).lanewise(VectorOperators.LSHL, 28));
			tmp.intoArray(output, 848 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2).and(MASK30);
			tmp.intoArray(output, 976 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK30);
			tmp.intoArray(output, 48 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 62).and(MASK2);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 368 + i * stride);
			tmp = tmp.or(src.and(MASK28).lanewise(VectorOperators.LSHL, 2));
			tmp.intoArray(output, 176 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28).and(MASK30);
			tmp.intoArray(output, 304 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 58).and(MASK6);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 384 + i * stride);
			tmp = tmp.or(src.and(MASK24).lanewise(VectorOperators.LSHL, 6));
			tmp.intoArray(output, 432 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK30);
			tmp.intoArray(output, 560 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 54).and(MASK10);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 400 + i * stride);
			tmp = tmp.or(src.and(MASK20).lanewise(VectorOperators.LSHL, 10));
			tmp.intoArray(output, 688 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20).and(MASK30);
			tmp.intoArray(output, 816 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 50).and(MASK14);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 416 + i * stride);
			tmp = tmp.or(src.and(MASK16).lanewise(VectorOperators.LSHL, 14));
			tmp.intoArray(output, 944 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK30);
			tmp.intoArray(output, 112 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 46).and(MASK18);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 432 + i * stride);
			tmp = tmp.or(src.and(MASK12).lanewise(VectorOperators.LSHL, 18));
			tmp.intoArray(output, 240 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12).and(MASK30);
			tmp.intoArray(output, 368 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 42).and(MASK22);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 448 + i * stride);
			tmp = tmp.or(src.and(MASK8).lanewise(VectorOperators.LSHL, 22));
			tmp.intoArray(output, 496 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK30);
			tmp.intoArray(output, 624 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 38).and(MASK26);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 464 + i * stride);
			tmp = tmp.or(src.and(MASK4).lanewise(VectorOperators.LSHL, 26));
			tmp.intoArray(output, 752 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4).and(MASK30);
			tmp.intoArray(output, 880 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 34).and(MASK30);
			tmp.intoArray(output, 1008 + i * stride);
		}
	}

	public static void unpack31(long[] input, long[] output) {
		int stride = LongVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 64;
		for (int i = 0; i < 16 / stride; i++) {
			LongVector src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, i * stride);
			LongVector tmp;
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK31);
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 31).and(MASK31);
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 62).and(MASK2);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 16 + i * stride);
			tmp = tmp.or(src.and(MASK29).lanewise(VectorOperators.LSHL, 2));
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 29).and(MASK31);
			tmp.intoArray(output, 384 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 60).and(MASK4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 32 + i * stride);
			tmp = tmp.or(src.and(MASK27).lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 512 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 27).and(MASK31);
			tmp.intoArray(output, 640 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 58).and(MASK6);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 48 + i * stride);
			tmp = tmp.or(src.and(MASK25).lanewise(VectorOperators.LSHL, 6));
			tmp.intoArray(output, 768 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 25).and(MASK31);
			tmp.intoArray(output, 896 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 56).and(MASK8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 64 + i * stride);
			tmp = tmp.or(src.and(MASK23).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 23).and(MASK31);
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 54).and(MASK10);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 80 + i * stride);
			tmp = tmp.or(src.and(MASK21).lanewise(VectorOperators.LSHL, 10));
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 21).and(MASK31);
			tmp.intoArray(output, 448 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 52).and(MASK12);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 96 + i * stride);
			tmp = tmp.or(src.and(MASK19).lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 576 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 19).and(MASK31);
			tmp.intoArray(output, 704 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 50).and(MASK14);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 112 + i * stride);
			tmp = tmp.or(src.and(MASK17).lanewise(VectorOperators.LSHL, 14));
			tmp.intoArray(output, 832 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 17).and(MASK31);
			tmp.intoArray(output, 960 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48).and(MASK16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 128 + i * stride);
			tmp = tmp.or(src.and(MASK15).lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 15).and(MASK31);
			tmp.intoArray(output, 160 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 46).and(MASK18);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 144 + i * stride);
			tmp = tmp.or(src.and(MASK13).lanewise(VectorOperators.LSHL, 18));
			tmp.intoArray(output, 288 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 13).and(MASK31);
			tmp.intoArray(output, 416 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 44).and(MASK20);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 160 + i * stride);
			tmp = tmp.or(src.and(MASK11).lanewise(VectorOperators.LSHL, 20));
			tmp.intoArray(output, 544 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 11).and(MASK31);
			tmp.intoArray(output, 672 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 42).and(MASK22);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 176 + i * stride);
			tmp = tmp.or(src.and(MASK9).lanewise(VectorOperators.LSHL, 22));
			tmp.intoArray(output, 800 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 9).and(MASK31);
			tmp.intoArray(output, 928 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40).and(MASK24);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 192 + i * stride);
			tmp = tmp.or(src.and(MASK7).lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 7).and(MASK31);
			tmp.intoArray(output, 224 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 38).and(MASK26);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 208 + i * stride);
			tmp = tmp.or(src.and(MASK5).lanewise(VectorOperators.LSHL, 26));
			tmp.intoArray(output, 352 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 5).and(MASK31);
			tmp.intoArray(output, 480 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 36).and(MASK28);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 224 + i * stride);
			tmp = tmp.or(src.and(MASK3).lanewise(VectorOperators.LSHL, 28));
			tmp.intoArray(output, 608 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 3).and(MASK31);
			tmp.intoArray(output, 736 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 34).and(MASK30);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 240 + i * stride);
			tmp = tmp.or(src.and(MASK1).lanewise(VectorOperators.LSHL, 30));
			tmp.intoArray(output, 864 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 1).and(MASK31);
			tmp.intoArray(output, 992 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK31);
			tmp.intoArray(output, 16 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 63).and(MASK1);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 256 + i * stride);
			tmp = tmp.or(src.and(MASK30).lanewise(VectorOperators.LSHL, 1));
			tmp.intoArray(output, 144 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 30).and(MASK31);
			tmp.intoArray(output, 272 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 61).and(MASK3);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 272 + i * stride);
			tmp = tmp.or(src.and(MASK28).lanewise(VectorOperators.LSHL, 3));
			tmp.intoArray(output, 400 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28).and(MASK31);
			tmp.intoArray(output, 528 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 59).and(MASK5);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 288 + i * stride);
			tmp = tmp.or(src.and(MASK26).lanewise(VectorOperators.LSHL, 5));
			tmp.intoArray(output, 656 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 26).and(MASK31);
			tmp.intoArray(output, 784 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 57).and(MASK7);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 304 + i * stride);
			tmp = tmp.or(src.and(MASK24).lanewise(VectorOperators.LSHL, 7));
			tmp.intoArray(output, 912 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK31);
			tmp.intoArray(output, 80 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 55).and(MASK9);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 320 + i * stride);
			tmp = tmp.or(src.and(MASK22).lanewise(VectorOperators.LSHL, 9));
			tmp.intoArray(output, 208 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 22).and(MASK31);
			tmp.intoArray(output, 336 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 53).and(MASK11);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 336 + i * stride);
			tmp = tmp.or(src.and(MASK20).lanewise(VectorOperators.LSHL, 11));
			tmp.intoArray(output, 464 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20).and(MASK31);
			tmp.intoArray(output, 592 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 51).and(MASK13);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 352 + i * stride);
			tmp = tmp.or(src.and(MASK18).lanewise(VectorOperators.LSHL, 13));
			tmp.intoArray(output, 720 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 18).and(MASK31);
			tmp.intoArray(output, 848 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 49).and(MASK15);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 368 + i * stride);
			tmp = tmp.or(src.and(MASK16).lanewise(VectorOperators.LSHL, 15));
			tmp.intoArray(output, 976 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK31);
			tmp.intoArray(output, 48 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 47).and(MASK17);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 384 + i * stride);
			tmp = tmp.or(src.and(MASK14).lanewise(VectorOperators.LSHL, 17));
			tmp.intoArray(output, 176 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14).and(MASK31);
			tmp.intoArray(output, 304 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 45).and(MASK19);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 400 + i * stride);
			tmp = tmp.or(src.and(MASK12).lanewise(VectorOperators.LSHL, 19));
			tmp.intoArray(output, 432 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12).and(MASK31);
			tmp.intoArray(output, 560 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 43).and(MASK21);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 416 + i * stride);
			tmp = tmp.or(src.and(MASK10).lanewise(VectorOperators.LSHL, 21));
			tmp.intoArray(output, 688 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10).and(MASK31);
			tmp.intoArray(output, 816 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 41).and(MASK23);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 432 + i * stride);
			tmp = tmp.or(src.and(MASK8).lanewise(VectorOperators.LSHL, 23));
			tmp.intoArray(output, 944 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK31);
			tmp.intoArray(output, 112 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 39).and(MASK25);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 448 + i * stride);
			tmp = tmp.or(src.and(MASK6).lanewise(VectorOperators.LSHL, 25));
			tmp.intoArray(output, 240 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6).and(MASK31);
			tmp.intoArray(output, 368 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 37).and(MASK27);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 464 + i * stride);
			tmp = tmp.or(src.and(MASK4).lanewise(VectorOperators.LSHL, 27));
			tmp.intoArray(output, 496 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4).and(MASK31);
			tmp.intoArray(output, 624 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 35).and(MASK29);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 480 + i * stride);
			tmp = tmp.or(src.and(MASK2).lanewise(VectorOperators.LSHL, 29));
			tmp.intoArray(output, 752 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2).and(MASK31);
			tmp.intoArray(output, 880 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 33).and(MASK31);
			tmp.intoArray(output, 1008 + i * stride);
		}
	}

	public static void unpack32(long[] input, long[] output) {
		int stride = LongVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 64;
		for (int i = 0; i < 16 / stride; i++) {
			LongVector src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, i * stride);
			LongVector tmp;
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK32);
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 16 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK32);
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 32 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 384 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK32);
			tmp.intoArray(output, 512 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 48 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 640 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK32);
			tmp.intoArray(output, 768 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 64 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 896 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK32);
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 80 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK32);
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 96 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 448 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK32);
			tmp.intoArray(output, 576 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 112 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 704 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK32);
			tmp.intoArray(output, 832 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 128 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 960 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK32);
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 144 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 160 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK32);
			tmp.intoArray(output, 288 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 160 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 416 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK32);
			tmp.intoArray(output, 544 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 176 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 672 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK32);
			tmp.intoArray(output, 800 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 192 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 928 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK32);
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 208 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 224 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK32);
			tmp.intoArray(output, 352 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 224 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 480 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK32);
			tmp.intoArray(output, 608 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 240 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 736 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK32);
			tmp.intoArray(output, 864 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 256 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 992 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK32);
			tmp.intoArray(output, 16 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 272 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 144 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK32);
			tmp.intoArray(output, 272 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 288 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 400 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK32);
			tmp.intoArray(output, 528 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 304 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 656 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK32);
			tmp.intoArray(output, 784 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 320 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 912 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK32);
			tmp.intoArray(output, 80 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 336 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 208 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK32);
			tmp.intoArray(output, 336 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 352 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 464 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK32);
			tmp.intoArray(output, 592 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 368 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 720 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK32);
			tmp.intoArray(output, 848 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 384 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 976 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK32);
			tmp.intoArray(output, 48 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 400 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 176 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK32);
			tmp.intoArray(output, 304 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 416 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 432 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK32);
			tmp.intoArray(output, 560 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 432 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 688 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK32);
			tmp.intoArray(output, 816 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 448 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 944 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK32);
			tmp.intoArray(output, 112 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 464 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 240 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK32);
			tmp.intoArray(output, 368 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 480 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 496 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK32);
			tmp.intoArray(output, 624 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 496 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 752 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK32);
			tmp.intoArray(output, 880 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK32);
			tmp.intoArray(output, 1008 + i * stride);
		}
	}

	public static void unpack33(long[] input, long[] output) {
		int stride = LongVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 64;
		for (int i = 0; i < 16 / stride; i++) {
			LongVector src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, i * stride);
			LongVector tmp;
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK33);
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 33).and(MASK31);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 16 + i * stride);
			tmp = tmp.or(src.and(MASK2).lanewise(VectorOperators.LSHL, 31));
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2).and(MASK33);
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 35).and(MASK29);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 32 + i * stride);
			tmp = tmp.or(src.and(MASK4).lanewise(VectorOperators.LSHL, 29));
			tmp.intoArray(output, 384 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4).and(MASK33);
			tmp.intoArray(output, 512 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 37).and(MASK27);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 48 + i * stride);
			tmp = tmp.or(src.and(MASK6).lanewise(VectorOperators.LSHL, 27));
			tmp.intoArray(output, 640 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6).and(MASK33);
			tmp.intoArray(output, 768 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 39).and(MASK25);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 64 + i * stride);
			tmp = tmp.or(src.and(MASK8).lanewise(VectorOperators.LSHL, 25));
			tmp.intoArray(output, 896 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK33);
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 41).and(MASK23);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 80 + i * stride);
			tmp = tmp.or(src.and(MASK10).lanewise(VectorOperators.LSHL, 23));
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10).and(MASK33);
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 43).and(MASK21);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 96 + i * stride);
			tmp = tmp.or(src.and(MASK12).lanewise(VectorOperators.LSHL, 21));
			tmp.intoArray(output, 448 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12).and(MASK33);
			tmp.intoArray(output, 576 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 45).and(MASK19);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 112 + i * stride);
			tmp = tmp.or(src.and(MASK14).lanewise(VectorOperators.LSHL, 19));
			tmp.intoArray(output, 704 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14).and(MASK33);
			tmp.intoArray(output, 832 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 47).and(MASK17);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 128 + i * stride);
			tmp = tmp.or(src.and(MASK16).lanewise(VectorOperators.LSHL, 17));
			tmp.intoArray(output, 960 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK33);
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 49).and(MASK15);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 144 + i * stride);
			tmp = tmp.or(src.and(MASK18).lanewise(VectorOperators.LSHL, 15));
			tmp.intoArray(output, 160 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 18).and(MASK33);
			tmp.intoArray(output, 288 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 51).and(MASK13);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 160 + i * stride);
			tmp = tmp.or(src.and(MASK20).lanewise(VectorOperators.LSHL, 13));
			tmp.intoArray(output, 416 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20).and(MASK33);
			tmp.intoArray(output, 544 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 53).and(MASK11);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 176 + i * stride);
			tmp = tmp.or(src.and(MASK22).lanewise(VectorOperators.LSHL, 11));
			tmp.intoArray(output, 672 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 22).and(MASK33);
			tmp.intoArray(output, 800 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 55).and(MASK9);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 192 + i * stride);
			tmp = tmp.or(src.and(MASK24).lanewise(VectorOperators.LSHL, 9));
			tmp.intoArray(output, 928 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK33);
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 57).and(MASK7);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 208 + i * stride);
			tmp = tmp.or(src.and(MASK26).lanewise(VectorOperators.LSHL, 7));
			tmp.intoArray(output, 224 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 26).and(MASK33);
			tmp.intoArray(output, 352 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 59).and(MASK5);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 224 + i * stride);
			tmp = tmp.or(src.and(MASK28).lanewise(VectorOperators.LSHL, 5));
			tmp.intoArray(output, 480 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28).and(MASK33);
			tmp.intoArray(output, 608 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 61).and(MASK3);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 240 + i * stride);
			tmp = tmp.or(src.and(MASK30).lanewise(VectorOperators.LSHL, 3));
			tmp.intoArray(output, 736 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 30).and(MASK33);
			tmp.intoArray(output, 864 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 63).and(MASK1);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 256 + i * stride);
			tmp = tmp.or(src.and(MASK32).lanewise(VectorOperators.LSHL, 1));
			tmp.intoArray(output, 992 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 272 + i * stride);
			tmp = tmp.or(src.and(MASK1).lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 16 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 1).and(MASK33);
			tmp.intoArray(output, 144 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 34).and(MASK30);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 288 + i * stride);
			tmp = tmp.or(src.and(MASK3).lanewise(VectorOperators.LSHL, 30));
			tmp.intoArray(output, 272 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 3).and(MASK33);
			tmp.intoArray(output, 400 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 36).and(MASK28);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 304 + i * stride);
			tmp = tmp.or(src.and(MASK5).lanewise(VectorOperators.LSHL, 28));
			tmp.intoArray(output, 528 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 5).and(MASK33);
			tmp.intoArray(output, 656 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 38).and(MASK26);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 320 + i * stride);
			tmp = tmp.or(src.and(MASK7).lanewise(VectorOperators.LSHL, 26));
			tmp.intoArray(output, 784 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 7).and(MASK33);
			tmp.intoArray(output, 912 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40).and(MASK24);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 336 + i * stride);
			tmp = tmp.or(src.and(MASK9).lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 80 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 9).and(MASK33);
			tmp.intoArray(output, 208 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 42).and(MASK22);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 352 + i * stride);
			tmp = tmp.or(src.and(MASK11).lanewise(VectorOperators.LSHL, 22));
			tmp.intoArray(output, 336 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 11).and(MASK33);
			tmp.intoArray(output, 464 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 44).and(MASK20);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 368 + i * stride);
			tmp = tmp.or(src.and(MASK13).lanewise(VectorOperators.LSHL, 20));
			tmp.intoArray(output, 592 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 13).and(MASK33);
			tmp.intoArray(output, 720 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 46).and(MASK18);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 384 + i * stride);
			tmp = tmp.or(src.and(MASK15).lanewise(VectorOperators.LSHL, 18));
			tmp.intoArray(output, 848 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 15).and(MASK33);
			tmp.intoArray(output, 976 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48).and(MASK16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 400 + i * stride);
			tmp = tmp.or(src.and(MASK17).lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 48 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 17).and(MASK33);
			tmp.intoArray(output, 176 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 50).and(MASK14);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 416 + i * stride);
			tmp = tmp.or(src.and(MASK19).lanewise(VectorOperators.LSHL, 14));
			tmp.intoArray(output, 304 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 19).and(MASK33);
			tmp.intoArray(output, 432 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 52).and(MASK12);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 432 + i * stride);
			tmp = tmp.or(src.and(MASK21).lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 560 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 21).and(MASK33);
			tmp.intoArray(output, 688 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 54).and(MASK10);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 448 + i * stride);
			tmp = tmp.or(src.and(MASK23).lanewise(VectorOperators.LSHL, 10));
			tmp.intoArray(output, 816 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 23).and(MASK33);
			tmp.intoArray(output, 944 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 56).and(MASK8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 464 + i * stride);
			tmp = tmp.or(src.and(MASK25).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 112 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 25).and(MASK33);
			tmp.intoArray(output, 240 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 58).and(MASK6);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 480 + i * stride);
			tmp = tmp.or(src.and(MASK27).lanewise(VectorOperators.LSHL, 6));
			tmp.intoArray(output, 368 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 27).and(MASK33);
			tmp.intoArray(output, 496 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 60).and(MASK4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 496 + i * stride);
			tmp = tmp.or(src.and(MASK29).lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 624 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 29).and(MASK33);
			tmp.intoArray(output, 752 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 62).and(MASK2);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 512 + i * stride);
			tmp = tmp.or(src.and(MASK31).lanewise(VectorOperators.LSHL, 2));
			tmp.intoArray(output, 880 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 31).and(MASK33);
			tmp.intoArray(output, 1008 + i * stride);
		}
	}

	public static void unpack34(long[] input, long[] output) {
		int stride = LongVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 64;
		for (int i = 0; i < 16 / stride; i++) {
			LongVector src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, i * stride);
			LongVector tmp;
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK34);
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 34).and(MASK30);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 16 + i * stride);
			tmp = tmp.or(src.and(MASK4).lanewise(VectorOperators.LSHL, 30));
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4).and(MASK34);
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 38).and(MASK26);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 32 + i * stride);
			tmp = tmp.or(src.and(MASK8).lanewise(VectorOperators.LSHL, 26));
			tmp.intoArray(output, 384 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK34);
			tmp.intoArray(output, 512 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 42).and(MASK22);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 48 + i * stride);
			tmp = tmp.or(src.and(MASK12).lanewise(VectorOperators.LSHL, 22));
			tmp.intoArray(output, 640 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12).and(MASK34);
			tmp.intoArray(output, 768 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 46).and(MASK18);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 64 + i * stride);
			tmp = tmp.or(src.and(MASK16).lanewise(VectorOperators.LSHL, 18));
			tmp.intoArray(output, 896 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK34);
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 50).and(MASK14);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 80 + i * stride);
			tmp = tmp.or(src.and(MASK20).lanewise(VectorOperators.LSHL, 14));
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20).and(MASK34);
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 54).and(MASK10);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 96 + i * stride);
			tmp = tmp.or(src.and(MASK24).lanewise(VectorOperators.LSHL, 10));
			tmp.intoArray(output, 448 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK34);
			tmp.intoArray(output, 576 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 58).and(MASK6);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 112 + i * stride);
			tmp = tmp.or(src.and(MASK28).lanewise(VectorOperators.LSHL, 6));
			tmp.intoArray(output, 704 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28).and(MASK34);
			tmp.intoArray(output, 832 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 62).and(MASK2);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 128 + i * stride);
			tmp = tmp.or(src.and(MASK32).lanewise(VectorOperators.LSHL, 2));
			tmp.intoArray(output, 960 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 144 + i * stride);
			tmp = tmp.or(src.and(MASK2).lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2).and(MASK34);
			tmp.intoArray(output, 160 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 36).and(MASK28);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 160 + i * stride);
			tmp = tmp.or(src.and(MASK6).lanewise(VectorOperators.LSHL, 28));
			tmp.intoArray(output, 288 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6).and(MASK34);
			tmp.intoArray(output, 416 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40).and(MASK24);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 176 + i * stride);
			tmp = tmp.or(src.and(MASK10).lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 544 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10).and(MASK34);
			tmp.intoArray(output, 672 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 44).and(MASK20);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 192 + i * stride);
			tmp = tmp.or(src.and(MASK14).lanewise(VectorOperators.LSHL, 20));
			tmp.intoArray(output, 800 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14).and(MASK34);
			tmp.intoArray(output, 928 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48).and(MASK16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 208 + i * stride);
			tmp = tmp.or(src.and(MASK18).lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 18).and(MASK34);
			tmp.intoArray(output, 224 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 52).and(MASK12);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 224 + i * stride);
			tmp = tmp.or(src.and(MASK22).lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 352 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 22).and(MASK34);
			tmp.intoArray(output, 480 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 56).and(MASK8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 240 + i * stride);
			tmp = tmp.or(src.and(MASK26).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 608 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 26).and(MASK34);
			tmp.intoArray(output, 736 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 60).and(MASK4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 256 + i * stride);
			tmp = tmp.or(src.and(MASK30).lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 864 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 30).and(MASK34);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 272 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 34));
			tmp.intoArray(output, 992 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK34);
			tmp.intoArray(output, 16 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 34).and(MASK30);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 288 + i * stride);
			tmp = tmp.or(src.and(MASK4).lanewise(VectorOperators.LSHL, 30));
			tmp.intoArray(output, 144 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4).and(MASK34);
			tmp.intoArray(output, 272 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 38).and(MASK26);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 304 + i * stride);
			tmp = tmp.or(src.and(MASK8).lanewise(VectorOperators.LSHL, 26));
			tmp.intoArray(output, 400 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK34);
			tmp.intoArray(output, 528 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 42).and(MASK22);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 320 + i * stride);
			tmp = tmp.or(src.and(MASK12).lanewise(VectorOperators.LSHL, 22));
			tmp.intoArray(output, 656 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12).and(MASK34);
			tmp.intoArray(output, 784 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 46).and(MASK18);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 336 + i * stride);
			tmp = tmp.or(src.and(MASK16).lanewise(VectorOperators.LSHL, 18));
			tmp.intoArray(output, 912 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK34);
			tmp.intoArray(output, 80 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 50).and(MASK14);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 352 + i * stride);
			tmp = tmp.or(src.and(MASK20).lanewise(VectorOperators.LSHL, 14));
			tmp.intoArray(output, 208 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20).and(MASK34);
			tmp.intoArray(output, 336 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 54).and(MASK10);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 368 + i * stride);
			tmp = tmp.or(src.and(MASK24).lanewise(VectorOperators.LSHL, 10));
			tmp.intoArray(output, 464 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK34);
			tmp.intoArray(output, 592 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 58).and(MASK6);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 384 + i * stride);
			tmp = tmp.or(src.and(MASK28).lanewise(VectorOperators.LSHL, 6));
			tmp.intoArray(output, 720 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28).and(MASK34);
			tmp.intoArray(output, 848 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 62).and(MASK2);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 400 + i * stride);
			tmp = tmp.or(src.and(MASK32).lanewise(VectorOperators.LSHL, 2));
			tmp.intoArray(output, 976 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 416 + i * stride);
			tmp = tmp.or(src.and(MASK2).lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 48 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2).and(MASK34);
			tmp.intoArray(output, 176 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 36).and(MASK28);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 432 + i * stride);
			tmp = tmp.or(src.and(MASK6).lanewise(VectorOperators.LSHL, 28));
			tmp.intoArray(output, 304 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6).and(MASK34);
			tmp.intoArray(output, 432 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40).and(MASK24);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 448 + i * stride);
			tmp = tmp.or(src.and(MASK10).lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 560 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10).and(MASK34);
			tmp.intoArray(output, 688 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 44).and(MASK20);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 464 + i * stride);
			tmp = tmp.or(src.and(MASK14).lanewise(VectorOperators.LSHL, 20));
			tmp.intoArray(output, 816 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14).and(MASK34);
			tmp.intoArray(output, 944 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48).and(MASK16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 480 + i * stride);
			tmp = tmp.or(src.and(MASK18).lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 112 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 18).and(MASK34);
			tmp.intoArray(output, 240 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 52).and(MASK12);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 496 + i * stride);
			tmp = tmp.or(src.and(MASK22).lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 368 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 22).and(MASK34);
			tmp.intoArray(output, 496 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 56).and(MASK8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 512 + i * stride);
			tmp = tmp.or(src.and(MASK26).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 624 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 26).and(MASK34);
			tmp.intoArray(output, 752 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 60).and(MASK4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 528 + i * stride);
			tmp = tmp.or(src.and(MASK30).lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 880 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 30).and(MASK34);
			tmp.intoArray(output, 1008 + i * stride);
		}
	}

	public static void unpack35(long[] input, long[] output) {
		int stride = LongVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 64;
		for (int i = 0; i < 16 / stride; i++) {
			LongVector src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, i * stride);
			LongVector tmp;
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK35);
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 35).and(MASK29);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 16 + i * stride);
			tmp = tmp.or(src.and(MASK6).lanewise(VectorOperators.LSHL, 29));
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6).and(MASK35);
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 41).and(MASK23);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 32 + i * stride);
			tmp = tmp.or(src.and(MASK12).lanewise(VectorOperators.LSHL, 23));
			tmp.intoArray(output, 384 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12).and(MASK35);
			tmp.intoArray(output, 512 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 47).and(MASK17);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 48 + i * stride);
			tmp = tmp.or(src.and(MASK18).lanewise(VectorOperators.LSHL, 17));
			tmp.intoArray(output, 640 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 18).and(MASK35);
			tmp.intoArray(output, 768 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 53).and(MASK11);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 64 + i * stride);
			tmp = tmp.or(src.and(MASK24).lanewise(VectorOperators.LSHL, 11));
			tmp.intoArray(output, 896 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK35);
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 59).and(MASK5);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 80 + i * stride);
			tmp = tmp.or(src.and(MASK30).lanewise(VectorOperators.LSHL, 5));
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 30).and(MASK34);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 96 + i * stride);
			tmp = tmp.or(src.and(MASK1).lanewise(VectorOperators.LSHL, 34));
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 1).and(MASK35);
			tmp.intoArray(output, 448 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 36).and(MASK28);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 112 + i * stride);
			tmp = tmp.or(src.and(MASK7).lanewise(VectorOperators.LSHL, 28));
			tmp.intoArray(output, 576 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 7).and(MASK35);
			tmp.intoArray(output, 704 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 42).and(MASK22);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 128 + i * stride);
			tmp = tmp.or(src.and(MASK13).lanewise(VectorOperators.LSHL, 22));
			tmp.intoArray(output, 832 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 13).and(MASK35);
			tmp.intoArray(output, 960 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48).and(MASK16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 144 + i * stride);
			tmp = tmp.or(src.and(MASK19).lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 19).and(MASK35);
			tmp.intoArray(output, 160 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 54).and(MASK10);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 160 + i * stride);
			tmp = tmp.or(src.and(MASK25).lanewise(VectorOperators.LSHL, 10));
			tmp.intoArray(output, 288 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 25).and(MASK35);
			tmp.intoArray(output, 416 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 60).and(MASK4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 176 + i * stride);
			tmp = tmp.or(src.and(MASK31).lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 544 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 31).and(MASK33);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 192 + i * stride);
			tmp = tmp.or(src.and(MASK2).lanewise(VectorOperators.LSHL, 33));
			tmp.intoArray(output, 672 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2).and(MASK35);
			tmp.intoArray(output, 800 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 37).and(MASK27);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 208 + i * stride);
			tmp = tmp.or(src.and(MASK8).lanewise(VectorOperators.LSHL, 27));
			tmp.intoArray(output, 928 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK35);
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 43).and(MASK21);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 224 + i * stride);
			tmp = tmp.or(src.and(MASK14).lanewise(VectorOperators.LSHL, 21));
			tmp.intoArray(output, 224 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14).and(MASK35);
			tmp.intoArray(output, 352 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 49).and(MASK15);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 240 + i * stride);
			tmp = tmp.or(src.and(MASK20).lanewise(VectorOperators.LSHL, 15));
			tmp.intoArray(output, 480 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20).and(MASK35);
			tmp.intoArray(output, 608 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 55).and(MASK9);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 256 + i * stride);
			tmp = tmp.or(src.and(MASK26).lanewise(VectorOperators.LSHL, 9));
			tmp.intoArray(output, 736 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 26).and(MASK35);
			tmp.intoArray(output, 864 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 61).and(MASK3);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 272 + i * stride);
			tmp = tmp.or(src.and(MASK32).lanewise(VectorOperators.LSHL, 3));
			tmp.intoArray(output, 992 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 288 + i * stride);
			tmp = tmp.or(src.and(MASK3).lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 16 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 3).and(MASK35);
			tmp.intoArray(output, 144 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 38).and(MASK26);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 304 + i * stride);
			tmp = tmp.or(src.and(MASK9).lanewise(VectorOperators.LSHL, 26));
			tmp.intoArray(output, 272 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 9).and(MASK35);
			tmp.intoArray(output, 400 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 44).and(MASK20);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 320 + i * stride);
			tmp = tmp.or(src.and(MASK15).lanewise(VectorOperators.LSHL, 20));
			tmp.intoArray(output, 528 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 15).and(MASK35);
			tmp.intoArray(output, 656 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 50).and(MASK14);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 336 + i * stride);
			tmp = tmp.or(src.and(MASK21).lanewise(VectorOperators.LSHL, 14));
			tmp.intoArray(output, 784 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 21).and(MASK35);
			tmp.intoArray(output, 912 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 56).and(MASK8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 352 + i * stride);
			tmp = tmp.or(src.and(MASK27).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 80 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 27).and(MASK35);
			tmp.intoArray(output, 208 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 62).and(MASK2);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 368 + i * stride);
			tmp = tmp.or(src.and(MASK33).lanewise(VectorOperators.LSHL, 2));
			tmp.intoArray(output, 336 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 33).and(MASK31);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 384 + i * stride);
			tmp = tmp.or(src.and(MASK4).lanewise(VectorOperators.LSHL, 31));
			tmp.intoArray(output, 464 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4).and(MASK35);
			tmp.intoArray(output, 592 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 39).and(MASK25);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 400 + i * stride);
			tmp = tmp.or(src.and(MASK10).lanewise(VectorOperators.LSHL, 25));
			tmp.intoArray(output, 720 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10).and(MASK35);
			tmp.intoArray(output, 848 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 45).and(MASK19);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 416 + i * stride);
			tmp = tmp.or(src.and(MASK16).lanewise(VectorOperators.LSHL, 19));
			tmp.intoArray(output, 976 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK35);
			tmp.intoArray(output, 48 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 51).and(MASK13);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 432 + i * stride);
			tmp = tmp.or(src.and(MASK22).lanewise(VectorOperators.LSHL, 13));
			tmp.intoArray(output, 176 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 22).and(MASK35);
			tmp.intoArray(output, 304 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 57).and(MASK7);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 448 + i * stride);
			tmp = tmp.or(src.and(MASK28).lanewise(VectorOperators.LSHL, 7));
			tmp.intoArray(output, 432 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28).and(MASK35);
			tmp.intoArray(output, 560 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 63).and(MASK1);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 464 + i * stride);
			tmp = tmp.or(src.and(MASK34).lanewise(VectorOperators.LSHL, 1));
			tmp.intoArray(output, 688 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 34).and(MASK30);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 480 + i * stride);
			tmp = tmp.or(src.and(MASK5).lanewise(VectorOperators.LSHL, 30));
			tmp.intoArray(output, 816 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 5).and(MASK35);
			tmp.intoArray(output, 944 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40).and(MASK24);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 496 + i * stride);
			tmp = tmp.or(src.and(MASK11).lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 112 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 11).and(MASK35);
			tmp.intoArray(output, 240 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 46).and(MASK18);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 512 + i * stride);
			tmp = tmp.or(src.and(MASK17).lanewise(VectorOperators.LSHL, 18));
			tmp.intoArray(output, 368 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 17).and(MASK35);
			tmp.intoArray(output, 496 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 52).and(MASK12);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 528 + i * stride);
			tmp = tmp.or(src.and(MASK23).lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 624 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 23).and(MASK35);
			tmp.intoArray(output, 752 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 58).and(MASK6);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 544 + i * stride);
			tmp = tmp.or(src.and(MASK29).lanewise(VectorOperators.LSHL, 6));
			tmp.intoArray(output, 880 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 29).and(MASK35);
			tmp.intoArray(output, 1008 + i * stride);
		}
	}

	public static void unpack36(long[] input, long[] output) {
		int stride = LongVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 64;
		for (int i = 0; i < 16 / stride; i++) {
			LongVector src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, i * stride);
			LongVector tmp;
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK36);
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 36).and(MASK28);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 16 + i * stride);
			tmp = tmp.or(src.and(MASK8).lanewise(VectorOperators.LSHL, 28));
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK36);
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 44).and(MASK20);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 32 + i * stride);
			tmp = tmp.or(src.and(MASK16).lanewise(VectorOperators.LSHL, 20));
			tmp.intoArray(output, 384 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK36);
			tmp.intoArray(output, 512 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 52).and(MASK12);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 48 + i * stride);
			tmp = tmp.or(src.and(MASK24).lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 640 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK36);
			tmp.intoArray(output, 768 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 60).and(MASK4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 64 + i * stride);
			tmp = tmp.or(src.and(MASK32).lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 896 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 80 + i * stride);
			tmp = tmp.or(src.and(MASK4).lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4).and(MASK36);
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40).and(MASK24);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 96 + i * stride);
			tmp = tmp.or(src.and(MASK12).lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12).and(MASK36);
			tmp.intoArray(output, 448 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48).and(MASK16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 112 + i * stride);
			tmp = tmp.or(src.and(MASK20).lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 576 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20).and(MASK36);
			tmp.intoArray(output, 704 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 56).and(MASK8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 128 + i * stride);
			tmp = tmp.or(src.and(MASK28).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 832 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28).and(MASK36);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 144 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 36));
			tmp.intoArray(output, 960 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK36);
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 36).and(MASK28);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 160 + i * stride);
			tmp = tmp.or(src.and(MASK8).lanewise(VectorOperators.LSHL, 28));
			tmp.intoArray(output, 160 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK36);
			tmp.intoArray(output, 288 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 44).and(MASK20);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 176 + i * stride);
			tmp = tmp.or(src.and(MASK16).lanewise(VectorOperators.LSHL, 20));
			tmp.intoArray(output, 416 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK36);
			tmp.intoArray(output, 544 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 52).and(MASK12);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 192 + i * stride);
			tmp = tmp.or(src.and(MASK24).lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 672 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK36);
			tmp.intoArray(output, 800 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 60).and(MASK4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 208 + i * stride);
			tmp = tmp.or(src.and(MASK32).lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 928 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 224 + i * stride);
			tmp = tmp.or(src.and(MASK4).lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4).and(MASK36);
			tmp.intoArray(output, 224 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40).and(MASK24);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 240 + i * stride);
			tmp = tmp.or(src.and(MASK12).lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 352 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12).and(MASK36);
			tmp.intoArray(output, 480 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48).and(MASK16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 256 + i * stride);
			tmp = tmp.or(src.and(MASK20).lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 608 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20).and(MASK36);
			tmp.intoArray(output, 736 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 56).and(MASK8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 272 + i * stride);
			tmp = tmp.or(src.and(MASK28).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 864 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28).and(MASK36);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 288 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 36));
			tmp.intoArray(output, 992 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK36);
			tmp.intoArray(output, 16 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 36).and(MASK28);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 304 + i * stride);
			tmp = tmp.or(src.and(MASK8).lanewise(VectorOperators.LSHL, 28));
			tmp.intoArray(output, 144 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK36);
			tmp.intoArray(output, 272 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 44).and(MASK20);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 320 + i * stride);
			tmp = tmp.or(src.and(MASK16).lanewise(VectorOperators.LSHL, 20));
			tmp.intoArray(output, 400 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK36);
			tmp.intoArray(output, 528 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 52).and(MASK12);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 336 + i * stride);
			tmp = tmp.or(src.and(MASK24).lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 656 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK36);
			tmp.intoArray(output, 784 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 60).and(MASK4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 352 + i * stride);
			tmp = tmp.or(src.and(MASK32).lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 912 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 368 + i * stride);
			tmp = tmp.or(src.and(MASK4).lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 80 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4).and(MASK36);
			tmp.intoArray(output, 208 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40).and(MASK24);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 384 + i * stride);
			tmp = tmp.or(src.and(MASK12).lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 336 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12).and(MASK36);
			tmp.intoArray(output, 464 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48).and(MASK16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 400 + i * stride);
			tmp = tmp.or(src.and(MASK20).lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 592 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20).and(MASK36);
			tmp.intoArray(output, 720 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 56).and(MASK8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 416 + i * stride);
			tmp = tmp.or(src.and(MASK28).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 848 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28).and(MASK36);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 432 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 36));
			tmp.intoArray(output, 976 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK36);
			tmp.intoArray(output, 48 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 36).and(MASK28);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 448 + i * stride);
			tmp = tmp.or(src.and(MASK8).lanewise(VectorOperators.LSHL, 28));
			tmp.intoArray(output, 176 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK36);
			tmp.intoArray(output, 304 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 44).and(MASK20);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 464 + i * stride);
			tmp = tmp.or(src.and(MASK16).lanewise(VectorOperators.LSHL, 20));
			tmp.intoArray(output, 432 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK36);
			tmp.intoArray(output, 560 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 52).and(MASK12);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 480 + i * stride);
			tmp = tmp.or(src.and(MASK24).lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 688 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK36);
			tmp.intoArray(output, 816 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 60).and(MASK4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 496 + i * stride);
			tmp = tmp.or(src.and(MASK32).lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 944 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 512 + i * stride);
			tmp = tmp.or(src.and(MASK4).lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 112 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4).and(MASK36);
			tmp.intoArray(output, 240 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40).and(MASK24);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 528 + i * stride);
			tmp = tmp.or(src.and(MASK12).lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 368 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12).and(MASK36);
			tmp.intoArray(output, 496 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48).and(MASK16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 544 + i * stride);
			tmp = tmp.or(src.and(MASK20).lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 624 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20).and(MASK36);
			tmp.intoArray(output, 752 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 56).and(MASK8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 560 + i * stride);
			tmp = tmp.or(src.and(MASK28).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 880 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28).and(MASK36);
			tmp.intoArray(output, 1008 + i * stride);
		}
	}

	public static void unpack37(long[] input, long[] output) {
		int stride = LongVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 64;
		for (int i = 0; i < 16 / stride; i++) {
			LongVector src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, i * stride);
			LongVector tmp;
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK37);
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 37).and(MASK27);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 16 + i * stride);
			tmp = tmp.or(src.and(MASK10).lanewise(VectorOperators.LSHL, 27));
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10).and(MASK37);
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 47).and(MASK17);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 32 + i * stride);
			tmp = tmp.or(src.and(MASK20).lanewise(VectorOperators.LSHL, 17));
			tmp.intoArray(output, 384 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20).and(MASK37);
			tmp.intoArray(output, 512 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 57).and(MASK7);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 48 + i * stride);
			tmp = tmp.or(src.and(MASK30).lanewise(VectorOperators.LSHL, 7));
			tmp.intoArray(output, 640 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 30).and(MASK34);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 64 + i * stride);
			tmp = tmp.or(src.and(MASK3).lanewise(VectorOperators.LSHL, 34));
			tmp.intoArray(output, 768 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 3).and(MASK37);
			tmp.intoArray(output, 896 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40).and(MASK24);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 80 + i * stride);
			tmp = tmp.or(src.and(MASK13).lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 13).and(MASK37);
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 50).and(MASK14);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 96 + i * stride);
			tmp = tmp.or(src.and(MASK23).lanewise(VectorOperators.LSHL, 14));
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 23).and(MASK37);
			tmp.intoArray(output, 448 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 60).and(MASK4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 112 + i * stride);
			tmp = tmp.or(src.and(MASK33).lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 576 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 33).and(MASK31);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 128 + i * stride);
			tmp = tmp.or(src.and(MASK6).lanewise(VectorOperators.LSHL, 31));
			tmp.intoArray(output, 704 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6).and(MASK37);
			tmp.intoArray(output, 832 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 43).and(MASK21);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 144 + i * stride);
			tmp = tmp.or(src.and(MASK16).lanewise(VectorOperators.LSHL, 21));
			tmp.intoArray(output, 960 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK37);
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 53).and(MASK11);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 160 + i * stride);
			tmp = tmp.or(src.and(MASK26).lanewise(VectorOperators.LSHL, 11));
			tmp.intoArray(output, 160 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 26).and(MASK37);
			tmp.intoArray(output, 288 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 63).and(MASK1);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 176 + i * stride);
			tmp = tmp.or(src.and(MASK36).lanewise(VectorOperators.LSHL, 1));
			tmp.intoArray(output, 416 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 36).and(MASK28);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 192 + i * stride);
			tmp = tmp.or(src.and(MASK9).lanewise(VectorOperators.LSHL, 28));
			tmp.intoArray(output, 544 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 9).and(MASK37);
			tmp.intoArray(output, 672 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 46).and(MASK18);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 208 + i * stride);
			tmp = tmp.or(src.and(MASK19).lanewise(VectorOperators.LSHL, 18));
			tmp.intoArray(output, 800 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 19).and(MASK37);
			tmp.intoArray(output, 928 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 56).and(MASK8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 224 + i * stride);
			tmp = tmp.or(src.and(MASK29).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 29).and(MASK35);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 240 + i * stride);
			tmp = tmp.or(src.and(MASK2).lanewise(VectorOperators.LSHL, 35));
			tmp.intoArray(output, 224 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2).and(MASK37);
			tmp.intoArray(output, 352 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 39).and(MASK25);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 256 + i * stride);
			tmp = tmp.or(src.and(MASK12).lanewise(VectorOperators.LSHL, 25));
			tmp.intoArray(output, 480 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12).and(MASK37);
			tmp.intoArray(output, 608 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 49).and(MASK15);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 272 + i * stride);
			tmp = tmp.or(src.and(MASK22).lanewise(VectorOperators.LSHL, 15));
			tmp.intoArray(output, 736 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 22).and(MASK37);
			tmp.intoArray(output, 864 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 59).and(MASK5);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 288 + i * stride);
			tmp = tmp.or(src.and(MASK32).lanewise(VectorOperators.LSHL, 5));
			tmp.intoArray(output, 992 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 304 + i * stride);
			tmp = tmp.or(src.and(MASK5).lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 16 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 5).and(MASK37);
			tmp.intoArray(output, 144 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 42).and(MASK22);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 320 + i * stride);
			tmp = tmp.or(src.and(MASK15).lanewise(VectorOperators.LSHL, 22));
			tmp.intoArray(output, 272 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 15).and(MASK37);
			tmp.intoArray(output, 400 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 52).and(MASK12);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 336 + i * stride);
			tmp = tmp.or(src.and(MASK25).lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 528 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 25).and(MASK37);
			tmp.intoArray(output, 656 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 62).and(MASK2);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 352 + i * stride);
			tmp = tmp.or(src.and(MASK35).lanewise(VectorOperators.LSHL, 2));
			tmp.intoArray(output, 784 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 35).and(MASK29);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 368 + i * stride);
			tmp = tmp.or(src.and(MASK8).lanewise(VectorOperators.LSHL, 29));
			tmp.intoArray(output, 912 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK37);
			tmp.intoArray(output, 80 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 45).and(MASK19);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 384 + i * stride);
			tmp = tmp.or(src.and(MASK18).lanewise(VectorOperators.LSHL, 19));
			tmp.intoArray(output, 208 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 18).and(MASK37);
			tmp.intoArray(output, 336 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 55).and(MASK9);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 400 + i * stride);
			tmp = tmp.or(src.and(MASK28).lanewise(VectorOperators.LSHL, 9));
			tmp.intoArray(output, 464 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28).and(MASK36);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 416 + i * stride);
			tmp = tmp.or(src.and(MASK1).lanewise(VectorOperators.LSHL, 36));
			tmp.intoArray(output, 592 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 1).and(MASK37);
			tmp.intoArray(output, 720 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 38).and(MASK26);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 432 + i * stride);
			tmp = tmp.or(src.and(MASK11).lanewise(VectorOperators.LSHL, 26));
			tmp.intoArray(output, 848 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 11).and(MASK37);
			tmp.intoArray(output, 976 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48).and(MASK16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 448 + i * stride);
			tmp = tmp.or(src.and(MASK21).lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 48 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 21).and(MASK37);
			tmp.intoArray(output, 176 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 58).and(MASK6);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 464 + i * stride);
			tmp = tmp.or(src.and(MASK31).lanewise(VectorOperators.LSHL, 6));
			tmp.intoArray(output, 304 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 31).and(MASK33);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 480 + i * stride);
			tmp = tmp.or(src.and(MASK4).lanewise(VectorOperators.LSHL, 33));
			tmp.intoArray(output, 432 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4).and(MASK37);
			tmp.intoArray(output, 560 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 41).and(MASK23);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 496 + i * stride);
			tmp = tmp.or(src.and(MASK14).lanewise(VectorOperators.LSHL, 23));
			tmp.intoArray(output, 688 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14).and(MASK37);
			tmp.intoArray(output, 816 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 51).and(MASK13);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 512 + i * stride);
			tmp = tmp.or(src.and(MASK24).lanewise(VectorOperators.LSHL, 13));
			tmp.intoArray(output, 944 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK37);
			tmp.intoArray(output, 112 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 61).and(MASK3);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 528 + i * stride);
			tmp = tmp.or(src.and(MASK34).lanewise(VectorOperators.LSHL, 3));
			tmp.intoArray(output, 240 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 34).and(MASK30);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 544 + i * stride);
			tmp = tmp.or(src.and(MASK7).lanewise(VectorOperators.LSHL, 30));
			tmp.intoArray(output, 368 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 7).and(MASK37);
			tmp.intoArray(output, 496 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 44).and(MASK20);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 560 + i * stride);
			tmp = tmp.or(src.and(MASK17).lanewise(VectorOperators.LSHL, 20));
			tmp.intoArray(output, 624 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 17).and(MASK37);
			tmp.intoArray(output, 752 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 54).and(MASK10);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 576 + i * stride);
			tmp = tmp.or(src.and(MASK27).lanewise(VectorOperators.LSHL, 10));
			tmp.intoArray(output, 880 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 27).and(MASK37);
			tmp.intoArray(output, 1008 + i * stride);
		}
	}

	public static void unpack38(long[] input, long[] output) {
		int stride = LongVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 64;
		for (int i = 0; i < 16 / stride; i++) {
			LongVector src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, i * stride);
			LongVector tmp;
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK38);
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 38).and(MASK26);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 16 + i * stride);
			tmp = tmp.or(src.and(MASK12).lanewise(VectorOperators.LSHL, 26));
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12).and(MASK38);
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 50).and(MASK14);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 32 + i * stride);
			tmp = tmp.or(src.and(MASK24).lanewise(VectorOperators.LSHL, 14));
			tmp.intoArray(output, 384 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK38);
			tmp.intoArray(output, 512 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 62).and(MASK2);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 48 + i * stride);
			tmp = tmp.or(src.and(MASK36).lanewise(VectorOperators.LSHL, 2));
			tmp.intoArray(output, 640 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 36).and(MASK28);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 64 + i * stride);
			tmp = tmp.or(src.and(MASK10).lanewise(VectorOperators.LSHL, 28));
			tmp.intoArray(output, 768 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10).and(MASK38);
			tmp.intoArray(output, 896 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48).and(MASK16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 80 + i * stride);
			tmp = tmp.or(src.and(MASK22).lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 22).and(MASK38);
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 60).and(MASK4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 96 + i * stride);
			tmp = tmp.or(src.and(MASK34).lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 34).and(MASK30);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 112 + i * stride);
			tmp = tmp.or(src.and(MASK8).lanewise(VectorOperators.LSHL, 30));
			tmp.intoArray(output, 448 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK38);
			tmp.intoArray(output, 576 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 46).and(MASK18);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 128 + i * stride);
			tmp = tmp.or(src.and(MASK20).lanewise(VectorOperators.LSHL, 18));
			tmp.intoArray(output, 704 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20).and(MASK38);
			tmp.intoArray(output, 832 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 58).and(MASK6);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 144 + i * stride);
			tmp = tmp.or(src.and(MASK32).lanewise(VectorOperators.LSHL, 6));
			tmp.intoArray(output, 960 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 160 + i * stride);
			tmp = tmp.or(src.and(MASK6).lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6).and(MASK38);
			tmp.intoArray(output, 160 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 44).and(MASK20);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 176 + i * stride);
			tmp = tmp.or(src.and(MASK18).lanewise(VectorOperators.LSHL, 20));
			tmp.intoArray(output, 288 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 18).and(MASK38);
			tmp.intoArray(output, 416 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 56).and(MASK8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 192 + i * stride);
			tmp = tmp.or(src.and(MASK30).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 544 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 30).and(MASK34);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 208 + i * stride);
			tmp = tmp.or(src.and(MASK4).lanewise(VectorOperators.LSHL, 34));
			tmp.intoArray(output, 672 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4).and(MASK38);
			tmp.intoArray(output, 800 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 42).and(MASK22);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 224 + i * stride);
			tmp = tmp.or(src.and(MASK16).lanewise(VectorOperators.LSHL, 22));
			tmp.intoArray(output, 928 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK38);
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 54).and(MASK10);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 240 + i * stride);
			tmp = tmp.or(src.and(MASK28).lanewise(VectorOperators.LSHL, 10));
			tmp.intoArray(output, 224 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28).and(MASK36);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 256 + i * stride);
			tmp = tmp.or(src.and(MASK2).lanewise(VectorOperators.LSHL, 36));
			tmp.intoArray(output, 352 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2).and(MASK38);
			tmp.intoArray(output, 480 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40).and(MASK24);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 272 + i * stride);
			tmp = tmp.or(src.and(MASK14).lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 608 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14).and(MASK38);
			tmp.intoArray(output, 736 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 52).and(MASK12);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 288 + i * stride);
			tmp = tmp.or(src.and(MASK26).lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 864 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 26).and(MASK38);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 304 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 38));
			tmp.intoArray(output, 992 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK38);
			tmp.intoArray(output, 16 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 38).and(MASK26);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 320 + i * stride);
			tmp = tmp.or(src.and(MASK12).lanewise(VectorOperators.LSHL, 26));
			tmp.intoArray(output, 144 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12).and(MASK38);
			tmp.intoArray(output, 272 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 50).and(MASK14);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 336 + i * stride);
			tmp = tmp.or(src.and(MASK24).lanewise(VectorOperators.LSHL, 14));
			tmp.intoArray(output, 400 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK38);
			tmp.intoArray(output, 528 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 62).and(MASK2);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 352 + i * stride);
			tmp = tmp.or(src.and(MASK36).lanewise(VectorOperators.LSHL, 2));
			tmp.intoArray(output, 656 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 36).and(MASK28);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 368 + i * stride);
			tmp = tmp.or(src.and(MASK10).lanewise(VectorOperators.LSHL, 28));
			tmp.intoArray(output, 784 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10).and(MASK38);
			tmp.intoArray(output, 912 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48).and(MASK16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 384 + i * stride);
			tmp = tmp.or(src.and(MASK22).lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 80 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 22).and(MASK38);
			tmp.intoArray(output, 208 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 60).and(MASK4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 400 + i * stride);
			tmp = tmp.or(src.and(MASK34).lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 336 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 34).and(MASK30);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 416 + i * stride);
			tmp = tmp.or(src.and(MASK8).lanewise(VectorOperators.LSHL, 30));
			tmp.intoArray(output, 464 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK38);
			tmp.intoArray(output, 592 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 46).and(MASK18);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 432 + i * stride);
			tmp = tmp.or(src.and(MASK20).lanewise(VectorOperators.LSHL, 18));
			tmp.intoArray(output, 720 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20).and(MASK38);
			tmp.intoArray(output, 848 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 58).and(MASK6);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 448 + i * stride);
			tmp = tmp.or(src.and(MASK32).lanewise(VectorOperators.LSHL, 6));
			tmp.intoArray(output, 976 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 464 + i * stride);
			tmp = tmp.or(src.and(MASK6).lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 48 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6).and(MASK38);
			tmp.intoArray(output, 176 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 44).and(MASK20);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 480 + i * stride);
			tmp = tmp.or(src.and(MASK18).lanewise(VectorOperators.LSHL, 20));
			tmp.intoArray(output, 304 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 18).and(MASK38);
			tmp.intoArray(output, 432 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 56).and(MASK8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 496 + i * stride);
			tmp = tmp.or(src.and(MASK30).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 560 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 30).and(MASK34);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 512 + i * stride);
			tmp = tmp.or(src.and(MASK4).lanewise(VectorOperators.LSHL, 34));
			tmp.intoArray(output, 688 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4).and(MASK38);
			tmp.intoArray(output, 816 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 42).and(MASK22);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 528 + i * stride);
			tmp = tmp.or(src.and(MASK16).lanewise(VectorOperators.LSHL, 22));
			tmp.intoArray(output, 944 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK38);
			tmp.intoArray(output, 112 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 54).and(MASK10);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 544 + i * stride);
			tmp = tmp.or(src.and(MASK28).lanewise(VectorOperators.LSHL, 10));
			tmp.intoArray(output, 240 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28).and(MASK36);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 560 + i * stride);
			tmp = tmp.or(src.and(MASK2).lanewise(VectorOperators.LSHL, 36));
			tmp.intoArray(output, 368 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2).and(MASK38);
			tmp.intoArray(output, 496 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40).and(MASK24);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 576 + i * stride);
			tmp = tmp.or(src.and(MASK14).lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 624 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14).and(MASK38);
			tmp.intoArray(output, 752 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 52).and(MASK12);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 592 + i * stride);
			tmp = tmp.or(src.and(MASK26).lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 880 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 26).and(MASK38);
			tmp.intoArray(output, 1008 + i * stride);
		}
	}

	public static void unpack39(long[] input, long[] output) {
		int stride = LongVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 64;
		for (int i = 0; i < 16 / stride; i++) {
			LongVector src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, i * stride);
			LongVector tmp;
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK39);
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 39).and(MASK25);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 16 + i * stride);
			tmp = tmp.or(src.and(MASK14).lanewise(VectorOperators.LSHL, 25));
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14).and(MASK39);
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 53).and(MASK11);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 32 + i * stride);
			tmp = tmp.or(src.and(MASK28).lanewise(VectorOperators.LSHL, 11));
			tmp.intoArray(output, 384 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28).and(MASK36);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 48 + i * stride);
			tmp = tmp.or(src.and(MASK3).lanewise(VectorOperators.LSHL, 36));
			tmp.intoArray(output, 512 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 3).and(MASK39);
			tmp.intoArray(output, 640 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 42).and(MASK22);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 64 + i * stride);
			tmp = tmp.or(src.and(MASK17).lanewise(VectorOperators.LSHL, 22));
			tmp.intoArray(output, 768 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 17).and(MASK39);
			tmp.intoArray(output, 896 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 56).and(MASK8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 80 + i * stride);
			tmp = tmp.or(src.and(MASK31).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 31).and(MASK33);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 96 + i * stride);
			tmp = tmp.or(src.and(MASK6).lanewise(VectorOperators.LSHL, 33));
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6).and(MASK39);
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 45).and(MASK19);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 112 + i * stride);
			tmp = tmp.or(src.and(MASK20).lanewise(VectorOperators.LSHL, 19));
			tmp.intoArray(output, 448 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20).and(MASK39);
			tmp.intoArray(output, 576 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 59).and(MASK5);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 128 + i * stride);
			tmp = tmp.or(src.and(MASK34).lanewise(VectorOperators.LSHL, 5));
			tmp.intoArray(output, 704 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 34).and(MASK30);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 144 + i * stride);
			tmp = tmp.or(src.and(MASK9).lanewise(VectorOperators.LSHL, 30));
			tmp.intoArray(output, 832 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 9).and(MASK39);
			tmp.intoArray(output, 960 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48).and(MASK16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 160 + i * stride);
			tmp = tmp.or(src.and(MASK23).lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 23).and(MASK39);
			tmp.intoArray(output, 160 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 62).and(MASK2);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 176 + i * stride);
			tmp = tmp.or(src.and(MASK37).lanewise(VectorOperators.LSHL, 2));
			tmp.intoArray(output, 288 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 37).and(MASK27);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 192 + i * stride);
			tmp = tmp.or(src.and(MASK12).lanewise(VectorOperators.LSHL, 27));
			tmp.intoArray(output, 416 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12).and(MASK39);
			tmp.intoArray(output, 544 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 51).and(MASK13);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 208 + i * stride);
			tmp = tmp.or(src.and(MASK26).lanewise(VectorOperators.LSHL, 13));
			tmp.intoArray(output, 672 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 26).and(MASK38);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 224 + i * stride);
			tmp = tmp.or(src.and(MASK1).lanewise(VectorOperators.LSHL, 38));
			tmp.intoArray(output, 800 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 1).and(MASK39);
			tmp.intoArray(output, 928 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40).and(MASK24);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 240 + i * stride);
			tmp = tmp.or(src.and(MASK15).lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 15).and(MASK39);
			tmp.intoArray(output, 224 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 54).and(MASK10);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 256 + i * stride);
			tmp = tmp.or(src.and(MASK29).lanewise(VectorOperators.LSHL, 10));
			tmp.intoArray(output, 352 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 29).and(MASK35);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 272 + i * stride);
			tmp = tmp.or(src.and(MASK4).lanewise(VectorOperators.LSHL, 35));
			tmp.intoArray(output, 480 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4).and(MASK39);
			tmp.intoArray(output, 608 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 43).and(MASK21);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 288 + i * stride);
			tmp = tmp.or(src.and(MASK18).lanewise(VectorOperators.LSHL, 21));
			tmp.intoArray(output, 736 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 18).and(MASK39);
			tmp.intoArray(output, 864 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 57).and(MASK7);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 304 + i * stride);
			tmp = tmp.or(src.and(MASK32).lanewise(VectorOperators.LSHL, 7));
			tmp.intoArray(output, 992 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 320 + i * stride);
			tmp = tmp.or(src.and(MASK7).lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 16 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 7).and(MASK39);
			tmp.intoArray(output, 144 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 46).and(MASK18);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 336 + i * stride);
			tmp = tmp.or(src.and(MASK21).lanewise(VectorOperators.LSHL, 18));
			tmp.intoArray(output, 272 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 21).and(MASK39);
			tmp.intoArray(output, 400 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 60).and(MASK4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 352 + i * stride);
			tmp = tmp.or(src.and(MASK35).lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 528 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 35).and(MASK29);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 368 + i * stride);
			tmp = tmp.or(src.and(MASK10).lanewise(VectorOperators.LSHL, 29));
			tmp.intoArray(output, 656 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10).and(MASK39);
			tmp.intoArray(output, 784 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 49).and(MASK15);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 384 + i * stride);
			tmp = tmp.or(src.and(MASK24).lanewise(VectorOperators.LSHL, 15));
			tmp.intoArray(output, 912 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK39);
			tmp.intoArray(output, 80 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 63).and(MASK1);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 400 + i * stride);
			tmp = tmp.or(src.and(MASK38).lanewise(VectorOperators.LSHL, 1));
			tmp.intoArray(output, 208 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 38).and(MASK26);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 416 + i * stride);
			tmp = tmp.or(src.and(MASK13).lanewise(VectorOperators.LSHL, 26));
			tmp.intoArray(output, 336 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 13).and(MASK39);
			tmp.intoArray(output, 464 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 52).and(MASK12);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 432 + i * stride);
			tmp = tmp.or(src.and(MASK27).lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 592 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 27).and(MASK37);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 448 + i * stride);
			tmp = tmp.or(src.and(MASK2).lanewise(VectorOperators.LSHL, 37));
			tmp.intoArray(output, 720 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2).and(MASK39);
			tmp.intoArray(output, 848 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 41).and(MASK23);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 464 + i * stride);
			tmp = tmp.or(src.and(MASK16).lanewise(VectorOperators.LSHL, 23));
			tmp.intoArray(output, 976 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK39);
			tmp.intoArray(output, 48 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 55).and(MASK9);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 480 + i * stride);
			tmp = tmp.or(src.and(MASK30).lanewise(VectorOperators.LSHL, 9));
			tmp.intoArray(output, 176 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 30).and(MASK34);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 496 + i * stride);
			tmp = tmp.or(src.and(MASK5).lanewise(VectorOperators.LSHL, 34));
			tmp.intoArray(output, 304 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 5).and(MASK39);
			tmp.intoArray(output, 432 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 44).and(MASK20);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 512 + i * stride);
			tmp = tmp.or(src.and(MASK19).lanewise(VectorOperators.LSHL, 20));
			tmp.intoArray(output, 560 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 19).and(MASK39);
			tmp.intoArray(output, 688 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 58).and(MASK6);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 528 + i * stride);
			tmp = tmp.or(src.and(MASK33).lanewise(VectorOperators.LSHL, 6));
			tmp.intoArray(output, 816 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 33).and(MASK31);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 544 + i * stride);
			tmp = tmp.or(src.and(MASK8).lanewise(VectorOperators.LSHL, 31));
			tmp.intoArray(output, 944 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK39);
			tmp.intoArray(output, 112 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 47).and(MASK17);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 560 + i * stride);
			tmp = tmp.or(src.and(MASK22).lanewise(VectorOperators.LSHL, 17));
			tmp.intoArray(output, 240 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 22).and(MASK39);
			tmp.intoArray(output, 368 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 61).and(MASK3);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 576 + i * stride);
			tmp = tmp.or(src.and(MASK36).lanewise(VectorOperators.LSHL, 3));
			tmp.intoArray(output, 496 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 36).and(MASK28);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 592 + i * stride);
			tmp = tmp.or(src.and(MASK11).lanewise(VectorOperators.LSHL, 28));
			tmp.intoArray(output, 624 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 11).and(MASK39);
			tmp.intoArray(output, 752 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 50).and(MASK14);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 608 + i * stride);
			tmp = tmp.or(src.and(MASK25).lanewise(VectorOperators.LSHL, 14));
			tmp.intoArray(output, 880 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 25).and(MASK39);
			tmp.intoArray(output, 1008 + i * stride);
		}
	}

	public static void unpack40(long[] input, long[] output) {
		int stride = LongVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 64;
		for (int i = 0; i < 16 / stride; i++) {
			LongVector src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, i * stride);
			LongVector tmp;
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK40);
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40).and(MASK24);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 16 + i * stride);
			tmp = tmp.or(src.and(MASK16).lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK40);
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 56).and(MASK8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 32 + i * stride);
			tmp = tmp.or(src.and(MASK32).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 384 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 48 + i * stride);
			tmp = tmp.or(src.and(MASK8).lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 512 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK40);
			tmp.intoArray(output, 640 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48).and(MASK16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 64 + i * stride);
			tmp = tmp.or(src.and(MASK24).lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 768 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK40);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 80 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 40));
			tmp.intoArray(output, 896 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK40);
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40).and(MASK24);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 96 + i * stride);
			tmp = tmp.or(src.and(MASK16).lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK40);
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 56).and(MASK8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 112 + i * stride);
			tmp = tmp.or(src.and(MASK32).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 448 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 128 + i * stride);
			tmp = tmp.or(src.and(MASK8).lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 576 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK40);
			tmp.intoArray(output, 704 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48).and(MASK16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 144 + i * stride);
			tmp = tmp.or(src.and(MASK24).lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 832 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK40);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 160 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 40));
			tmp.intoArray(output, 960 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK40);
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40).and(MASK24);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 176 + i * stride);
			tmp = tmp.or(src.and(MASK16).lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 160 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK40);
			tmp.intoArray(output, 288 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 56).and(MASK8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 192 + i * stride);
			tmp = tmp.or(src.and(MASK32).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 416 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 208 + i * stride);
			tmp = tmp.or(src.and(MASK8).lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 544 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK40);
			tmp.intoArray(output, 672 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48).and(MASK16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 224 + i * stride);
			tmp = tmp.or(src.and(MASK24).lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 800 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK40);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 240 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 40));
			tmp.intoArray(output, 928 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK40);
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40).and(MASK24);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 256 + i * stride);
			tmp = tmp.or(src.and(MASK16).lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 224 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK40);
			tmp.intoArray(output, 352 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 56).and(MASK8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 272 + i * stride);
			tmp = tmp.or(src.and(MASK32).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 480 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 288 + i * stride);
			tmp = tmp.or(src.and(MASK8).lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 608 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK40);
			tmp.intoArray(output, 736 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48).and(MASK16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 304 + i * stride);
			tmp = tmp.or(src.and(MASK24).lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 864 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK40);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 320 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 40));
			tmp.intoArray(output, 992 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK40);
			tmp.intoArray(output, 16 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40).and(MASK24);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 336 + i * stride);
			tmp = tmp.or(src.and(MASK16).lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 144 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK40);
			tmp.intoArray(output, 272 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 56).and(MASK8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 352 + i * stride);
			tmp = tmp.or(src.and(MASK32).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 400 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 368 + i * stride);
			tmp = tmp.or(src.and(MASK8).lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 528 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK40);
			tmp.intoArray(output, 656 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48).and(MASK16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 384 + i * stride);
			tmp = tmp.or(src.and(MASK24).lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 784 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK40);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 400 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 40));
			tmp.intoArray(output, 912 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK40);
			tmp.intoArray(output, 80 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40).and(MASK24);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 416 + i * stride);
			tmp = tmp.or(src.and(MASK16).lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 208 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK40);
			tmp.intoArray(output, 336 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 56).and(MASK8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 432 + i * stride);
			tmp = tmp.or(src.and(MASK32).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 464 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 448 + i * stride);
			tmp = tmp.or(src.and(MASK8).lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 592 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK40);
			tmp.intoArray(output, 720 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48).and(MASK16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 464 + i * stride);
			tmp = tmp.or(src.and(MASK24).lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 848 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK40);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 480 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 40));
			tmp.intoArray(output, 976 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK40);
			tmp.intoArray(output, 48 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40).and(MASK24);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 496 + i * stride);
			tmp = tmp.or(src.and(MASK16).lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 176 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK40);
			tmp.intoArray(output, 304 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 56).and(MASK8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 512 + i * stride);
			tmp = tmp.or(src.and(MASK32).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 432 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 528 + i * stride);
			tmp = tmp.or(src.and(MASK8).lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 560 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK40);
			tmp.intoArray(output, 688 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48).and(MASK16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 544 + i * stride);
			tmp = tmp.or(src.and(MASK24).lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 816 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK40);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 560 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 40));
			tmp.intoArray(output, 944 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK40);
			tmp.intoArray(output, 112 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40).and(MASK24);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 576 + i * stride);
			tmp = tmp.or(src.and(MASK16).lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 240 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK40);
			tmp.intoArray(output, 368 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 56).and(MASK8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 592 + i * stride);
			tmp = tmp.or(src.and(MASK32).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 496 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 608 + i * stride);
			tmp = tmp.or(src.and(MASK8).lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 624 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK40);
			tmp.intoArray(output, 752 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48).and(MASK16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 624 + i * stride);
			tmp = tmp.or(src.and(MASK24).lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 880 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK40);
			tmp.intoArray(output, 1008 + i * stride);
		}
	}

	public static void unpack41(long[] input, long[] output) {
		int stride = LongVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 64;
		for (int i = 0; i < 16 / stride; i++) {
			LongVector src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, i * stride);
			LongVector tmp;
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK41);
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 41).and(MASK23);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 16 + i * stride);
			tmp = tmp.or(src.and(MASK18).lanewise(VectorOperators.LSHL, 23));
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 18).and(MASK41);
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 59).and(MASK5);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 32 + i * stride);
			tmp = tmp.or(src.and(MASK36).lanewise(VectorOperators.LSHL, 5));
			tmp.intoArray(output, 384 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 36).and(MASK28);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 48 + i * stride);
			tmp = tmp.or(src.and(MASK13).lanewise(VectorOperators.LSHL, 28));
			tmp.intoArray(output, 512 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 13).and(MASK41);
			tmp.intoArray(output, 640 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 54).and(MASK10);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 64 + i * stride);
			tmp = tmp.or(src.and(MASK31).lanewise(VectorOperators.LSHL, 10));
			tmp.intoArray(output, 768 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 31).and(MASK33);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 80 + i * stride);
			tmp = tmp.or(src.and(MASK8).lanewise(VectorOperators.LSHL, 33));
			tmp.intoArray(output, 896 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK41);
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 49).and(MASK15);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 96 + i * stride);
			tmp = tmp.or(src.and(MASK26).lanewise(VectorOperators.LSHL, 15));
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 26).and(MASK38);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 112 + i * stride);
			tmp = tmp.or(src.and(MASK3).lanewise(VectorOperators.LSHL, 38));
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 3).and(MASK41);
			tmp.intoArray(output, 448 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 44).and(MASK20);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 128 + i * stride);
			tmp = tmp.or(src.and(MASK21).lanewise(VectorOperators.LSHL, 20));
			tmp.intoArray(output, 576 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 21).and(MASK41);
			tmp.intoArray(output, 704 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 62).and(MASK2);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 144 + i * stride);
			tmp = tmp.or(src.and(MASK39).lanewise(VectorOperators.LSHL, 2));
			tmp.intoArray(output, 832 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 39).and(MASK25);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 160 + i * stride);
			tmp = tmp.or(src.and(MASK16).lanewise(VectorOperators.LSHL, 25));
			tmp.intoArray(output, 960 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK41);
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 57).and(MASK7);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 176 + i * stride);
			tmp = tmp.or(src.and(MASK34).lanewise(VectorOperators.LSHL, 7));
			tmp.intoArray(output, 160 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 34).and(MASK30);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 192 + i * stride);
			tmp = tmp.or(src.and(MASK11).lanewise(VectorOperators.LSHL, 30));
			tmp.intoArray(output, 288 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 11).and(MASK41);
			tmp.intoArray(output, 416 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 52).and(MASK12);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 208 + i * stride);
			tmp = tmp.or(src.and(MASK29).lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 544 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 29).and(MASK35);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 224 + i * stride);
			tmp = tmp.or(src.and(MASK6).lanewise(VectorOperators.LSHL, 35));
			tmp.intoArray(output, 672 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6).and(MASK41);
			tmp.intoArray(output, 800 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 47).and(MASK17);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 240 + i * stride);
			tmp = tmp.or(src.and(MASK24).lanewise(VectorOperators.LSHL, 17));
			tmp.intoArray(output, 928 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK40);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 256 + i * stride);
			tmp = tmp.or(src.and(MASK1).lanewise(VectorOperators.LSHL, 40));
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 1).and(MASK41);
			tmp.intoArray(output, 224 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 42).and(MASK22);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 272 + i * stride);
			tmp = tmp.or(src.and(MASK19).lanewise(VectorOperators.LSHL, 22));
			tmp.intoArray(output, 352 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 19).and(MASK41);
			tmp.intoArray(output, 480 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 60).and(MASK4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 288 + i * stride);
			tmp = tmp.or(src.and(MASK37).lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 608 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 37).and(MASK27);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 304 + i * stride);
			tmp = tmp.or(src.and(MASK14).lanewise(VectorOperators.LSHL, 27));
			tmp.intoArray(output, 736 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14).and(MASK41);
			tmp.intoArray(output, 864 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 55).and(MASK9);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 320 + i * stride);
			tmp = tmp.or(src.and(MASK32).lanewise(VectorOperators.LSHL, 9));
			tmp.intoArray(output, 992 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 336 + i * stride);
			tmp = tmp.or(src.and(MASK9).lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 16 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 9).and(MASK41);
			tmp.intoArray(output, 144 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 50).and(MASK14);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 352 + i * stride);
			tmp = tmp.or(src.and(MASK27).lanewise(VectorOperators.LSHL, 14));
			tmp.intoArray(output, 272 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 27).and(MASK37);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 368 + i * stride);
			tmp = tmp.or(src.and(MASK4).lanewise(VectorOperators.LSHL, 37));
			tmp.intoArray(output, 400 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4).and(MASK41);
			tmp.intoArray(output, 528 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 45).and(MASK19);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 384 + i * stride);
			tmp = tmp.or(src.and(MASK22).lanewise(VectorOperators.LSHL, 19));
			tmp.intoArray(output, 656 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 22).and(MASK41);
			tmp.intoArray(output, 784 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 63).and(MASK1);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 400 + i * stride);
			tmp = tmp.or(src.and(MASK40).lanewise(VectorOperators.LSHL, 1));
			tmp.intoArray(output, 912 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40).and(MASK24);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 416 + i * stride);
			tmp = tmp.or(src.and(MASK17).lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 80 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 17).and(MASK41);
			tmp.intoArray(output, 208 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 58).and(MASK6);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 432 + i * stride);
			tmp = tmp.or(src.and(MASK35).lanewise(VectorOperators.LSHL, 6));
			tmp.intoArray(output, 336 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 35).and(MASK29);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 448 + i * stride);
			tmp = tmp.or(src.and(MASK12).lanewise(VectorOperators.LSHL, 29));
			tmp.intoArray(output, 464 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12).and(MASK41);
			tmp.intoArray(output, 592 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 53).and(MASK11);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 464 + i * stride);
			tmp = tmp.or(src.and(MASK30).lanewise(VectorOperators.LSHL, 11));
			tmp.intoArray(output, 720 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 30).and(MASK34);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 480 + i * stride);
			tmp = tmp.or(src.and(MASK7).lanewise(VectorOperators.LSHL, 34));
			tmp.intoArray(output, 848 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 7).and(MASK41);
			tmp.intoArray(output, 976 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48).and(MASK16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 496 + i * stride);
			tmp = tmp.or(src.and(MASK25).lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 48 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 25).and(MASK39);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 512 + i * stride);
			tmp = tmp.or(src.and(MASK2).lanewise(VectorOperators.LSHL, 39));
			tmp.intoArray(output, 176 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2).and(MASK41);
			tmp.intoArray(output, 304 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 43).and(MASK21);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 528 + i * stride);
			tmp = tmp.or(src.and(MASK20).lanewise(VectorOperators.LSHL, 21));
			tmp.intoArray(output, 432 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20).and(MASK41);
			tmp.intoArray(output, 560 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 61).and(MASK3);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 544 + i * stride);
			tmp = tmp.or(src.and(MASK38).lanewise(VectorOperators.LSHL, 3));
			tmp.intoArray(output, 688 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 38).and(MASK26);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 560 + i * stride);
			tmp = tmp.or(src.and(MASK15).lanewise(VectorOperators.LSHL, 26));
			tmp.intoArray(output, 816 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 15).and(MASK41);
			tmp.intoArray(output, 944 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 56).and(MASK8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 576 + i * stride);
			tmp = tmp.or(src.and(MASK33).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 112 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 33).and(MASK31);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 592 + i * stride);
			tmp = tmp.or(src.and(MASK10).lanewise(VectorOperators.LSHL, 31));
			tmp.intoArray(output, 240 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10).and(MASK41);
			tmp.intoArray(output, 368 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 51).and(MASK13);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 608 + i * stride);
			tmp = tmp.or(src.and(MASK28).lanewise(VectorOperators.LSHL, 13));
			tmp.intoArray(output, 496 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28).and(MASK36);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 624 + i * stride);
			tmp = tmp.or(src.and(MASK5).lanewise(VectorOperators.LSHL, 36));
			tmp.intoArray(output, 624 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 5).and(MASK41);
			tmp.intoArray(output, 752 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 46).and(MASK18);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 640 + i * stride);
			tmp = tmp.or(src.and(MASK23).lanewise(VectorOperators.LSHL, 18));
			tmp.intoArray(output, 880 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 23).and(MASK41);
			tmp.intoArray(output, 1008 + i * stride);
		}
	}

	public static void unpack42(long[] input, long[] output) {
		int stride = LongVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 64;
		for (int i = 0; i < 16 / stride; i++) {
			LongVector src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, i * stride);
			LongVector tmp;
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK42);
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 42).and(MASK22);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 16 + i * stride);
			tmp = tmp.or(src.and(MASK20).lanewise(VectorOperators.LSHL, 22));
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20).and(MASK42);
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 62).and(MASK2);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 32 + i * stride);
			tmp = tmp.or(src.and(MASK40).lanewise(VectorOperators.LSHL, 2));
			tmp.intoArray(output, 384 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40).and(MASK24);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 48 + i * stride);
			tmp = tmp.or(src.and(MASK18).lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 512 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 18).and(MASK42);
			tmp.intoArray(output, 640 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 60).and(MASK4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 64 + i * stride);
			tmp = tmp.or(src.and(MASK38).lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 768 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 38).and(MASK26);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 80 + i * stride);
			tmp = tmp.or(src.and(MASK16).lanewise(VectorOperators.LSHL, 26));
			tmp.intoArray(output, 896 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK42);
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 58).and(MASK6);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 96 + i * stride);
			tmp = tmp.or(src.and(MASK36).lanewise(VectorOperators.LSHL, 6));
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 36).and(MASK28);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 112 + i * stride);
			tmp = tmp.or(src.and(MASK14).lanewise(VectorOperators.LSHL, 28));
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14).and(MASK42);
			tmp.intoArray(output, 448 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 56).and(MASK8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 128 + i * stride);
			tmp = tmp.or(src.and(MASK34).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 576 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 34).and(MASK30);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 144 + i * stride);
			tmp = tmp.or(src.and(MASK12).lanewise(VectorOperators.LSHL, 30));
			tmp.intoArray(output, 704 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12).and(MASK42);
			tmp.intoArray(output, 832 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 54).and(MASK10);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 160 + i * stride);
			tmp = tmp.or(src.and(MASK32).lanewise(VectorOperators.LSHL, 10));
			tmp.intoArray(output, 960 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 176 + i * stride);
			tmp = tmp.or(src.and(MASK10).lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10).and(MASK42);
			tmp.intoArray(output, 160 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 52).and(MASK12);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 192 + i * stride);
			tmp = tmp.or(src.and(MASK30).lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 288 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 30).and(MASK34);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 208 + i * stride);
			tmp = tmp.or(src.and(MASK8).lanewise(VectorOperators.LSHL, 34));
			tmp.intoArray(output, 416 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK42);
			tmp.intoArray(output, 544 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 50).and(MASK14);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 224 + i * stride);
			tmp = tmp.or(src.and(MASK28).lanewise(VectorOperators.LSHL, 14));
			tmp.intoArray(output, 672 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28).and(MASK36);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 240 + i * stride);
			tmp = tmp.or(src.and(MASK6).lanewise(VectorOperators.LSHL, 36));
			tmp.intoArray(output, 800 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6).and(MASK42);
			tmp.intoArray(output, 928 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48).and(MASK16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 256 + i * stride);
			tmp = tmp.or(src.and(MASK26).lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 26).and(MASK38);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 272 + i * stride);
			tmp = tmp.or(src.and(MASK4).lanewise(VectorOperators.LSHL, 38));
			tmp.intoArray(output, 224 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4).and(MASK42);
			tmp.intoArray(output, 352 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 46).and(MASK18);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 288 + i * stride);
			tmp = tmp.or(src.and(MASK24).lanewise(VectorOperators.LSHL, 18));
			tmp.intoArray(output, 480 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK40);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 304 + i * stride);
			tmp = tmp.or(src.and(MASK2).lanewise(VectorOperators.LSHL, 40));
			tmp.intoArray(output, 608 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2).and(MASK42);
			tmp.intoArray(output, 736 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 44).and(MASK20);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 320 + i * stride);
			tmp = tmp.or(src.and(MASK22).lanewise(VectorOperators.LSHL, 20));
			tmp.intoArray(output, 864 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 22).and(MASK42);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 336 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 42));
			tmp.intoArray(output, 992 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK42);
			tmp.intoArray(output, 16 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 42).and(MASK22);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 352 + i * stride);
			tmp = tmp.or(src.and(MASK20).lanewise(VectorOperators.LSHL, 22));
			tmp.intoArray(output, 144 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20).and(MASK42);
			tmp.intoArray(output, 272 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 62).and(MASK2);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 368 + i * stride);
			tmp = tmp.or(src.and(MASK40).lanewise(VectorOperators.LSHL, 2));
			tmp.intoArray(output, 400 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40).and(MASK24);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 384 + i * stride);
			tmp = tmp.or(src.and(MASK18).lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 528 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 18).and(MASK42);
			tmp.intoArray(output, 656 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 60).and(MASK4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 400 + i * stride);
			tmp = tmp.or(src.and(MASK38).lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 784 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 38).and(MASK26);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 416 + i * stride);
			tmp = tmp.or(src.and(MASK16).lanewise(VectorOperators.LSHL, 26));
			tmp.intoArray(output, 912 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK42);
			tmp.intoArray(output, 80 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 58).and(MASK6);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 432 + i * stride);
			tmp = tmp.or(src.and(MASK36).lanewise(VectorOperators.LSHL, 6));
			tmp.intoArray(output, 208 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 36).and(MASK28);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 448 + i * stride);
			tmp = tmp.or(src.and(MASK14).lanewise(VectorOperators.LSHL, 28));
			tmp.intoArray(output, 336 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14).and(MASK42);
			tmp.intoArray(output, 464 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 56).and(MASK8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 464 + i * stride);
			tmp = tmp.or(src.and(MASK34).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 592 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 34).and(MASK30);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 480 + i * stride);
			tmp = tmp.or(src.and(MASK12).lanewise(VectorOperators.LSHL, 30));
			tmp.intoArray(output, 720 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12).and(MASK42);
			tmp.intoArray(output, 848 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 54).and(MASK10);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 496 + i * stride);
			tmp = tmp.or(src.and(MASK32).lanewise(VectorOperators.LSHL, 10));
			tmp.intoArray(output, 976 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 512 + i * stride);
			tmp = tmp.or(src.and(MASK10).lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 48 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10).and(MASK42);
			tmp.intoArray(output, 176 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 52).and(MASK12);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 528 + i * stride);
			tmp = tmp.or(src.and(MASK30).lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 304 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 30).and(MASK34);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 544 + i * stride);
			tmp = tmp.or(src.and(MASK8).lanewise(VectorOperators.LSHL, 34));
			tmp.intoArray(output, 432 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK42);
			tmp.intoArray(output, 560 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 50).and(MASK14);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 560 + i * stride);
			tmp = tmp.or(src.and(MASK28).lanewise(VectorOperators.LSHL, 14));
			tmp.intoArray(output, 688 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28).and(MASK36);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 576 + i * stride);
			tmp = tmp.or(src.and(MASK6).lanewise(VectorOperators.LSHL, 36));
			tmp.intoArray(output, 816 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6).and(MASK42);
			tmp.intoArray(output, 944 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48).and(MASK16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 592 + i * stride);
			tmp = tmp.or(src.and(MASK26).lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 112 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 26).and(MASK38);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 608 + i * stride);
			tmp = tmp.or(src.and(MASK4).lanewise(VectorOperators.LSHL, 38));
			tmp.intoArray(output, 240 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4).and(MASK42);
			tmp.intoArray(output, 368 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 46).and(MASK18);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 624 + i * stride);
			tmp = tmp.or(src.and(MASK24).lanewise(VectorOperators.LSHL, 18));
			tmp.intoArray(output, 496 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK40);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 640 + i * stride);
			tmp = tmp.or(src.and(MASK2).lanewise(VectorOperators.LSHL, 40));
			tmp.intoArray(output, 624 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2).and(MASK42);
			tmp.intoArray(output, 752 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 44).and(MASK20);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 656 + i * stride);
			tmp = tmp.or(src.and(MASK22).lanewise(VectorOperators.LSHL, 20));
			tmp.intoArray(output, 880 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 22).and(MASK42);
			tmp.intoArray(output, 1008 + i * stride);
		}
	}

	public static void unpack43(long[] input, long[] output) {
		int stride = LongVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 64;
		for (int i = 0; i < 16 / stride; i++) {
			LongVector src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, i * stride);
			LongVector tmp;
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK43);
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 43).and(MASK21);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 16 + i * stride);
			tmp = tmp.or(src.and(MASK22).lanewise(VectorOperators.LSHL, 21));
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 22).and(MASK42);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 32 + i * stride);
			tmp = tmp.or(src.and(MASK1).lanewise(VectorOperators.LSHL, 42));
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 1).and(MASK43);
			tmp.intoArray(output, 384 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 44).and(MASK20);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 48 + i * stride);
			tmp = tmp.or(src.and(MASK23).lanewise(VectorOperators.LSHL, 20));
			tmp.intoArray(output, 512 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 23).and(MASK41);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 64 + i * stride);
			tmp = tmp.or(src.and(MASK2).lanewise(VectorOperators.LSHL, 41));
			tmp.intoArray(output, 640 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2).and(MASK43);
			tmp.intoArray(output, 768 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 45).and(MASK19);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 80 + i * stride);
			tmp = tmp.or(src.and(MASK24).lanewise(VectorOperators.LSHL, 19));
			tmp.intoArray(output, 896 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK40);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 96 + i * stride);
			tmp = tmp.or(src.and(MASK3).lanewise(VectorOperators.LSHL, 40));
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 3).and(MASK43);
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 46).and(MASK18);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 112 + i * stride);
			tmp = tmp.or(src.and(MASK25).lanewise(VectorOperators.LSHL, 18));
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 25).and(MASK39);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 128 + i * stride);
			tmp = tmp.or(src.and(MASK4).lanewise(VectorOperators.LSHL, 39));
			tmp.intoArray(output, 448 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4).and(MASK43);
			tmp.intoArray(output, 576 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 47).and(MASK17);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 144 + i * stride);
			tmp = tmp.or(src.and(MASK26).lanewise(VectorOperators.LSHL, 17));
			tmp.intoArray(output, 704 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 26).and(MASK38);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 160 + i * stride);
			tmp = tmp.or(src.and(MASK5).lanewise(VectorOperators.LSHL, 38));
			tmp.intoArray(output, 832 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 5).and(MASK43);
			tmp.intoArray(output, 960 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48).and(MASK16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 176 + i * stride);
			tmp = tmp.or(src.and(MASK27).lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 27).and(MASK37);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 192 + i * stride);
			tmp = tmp.or(src.and(MASK6).lanewise(VectorOperators.LSHL, 37));
			tmp.intoArray(output, 160 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6).and(MASK43);
			tmp.intoArray(output, 288 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 49).and(MASK15);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 208 + i * stride);
			tmp = tmp.or(src.and(MASK28).lanewise(VectorOperators.LSHL, 15));
			tmp.intoArray(output, 416 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28).and(MASK36);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 224 + i * stride);
			tmp = tmp.or(src.and(MASK7).lanewise(VectorOperators.LSHL, 36));
			tmp.intoArray(output, 544 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 7).and(MASK43);
			tmp.intoArray(output, 672 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 50).and(MASK14);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 240 + i * stride);
			tmp = tmp.or(src.and(MASK29).lanewise(VectorOperators.LSHL, 14));
			tmp.intoArray(output, 800 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 29).and(MASK35);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 256 + i * stride);
			tmp = tmp.or(src.and(MASK8).lanewise(VectorOperators.LSHL, 35));
			tmp.intoArray(output, 928 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK43);
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 51).and(MASK13);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 272 + i * stride);
			tmp = tmp.or(src.and(MASK30).lanewise(VectorOperators.LSHL, 13));
			tmp.intoArray(output, 224 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 30).and(MASK34);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 288 + i * stride);
			tmp = tmp.or(src.and(MASK9).lanewise(VectorOperators.LSHL, 34));
			tmp.intoArray(output, 352 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 9).and(MASK43);
			tmp.intoArray(output, 480 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 52).and(MASK12);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 304 + i * stride);
			tmp = tmp.or(src.and(MASK31).lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 608 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 31).and(MASK33);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 320 + i * stride);
			tmp = tmp.or(src.and(MASK10).lanewise(VectorOperators.LSHL, 33));
			tmp.intoArray(output, 736 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10).and(MASK43);
			tmp.intoArray(output, 864 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 53).and(MASK11);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 336 + i * stride);
			tmp = tmp.or(src.and(MASK32).lanewise(VectorOperators.LSHL, 11));
			tmp.intoArray(output, 992 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 352 + i * stride);
			tmp = tmp.or(src.and(MASK11).lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 16 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 11).and(MASK43);
			tmp.intoArray(output, 144 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 54).and(MASK10);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 368 + i * stride);
			tmp = tmp.or(src.and(MASK33).lanewise(VectorOperators.LSHL, 10));
			tmp.intoArray(output, 272 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 33).and(MASK31);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 384 + i * stride);
			tmp = tmp.or(src.and(MASK12).lanewise(VectorOperators.LSHL, 31));
			tmp.intoArray(output, 400 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12).and(MASK43);
			tmp.intoArray(output, 528 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 55).and(MASK9);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 400 + i * stride);
			tmp = tmp.or(src.and(MASK34).lanewise(VectorOperators.LSHL, 9));
			tmp.intoArray(output, 656 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 34).and(MASK30);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 416 + i * stride);
			tmp = tmp.or(src.and(MASK13).lanewise(VectorOperators.LSHL, 30));
			tmp.intoArray(output, 784 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 13).and(MASK43);
			tmp.intoArray(output, 912 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 56).and(MASK8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 432 + i * stride);
			tmp = tmp.or(src.and(MASK35).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 80 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 35).and(MASK29);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 448 + i * stride);
			tmp = tmp.or(src.and(MASK14).lanewise(VectorOperators.LSHL, 29));
			tmp.intoArray(output, 208 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14).and(MASK43);
			tmp.intoArray(output, 336 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 57).and(MASK7);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 464 + i * stride);
			tmp = tmp.or(src.and(MASK36).lanewise(VectorOperators.LSHL, 7));
			tmp.intoArray(output, 464 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 36).and(MASK28);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 480 + i * stride);
			tmp = tmp.or(src.and(MASK15).lanewise(VectorOperators.LSHL, 28));
			tmp.intoArray(output, 592 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 15).and(MASK43);
			tmp.intoArray(output, 720 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 58).and(MASK6);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 496 + i * stride);
			tmp = tmp.or(src.and(MASK37).lanewise(VectorOperators.LSHL, 6));
			tmp.intoArray(output, 848 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 37).and(MASK27);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 512 + i * stride);
			tmp = tmp.or(src.and(MASK16).lanewise(VectorOperators.LSHL, 27));
			tmp.intoArray(output, 976 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK43);
			tmp.intoArray(output, 48 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 59).and(MASK5);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 528 + i * stride);
			tmp = tmp.or(src.and(MASK38).lanewise(VectorOperators.LSHL, 5));
			tmp.intoArray(output, 176 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 38).and(MASK26);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 544 + i * stride);
			tmp = tmp.or(src.and(MASK17).lanewise(VectorOperators.LSHL, 26));
			tmp.intoArray(output, 304 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 17).and(MASK43);
			tmp.intoArray(output, 432 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 60).and(MASK4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 560 + i * stride);
			tmp = tmp.or(src.and(MASK39).lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 560 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 39).and(MASK25);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 576 + i * stride);
			tmp = tmp.or(src.and(MASK18).lanewise(VectorOperators.LSHL, 25));
			tmp.intoArray(output, 688 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 18).and(MASK43);
			tmp.intoArray(output, 816 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 61).and(MASK3);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 592 + i * stride);
			tmp = tmp.or(src.and(MASK40).lanewise(VectorOperators.LSHL, 3));
			tmp.intoArray(output, 944 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40).and(MASK24);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 608 + i * stride);
			tmp = tmp.or(src.and(MASK19).lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 112 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 19).and(MASK43);
			tmp.intoArray(output, 240 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 62).and(MASK2);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 624 + i * stride);
			tmp = tmp.or(src.and(MASK41).lanewise(VectorOperators.LSHL, 2));
			tmp.intoArray(output, 368 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 41).and(MASK23);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 640 + i * stride);
			tmp = tmp.or(src.and(MASK20).lanewise(VectorOperators.LSHL, 23));
			tmp.intoArray(output, 496 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20).and(MASK43);
			tmp.intoArray(output, 624 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 63).and(MASK1);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 656 + i * stride);
			tmp = tmp.or(src.and(MASK42).lanewise(VectorOperators.LSHL, 1));
			tmp.intoArray(output, 752 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 42).and(MASK22);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 672 + i * stride);
			tmp = tmp.or(src.and(MASK21).lanewise(VectorOperators.LSHL, 22));
			tmp.intoArray(output, 880 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 21).and(MASK43);
			tmp.intoArray(output, 1008 + i * stride);
		}
	}

	public static void unpack44(long[] input, long[] output) {
		int stride = LongVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 64;
		for (int i = 0; i < 16 / stride; i++) {
			LongVector src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, i * stride);
			LongVector tmp;
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK44);
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 44).and(MASK20);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 16 + i * stride);
			tmp = tmp.or(src.and(MASK24).lanewise(VectorOperators.LSHL, 20));
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK40);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 32 + i * stride);
			tmp = tmp.or(src.and(MASK4).lanewise(VectorOperators.LSHL, 40));
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4).and(MASK44);
			tmp.intoArray(output, 384 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48).and(MASK16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 48 + i * stride);
			tmp = tmp.or(src.and(MASK28).lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 512 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28).and(MASK36);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 64 + i * stride);
			tmp = tmp.or(src.and(MASK8).lanewise(VectorOperators.LSHL, 36));
			tmp.intoArray(output, 640 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK44);
			tmp.intoArray(output, 768 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 52).and(MASK12);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 80 + i * stride);
			tmp = tmp.or(src.and(MASK32).lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 896 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 96 + i * stride);
			tmp = tmp.or(src.and(MASK12).lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12).and(MASK44);
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 56).and(MASK8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 112 + i * stride);
			tmp = tmp.or(src.and(MASK36).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 36).and(MASK28);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 128 + i * stride);
			tmp = tmp.or(src.and(MASK16).lanewise(VectorOperators.LSHL, 28));
			tmp.intoArray(output, 448 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK44);
			tmp.intoArray(output, 576 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 60).and(MASK4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 144 + i * stride);
			tmp = tmp.or(src.and(MASK40).lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 704 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40).and(MASK24);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 160 + i * stride);
			tmp = tmp.or(src.and(MASK20).lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 832 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20).and(MASK44);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 176 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 44));
			tmp.intoArray(output, 960 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK44);
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 44).and(MASK20);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 192 + i * stride);
			tmp = tmp.or(src.and(MASK24).lanewise(VectorOperators.LSHL, 20));
			tmp.intoArray(output, 160 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK40);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 208 + i * stride);
			tmp = tmp.or(src.and(MASK4).lanewise(VectorOperators.LSHL, 40));
			tmp.intoArray(output, 288 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4).and(MASK44);
			tmp.intoArray(output, 416 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48).and(MASK16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 224 + i * stride);
			tmp = tmp.or(src.and(MASK28).lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 544 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28).and(MASK36);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 240 + i * stride);
			tmp = tmp.or(src.and(MASK8).lanewise(VectorOperators.LSHL, 36));
			tmp.intoArray(output, 672 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK44);
			tmp.intoArray(output, 800 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 52).and(MASK12);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 256 + i * stride);
			tmp = tmp.or(src.and(MASK32).lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 928 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 272 + i * stride);
			tmp = tmp.or(src.and(MASK12).lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12).and(MASK44);
			tmp.intoArray(output, 224 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 56).and(MASK8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 288 + i * stride);
			tmp = tmp.or(src.and(MASK36).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 352 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 36).and(MASK28);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 304 + i * stride);
			tmp = tmp.or(src.and(MASK16).lanewise(VectorOperators.LSHL, 28));
			tmp.intoArray(output, 480 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK44);
			tmp.intoArray(output, 608 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 60).and(MASK4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 320 + i * stride);
			tmp = tmp.or(src.and(MASK40).lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 736 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40).and(MASK24);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 336 + i * stride);
			tmp = tmp.or(src.and(MASK20).lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 864 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20).and(MASK44);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 352 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 44));
			tmp.intoArray(output, 992 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK44);
			tmp.intoArray(output, 16 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 44).and(MASK20);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 368 + i * stride);
			tmp = tmp.or(src.and(MASK24).lanewise(VectorOperators.LSHL, 20));
			tmp.intoArray(output, 144 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK40);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 384 + i * stride);
			tmp = tmp.or(src.and(MASK4).lanewise(VectorOperators.LSHL, 40));
			tmp.intoArray(output, 272 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4).and(MASK44);
			tmp.intoArray(output, 400 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48).and(MASK16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 400 + i * stride);
			tmp = tmp.or(src.and(MASK28).lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 528 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28).and(MASK36);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 416 + i * stride);
			tmp = tmp.or(src.and(MASK8).lanewise(VectorOperators.LSHL, 36));
			tmp.intoArray(output, 656 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK44);
			tmp.intoArray(output, 784 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 52).and(MASK12);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 432 + i * stride);
			tmp = tmp.or(src.and(MASK32).lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 912 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 448 + i * stride);
			tmp = tmp.or(src.and(MASK12).lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 80 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12).and(MASK44);
			tmp.intoArray(output, 208 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 56).and(MASK8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 464 + i * stride);
			tmp = tmp.or(src.and(MASK36).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 336 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 36).and(MASK28);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 480 + i * stride);
			tmp = tmp.or(src.and(MASK16).lanewise(VectorOperators.LSHL, 28));
			tmp.intoArray(output, 464 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK44);
			tmp.intoArray(output, 592 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 60).and(MASK4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 496 + i * stride);
			tmp = tmp.or(src.and(MASK40).lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 720 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40).and(MASK24);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 512 + i * stride);
			tmp = tmp.or(src.and(MASK20).lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 848 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20).and(MASK44);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 528 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 44));
			tmp.intoArray(output, 976 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK44);
			tmp.intoArray(output, 48 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 44).and(MASK20);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 544 + i * stride);
			tmp = tmp.or(src.and(MASK24).lanewise(VectorOperators.LSHL, 20));
			tmp.intoArray(output, 176 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK40);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 560 + i * stride);
			tmp = tmp.or(src.and(MASK4).lanewise(VectorOperators.LSHL, 40));
			tmp.intoArray(output, 304 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4).and(MASK44);
			tmp.intoArray(output, 432 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48).and(MASK16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 576 + i * stride);
			tmp = tmp.or(src.and(MASK28).lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 560 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28).and(MASK36);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 592 + i * stride);
			tmp = tmp.or(src.and(MASK8).lanewise(VectorOperators.LSHL, 36));
			tmp.intoArray(output, 688 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK44);
			tmp.intoArray(output, 816 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 52).and(MASK12);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 608 + i * stride);
			tmp = tmp.or(src.and(MASK32).lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 944 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 624 + i * stride);
			tmp = tmp.or(src.and(MASK12).lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 112 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12).and(MASK44);
			tmp.intoArray(output, 240 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 56).and(MASK8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 640 + i * stride);
			tmp = tmp.or(src.and(MASK36).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 368 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 36).and(MASK28);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 656 + i * stride);
			tmp = tmp.or(src.and(MASK16).lanewise(VectorOperators.LSHL, 28));
			tmp.intoArray(output, 496 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK44);
			tmp.intoArray(output, 624 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 60).and(MASK4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 672 + i * stride);
			tmp = tmp.or(src.and(MASK40).lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 752 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40).and(MASK24);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 688 + i * stride);
			tmp = tmp.or(src.and(MASK20).lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 880 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20).and(MASK44);
			tmp.intoArray(output, 1008 + i * stride);
		}
	}

	public static void unpack45(long[] input, long[] output) {
		int stride = LongVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 64;
		for (int i = 0; i < 16 / stride; i++) {
			LongVector src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, i * stride);
			LongVector tmp;
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK45);
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 45).and(MASK19);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 16 + i * stride);
			tmp = tmp.or(src.and(MASK26).lanewise(VectorOperators.LSHL, 19));
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 26).and(MASK38);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 32 + i * stride);
			tmp = tmp.or(src.and(MASK7).lanewise(VectorOperators.LSHL, 38));
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 7).and(MASK45);
			tmp.intoArray(output, 384 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 52).and(MASK12);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 48 + i * stride);
			tmp = tmp.or(src.and(MASK33).lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 512 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 33).and(MASK31);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 64 + i * stride);
			tmp = tmp.or(src.and(MASK14).lanewise(VectorOperators.LSHL, 31));
			tmp.intoArray(output, 640 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14).and(MASK45);
			tmp.intoArray(output, 768 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 59).and(MASK5);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 80 + i * stride);
			tmp = tmp.or(src.and(MASK40).lanewise(VectorOperators.LSHL, 5));
			tmp.intoArray(output, 896 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40).and(MASK24);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 96 + i * stride);
			tmp = tmp.or(src.and(MASK21).lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 21).and(MASK43);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 112 + i * stride);
			tmp = tmp.or(src.and(MASK2).lanewise(VectorOperators.LSHL, 43));
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2).and(MASK45);
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 47).and(MASK17);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 128 + i * stride);
			tmp = tmp.or(src.and(MASK28).lanewise(VectorOperators.LSHL, 17));
			tmp.intoArray(output, 448 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28).and(MASK36);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 144 + i * stride);
			tmp = tmp.or(src.and(MASK9).lanewise(VectorOperators.LSHL, 36));
			tmp.intoArray(output, 576 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 9).and(MASK45);
			tmp.intoArray(output, 704 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 54).and(MASK10);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 160 + i * stride);
			tmp = tmp.or(src.and(MASK35).lanewise(VectorOperators.LSHL, 10));
			tmp.intoArray(output, 832 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 35).and(MASK29);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 176 + i * stride);
			tmp = tmp.or(src.and(MASK16).lanewise(VectorOperators.LSHL, 29));
			tmp.intoArray(output, 960 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK45);
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 61).and(MASK3);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 192 + i * stride);
			tmp = tmp.or(src.and(MASK42).lanewise(VectorOperators.LSHL, 3));
			tmp.intoArray(output, 160 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 42).and(MASK22);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 208 + i * stride);
			tmp = tmp.or(src.and(MASK23).lanewise(VectorOperators.LSHL, 22));
			tmp.intoArray(output, 288 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 23).and(MASK41);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 224 + i * stride);
			tmp = tmp.or(src.and(MASK4).lanewise(VectorOperators.LSHL, 41));
			tmp.intoArray(output, 416 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4).and(MASK45);
			tmp.intoArray(output, 544 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 49).and(MASK15);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 240 + i * stride);
			tmp = tmp.or(src.and(MASK30).lanewise(VectorOperators.LSHL, 15));
			tmp.intoArray(output, 672 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 30).and(MASK34);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 256 + i * stride);
			tmp = tmp.or(src.and(MASK11).lanewise(VectorOperators.LSHL, 34));
			tmp.intoArray(output, 800 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 11).and(MASK45);
			tmp.intoArray(output, 928 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 56).and(MASK8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 272 + i * stride);
			tmp = tmp.or(src.and(MASK37).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 37).and(MASK27);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 288 + i * stride);
			tmp = tmp.or(src.and(MASK18).lanewise(VectorOperators.LSHL, 27));
			tmp.intoArray(output, 224 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 18).and(MASK45);
			tmp.intoArray(output, 352 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 63).and(MASK1);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 304 + i * stride);
			tmp = tmp.or(src.and(MASK44).lanewise(VectorOperators.LSHL, 1));
			tmp.intoArray(output, 480 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 44).and(MASK20);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 320 + i * stride);
			tmp = tmp.or(src.and(MASK25).lanewise(VectorOperators.LSHL, 20));
			tmp.intoArray(output, 608 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 25).and(MASK39);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 336 + i * stride);
			tmp = tmp.or(src.and(MASK6).lanewise(VectorOperators.LSHL, 39));
			tmp.intoArray(output, 736 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6).and(MASK45);
			tmp.intoArray(output, 864 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 51).and(MASK13);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 352 + i * stride);
			tmp = tmp.or(src.and(MASK32).lanewise(VectorOperators.LSHL, 13));
			tmp.intoArray(output, 992 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 368 + i * stride);
			tmp = tmp.or(src.and(MASK13).lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 16 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 13).and(MASK45);
			tmp.intoArray(output, 144 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 58).and(MASK6);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 384 + i * stride);
			tmp = tmp.or(src.and(MASK39).lanewise(VectorOperators.LSHL, 6));
			tmp.intoArray(output, 272 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 39).and(MASK25);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 400 + i * stride);
			tmp = tmp.or(src.and(MASK20).lanewise(VectorOperators.LSHL, 25));
			tmp.intoArray(output, 400 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20).and(MASK44);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 416 + i * stride);
			tmp = tmp.or(src.and(MASK1).lanewise(VectorOperators.LSHL, 44));
			tmp.intoArray(output, 528 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 1).and(MASK45);
			tmp.intoArray(output, 656 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 46).and(MASK18);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 432 + i * stride);
			tmp = tmp.or(src.and(MASK27).lanewise(VectorOperators.LSHL, 18));
			tmp.intoArray(output, 784 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 27).and(MASK37);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 448 + i * stride);
			tmp = tmp.or(src.and(MASK8).lanewise(VectorOperators.LSHL, 37));
			tmp.intoArray(output, 912 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK45);
			tmp.intoArray(output, 80 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 53).and(MASK11);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 464 + i * stride);
			tmp = tmp.or(src.and(MASK34).lanewise(VectorOperators.LSHL, 11));
			tmp.intoArray(output, 208 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 34).and(MASK30);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 480 + i * stride);
			tmp = tmp.or(src.and(MASK15).lanewise(VectorOperators.LSHL, 30));
			tmp.intoArray(output, 336 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 15).and(MASK45);
			tmp.intoArray(output, 464 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 60).and(MASK4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 496 + i * stride);
			tmp = tmp.or(src.and(MASK41).lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 592 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 41).and(MASK23);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 512 + i * stride);
			tmp = tmp.or(src.and(MASK22).lanewise(VectorOperators.LSHL, 23));
			tmp.intoArray(output, 720 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 22).and(MASK42);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 528 + i * stride);
			tmp = tmp.or(src.and(MASK3).lanewise(VectorOperators.LSHL, 42));
			tmp.intoArray(output, 848 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 3).and(MASK45);
			tmp.intoArray(output, 976 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48).and(MASK16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 544 + i * stride);
			tmp = tmp.or(src.and(MASK29).lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 48 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 29).and(MASK35);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 560 + i * stride);
			tmp = tmp.or(src.and(MASK10).lanewise(VectorOperators.LSHL, 35));
			tmp.intoArray(output, 176 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10).and(MASK45);
			tmp.intoArray(output, 304 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 55).and(MASK9);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 576 + i * stride);
			tmp = tmp.or(src.and(MASK36).lanewise(VectorOperators.LSHL, 9));
			tmp.intoArray(output, 432 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 36).and(MASK28);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 592 + i * stride);
			tmp = tmp.or(src.and(MASK17).lanewise(VectorOperators.LSHL, 28));
			tmp.intoArray(output, 560 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 17).and(MASK45);
			tmp.intoArray(output, 688 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 62).and(MASK2);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 608 + i * stride);
			tmp = tmp.or(src.and(MASK43).lanewise(VectorOperators.LSHL, 2));
			tmp.intoArray(output, 816 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 43).and(MASK21);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 624 + i * stride);
			tmp = tmp.or(src.and(MASK24).lanewise(VectorOperators.LSHL, 21));
			tmp.intoArray(output, 944 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK40);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 640 + i * stride);
			tmp = tmp.or(src.and(MASK5).lanewise(VectorOperators.LSHL, 40));
			tmp.intoArray(output, 112 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 5).and(MASK45);
			tmp.intoArray(output, 240 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 50).and(MASK14);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 656 + i * stride);
			tmp = tmp.or(src.and(MASK31).lanewise(VectorOperators.LSHL, 14));
			tmp.intoArray(output, 368 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 31).and(MASK33);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 672 + i * stride);
			tmp = tmp.or(src.and(MASK12).lanewise(VectorOperators.LSHL, 33));
			tmp.intoArray(output, 496 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12).and(MASK45);
			tmp.intoArray(output, 624 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 57).and(MASK7);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 688 + i * stride);
			tmp = tmp.or(src.and(MASK38).lanewise(VectorOperators.LSHL, 7));
			tmp.intoArray(output, 752 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 38).and(MASK26);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 704 + i * stride);
			tmp = tmp.or(src.and(MASK19).lanewise(VectorOperators.LSHL, 26));
			tmp.intoArray(output, 880 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 19).and(MASK45);
			tmp.intoArray(output, 1008 + i * stride);
		}
	}

	public static void unpack46(long[] input, long[] output) {
		int stride = LongVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 64;
		for (int i = 0; i < 16 / stride; i++) {
			LongVector src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, i * stride);
			LongVector tmp;
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK46);
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 46).and(MASK18);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 16 + i * stride);
			tmp = tmp.or(src.and(MASK28).lanewise(VectorOperators.LSHL, 18));
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28).and(MASK36);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 32 + i * stride);
			tmp = tmp.or(src.and(MASK10).lanewise(VectorOperators.LSHL, 36));
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10).and(MASK46);
			tmp.intoArray(output, 384 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 56).and(MASK8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 48 + i * stride);
			tmp = tmp.or(src.and(MASK38).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 512 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 38).and(MASK26);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 64 + i * stride);
			tmp = tmp.or(src.and(MASK20).lanewise(VectorOperators.LSHL, 26));
			tmp.intoArray(output, 640 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20).and(MASK44);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 80 + i * stride);
			tmp = tmp.or(src.and(MASK2).lanewise(VectorOperators.LSHL, 44));
			tmp.intoArray(output, 768 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2).and(MASK46);
			tmp.intoArray(output, 896 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48).and(MASK16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 96 + i * stride);
			tmp = tmp.or(src.and(MASK30).lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 30).and(MASK34);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 112 + i * stride);
			tmp = tmp.or(src.and(MASK12).lanewise(VectorOperators.LSHL, 34));
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12).and(MASK46);
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 58).and(MASK6);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 128 + i * stride);
			tmp = tmp.or(src.and(MASK40).lanewise(VectorOperators.LSHL, 6));
			tmp.intoArray(output, 448 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40).and(MASK24);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 144 + i * stride);
			tmp = tmp.or(src.and(MASK22).lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 576 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 22).and(MASK42);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 160 + i * stride);
			tmp = tmp.or(src.and(MASK4).lanewise(VectorOperators.LSHL, 42));
			tmp.intoArray(output, 704 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4).and(MASK46);
			tmp.intoArray(output, 832 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 50).and(MASK14);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 176 + i * stride);
			tmp = tmp.or(src.and(MASK32).lanewise(VectorOperators.LSHL, 14));
			tmp.intoArray(output, 960 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 192 + i * stride);
			tmp = tmp.or(src.and(MASK14).lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14).and(MASK46);
			tmp.intoArray(output, 160 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 60).and(MASK4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 208 + i * stride);
			tmp = tmp.or(src.and(MASK42).lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 288 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 42).and(MASK22);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 224 + i * stride);
			tmp = tmp.or(src.and(MASK24).lanewise(VectorOperators.LSHL, 22));
			tmp.intoArray(output, 416 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK40);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 240 + i * stride);
			tmp = tmp.or(src.and(MASK6).lanewise(VectorOperators.LSHL, 40));
			tmp.intoArray(output, 544 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6).and(MASK46);
			tmp.intoArray(output, 672 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 52).and(MASK12);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 256 + i * stride);
			tmp = tmp.or(src.and(MASK34).lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 800 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 34).and(MASK30);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 272 + i * stride);
			tmp = tmp.or(src.and(MASK16).lanewise(VectorOperators.LSHL, 30));
			tmp.intoArray(output, 928 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK46);
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 62).and(MASK2);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 288 + i * stride);
			tmp = tmp.or(src.and(MASK44).lanewise(VectorOperators.LSHL, 2));
			tmp.intoArray(output, 224 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 44).and(MASK20);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 304 + i * stride);
			tmp = tmp.or(src.and(MASK26).lanewise(VectorOperators.LSHL, 20));
			tmp.intoArray(output, 352 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 26).and(MASK38);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 320 + i * stride);
			tmp = tmp.or(src.and(MASK8).lanewise(VectorOperators.LSHL, 38));
			tmp.intoArray(output, 480 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK46);
			tmp.intoArray(output, 608 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 54).and(MASK10);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 336 + i * stride);
			tmp = tmp.or(src.and(MASK36).lanewise(VectorOperators.LSHL, 10));
			tmp.intoArray(output, 736 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 36).and(MASK28);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 352 + i * stride);
			tmp = tmp.or(src.and(MASK18).lanewise(VectorOperators.LSHL, 28));
			tmp.intoArray(output, 864 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 18).and(MASK46);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 368 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 46));
			tmp.intoArray(output, 992 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK46);
			tmp.intoArray(output, 16 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 46).and(MASK18);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 384 + i * stride);
			tmp = tmp.or(src.and(MASK28).lanewise(VectorOperators.LSHL, 18));
			tmp.intoArray(output, 144 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28).and(MASK36);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 400 + i * stride);
			tmp = tmp.or(src.and(MASK10).lanewise(VectorOperators.LSHL, 36));
			tmp.intoArray(output, 272 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10).and(MASK46);
			tmp.intoArray(output, 400 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 56).and(MASK8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 416 + i * stride);
			tmp = tmp.or(src.and(MASK38).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 528 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 38).and(MASK26);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 432 + i * stride);
			tmp = tmp.or(src.and(MASK20).lanewise(VectorOperators.LSHL, 26));
			tmp.intoArray(output, 656 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20).and(MASK44);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 448 + i * stride);
			tmp = tmp.or(src.and(MASK2).lanewise(VectorOperators.LSHL, 44));
			tmp.intoArray(output, 784 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2).and(MASK46);
			tmp.intoArray(output, 912 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48).and(MASK16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 464 + i * stride);
			tmp = tmp.or(src.and(MASK30).lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 80 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 30).and(MASK34);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 480 + i * stride);
			tmp = tmp.or(src.and(MASK12).lanewise(VectorOperators.LSHL, 34));
			tmp.intoArray(output, 208 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12).and(MASK46);
			tmp.intoArray(output, 336 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 58).and(MASK6);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 496 + i * stride);
			tmp = tmp.or(src.and(MASK40).lanewise(VectorOperators.LSHL, 6));
			tmp.intoArray(output, 464 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40).and(MASK24);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 512 + i * stride);
			tmp = tmp.or(src.and(MASK22).lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 592 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 22).and(MASK42);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 528 + i * stride);
			tmp = tmp.or(src.and(MASK4).lanewise(VectorOperators.LSHL, 42));
			tmp.intoArray(output, 720 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4).and(MASK46);
			tmp.intoArray(output, 848 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 50).and(MASK14);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 544 + i * stride);
			tmp = tmp.or(src.and(MASK32).lanewise(VectorOperators.LSHL, 14));
			tmp.intoArray(output, 976 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 560 + i * stride);
			tmp = tmp.or(src.and(MASK14).lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 48 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14).and(MASK46);
			tmp.intoArray(output, 176 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 60).and(MASK4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 576 + i * stride);
			tmp = tmp.or(src.and(MASK42).lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 304 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 42).and(MASK22);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 592 + i * stride);
			tmp = tmp.or(src.and(MASK24).lanewise(VectorOperators.LSHL, 22));
			tmp.intoArray(output, 432 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK40);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 608 + i * stride);
			tmp = tmp.or(src.and(MASK6).lanewise(VectorOperators.LSHL, 40));
			tmp.intoArray(output, 560 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6).and(MASK46);
			tmp.intoArray(output, 688 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 52).and(MASK12);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 624 + i * stride);
			tmp = tmp.or(src.and(MASK34).lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 816 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 34).and(MASK30);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 640 + i * stride);
			tmp = tmp.or(src.and(MASK16).lanewise(VectorOperators.LSHL, 30));
			tmp.intoArray(output, 944 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK46);
			tmp.intoArray(output, 112 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 62).and(MASK2);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 656 + i * stride);
			tmp = tmp.or(src.and(MASK44).lanewise(VectorOperators.LSHL, 2));
			tmp.intoArray(output, 240 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 44).and(MASK20);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 672 + i * stride);
			tmp = tmp.or(src.and(MASK26).lanewise(VectorOperators.LSHL, 20));
			tmp.intoArray(output, 368 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 26).and(MASK38);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 688 + i * stride);
			tmp = tmp.or(src.and(MASK8).lanewise(VectorOperators.LSHL, 38));
			tmp.intoArray(output, 496 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK46);
			tmp.intoArray(output, 624 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 54).and(MASK10);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 704 + i * stride);
			tmp = tmp.or(src.and(MASK36).lanewise(VectorOperators.LSHL, 10));
			tmp.intoArray(output, 752 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 36).and(MASK28);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 720 + i * stride);
			tmp = tmp.or(src.and(MASK18).lanewise(VectorOperators.LSHL, 28));
			tmp.intoArray(output, 880 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 18).and(MASK46);
			tmp.intoArray(output, 1008 + i * stride);
		}
	}

	public static void unpack47(long[] input, long[] output) {
		int stride = LongVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 64;
		for (int i = 0; i < 16 / stride; i++) {
			LongVector src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, i * stride);
			LongVector tmp;
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK47);
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 47).and(MASK17);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 16 + i * stride);
			tmp = tmp.or(src.and(MASK30).lanewise(VectorOperators.LSHL, 17));
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 30).and(MASK34);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 32 + i * stride);
			tmp = tmp.or(src.and(MASK13).lanewise(VectorOperators.LSHL, 34));
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 13).and(MASK47);
			tmp.intoArray(output, 384 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 60).and(MASK4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 48 + i * stride);
			tmp = tmp.or(src.and(MASK43).lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 512 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 43).and(MASK21);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 64 + i * stride);
			tmp = tmp.or(src.and(MASK26).lanewise(VectorOperators.LSHL, 21));
			tmp.intoArray(output, 640 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 26).and(MASK38);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 80 + i * stride);
			tmp = tmp.or(src.and(MASK9).lanewise(VectorOperators.LSHL, 38));
			tmp.intoArray(output, 768 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 9).and(MASK47);
			tmp.intoArray(output, 896 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 56).and(MASK8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 96 + i * stride);
			tmp = tmp.or(src.and(MASK39).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 39).and(MASK25);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 112 + i * stride);
			tmp = tmp.or(src.and(MASK22).lanewise(VectorOperators.LSHL, 25));
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 22).and(MASK42);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 128 + i * stride);
			tmp = tmp.or(src.and(MASK5).lanewise(VectorOperators.LSHL, 42));
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 5).and(MASK47);
			tmp.intoArray(output, 448 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 52).and(MASK12);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 144 + i * stride);
			tmp = tmp.or(src.and(MASK35).lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 576 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 35).and(MASK29);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 160 + i * stride);
			tmp = tmp.or(src.and(MASK18).lanewise(VectorOperators.LSHL, 29));
			tmp.intoArray(output, 704 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 18).and(MASK46);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 176 + i * stride);
			tmp = tmp.or(src.and(MASK1).lanewise(VectorOperators.LSHL, 46));
			tmp.intoArray(output, 832 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 1).and(MASK47);
			tmp.intoArray(output, 960 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48).and(MASK16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 192 + i * stride);
			tmp = tmp.or(src.and(MASK31).lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 31).and(MASK33);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 208 + i * stride);
			tmp = tmp.or(src.and(MASK14).lanewise(VectorOperators.LSHL, 33));
			tmp.intoArray(output, 160 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14).and(MASK47);
			tmp.intoArray(output, 288 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 61).and(MASK3);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 224 + i * stride);
			tmp = tmp.or(src.and(MASK44).lanewise(VectorOperators.LSHL, 3));
			tmp.intoArray(output, 416 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 44).and(MASK20);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 240 + i * stride);
			tmp = tmp.or(src.and(MASK27).lanewise(VectorOperators.LSHL, 20));
			tmp.intoArray(output, 544 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 27).and(MASK37);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 256 + i * stride);
			tmp = tmp.or(src.and(MASK10).lanewise(VectorOperators.LSHL, 37));
			tmp.intoArray(output, 672 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10).and(MASK47);
			tmp.intoArray(output, 800 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 57).and(MASK7);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 272 + i * stride);
			tmp = tmp.or(src.and(MASK40).lanewise(VectorOperators.LSHL, 7));
			tmp.intoArray(output, 928 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40).and(MASK24);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 288 + i * stride);
			tmp = tmp.or(src.and(MASK23).lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 23).and(MASK41);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 304 + i * stride);
			tmp = tmp.or(src.and(MASK6).lanewise(VectorOperators.LSHL, 41));
			tmp.intoArray(output, 224 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6).and(MASK47);
			tmp.intoArray(output, 352 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 53).and(MASK11);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 320 + i * stride);
			tmp = tmp.or(src.and(MASK36).lanewise(VectorOperators.LSHL, 11));
			tmp.intoArray(output, 480 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 36).and(MASK28);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 336 + i * stride);
			tmp = tmp.or(src.and(MASK19).lanewise(VectorOperators.LSHL, 28));
			tmp.intoArray(output, 608 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 19).and(MASK45);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 352 + i * stride);
			tmp = tmp.or(src.and(MASK2).lanewise(VectorOperators.LSHL, 45));
			tmp.intoArray(output, 736 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2).and(MASK47);
			tmp.intoArray(output, 864 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 49).and(MASK15);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 368 + i * stride);
			tmp = tmp.or(src.and(MASK32).lanewise(VectorOperators.LSHL, 15));
			tmp.intoArray(output, 992 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 384 + i * stride);
			tmp = tmp.or(src.and(MASK15).lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 16 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 15).and(MASK47);
			tmp.intoArray(output, 144 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 62).and(MASK2);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 400 + i * stride);
			tmp = tmp.or(src.and(MASK45).lanewise(VectorOperators.LSHL, 2));
			tmp.intoArray(output, 272 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 45).and(MASK19);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 416 + i * stride);
			tmp = tmp.or(src.and(MASK28).lanewise(VectorOperators.LSHL, 19));
			tmp.intoArray(output, 400 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28).and(MASK36);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 432 + i * stride);
			tmp = tmp.or(src.and(MASK11).lanewise(VectorOperators.LSHL, 36));
			tmp.intoArray(output, 528 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 11).and(MASK47);
			tmp.intoArray(output, 656 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 58).and(MASK6);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 448 + i * stride);
			tmp = tmp.or(src.and(MASK41).lanewise(VectorOperators.LSHL, 6));
			tmp.intoArray(output, 784 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 41).and(MASK23);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 464 + i * stride);
			tmp = tmp.or(src.and(MASK24).lanewise(VectorOperators.LSHL, 23));
			tmp.intoArray(output, 912 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK40);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 480 + i * stride);
			tmp = tmp.or(src.and(MASK7).lanewise(VectorOperators.LSHL, 40));
			tmp.intoArray(output, 80 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 7).and(MASK47);
			tmp.intoArray(output, 208 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 54).and(MASK10);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 496 + i * stride);
			tmp = tmp.or(src.and(MASK37).lanewise(VectorOperators.LSHL, 10));
			tmp.intoArray(output, 336 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 37).and(MASK27);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 512 + i * stride);
			tmp = tmp.or(src.and(MASK20).lanewise(VectorOperators.LSHL, 27));
			tmp.intoArray(output, 464 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20).and(MASK44);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 528 + i * stride);
			tmp = tmp.or(src.and(MASK3).lanewise(VectorOperators.LSHL, 44));
			tmp.intoArray(output, 592 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 3).and(MASK47);
			tmp.intoArray(output, 720 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 50).and(MASK14);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 544 + i * stride);
			tmp = tmp.or(src.and(MASK33).lanewise(VectorOperators.LSHL, 14));
			tmp.intoArray(output, 848 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 33).and(MASK31);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 560 + i * stride);
			tmp = tmp.or(src.and(MASK16).lanewise(VectorOperators.LSHL, 31));
			tmp.intoArray(output, 976 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK47);
			tmp.intoArray(output, 48 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 63).and(MASK1);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 576 + i * stride);
			tmp = tmp.or(src.and(MASK46).lanewise(VectorOperators.LSHL, 1));
			tmp.intoArray(output, 176 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 46).and(MASK18);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 592 + i * stride);
			tmp = tmp.or(src.and(MASK29).lanewise(VectorOperators.LSHL, 18));
			tmp.intoArray(output, 304 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 29).and(MASK35);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 608 + i * stride);
			tmp = tmp.or(src.and(MASK12).lanewise(VectorOperators.LSHL, 35));
			tmp.intoArray(output, 432 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12).and(MASK47);
			tmp.intoArray(output, 560 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 59).and(MASK5);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 624 + i * stride);
			tmp = tmp.or(src.and(MASK42).lanewise(VectorOperators.LSHL, 5));
			tmp.intoArray(output, 688 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 42).and(MASK22);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 640 + i * stride);
			tmp = tmp.or(src.and(MASK25).lanewise(VectorOperators.LSHL, 22));
			tmp.intoArray(output, 816 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 25).and(MASK39);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 656 + i * stride);
			tmp = tmp.or(src.and(MASK8).lanewise(VectorOperators.LSHL, 39));
			tmp.intoArray(output, 944 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK47);
			tmp.intoArray(output, 112 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 55).and(MASK9);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 672 + i * stride);
			tmp = tmp.or(src.and(MASK38).lanewise(VectorOperators.LSHL, 9));
			tmp.intoArray(output, 240 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 38).and(MASK26);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 688 + i * stride);
			tmp = tmp.or(src.and(MASK21).lanewise(VectorOperators.LSHL, 26));
			tmp.intoArray(output, 368 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 21).and(MASK43);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 704 + i * stride);
			tmp = tmp.or(src.and(MASK4).lanewise(VectorOperators.LSHL, 43));
			tmp.intoArray(output, 496 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4).and(MASK47);
			tmp.intoArray(output, 624 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 51).and(MASK13);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 720 + i * stride);
			tmp = tmp.or(src.and(MASK34).lanewise(VectorOperators.LSHL, 13));
			tmp.intoArray(output, 752 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 34).and(MASK30);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 736 + i * stride);
			tmp = tmp.or(src.and(MASK17).lanewise(VectorOperators.LSHL, 30));
			tmp.intoArray(output, 880 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 17).and(MASK47);
			tmp.intoArray(output, 1008 + i * stride);
		}
	}

	public static void unpack48(long[] input, long[] output) {
		int stride = LongVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 64;
		for (int i = 0; i < 16 / stride; i++) {
			LongVector src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, i * stride);
			LongVector tmp;
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK48);
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48).and(MASK16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 16 + i * stride);
			tmp = tmp.or(src.and(MASK32).lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 32 + i * stride);
			tmp = tmp.or(src.and(MASK16).lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK48);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 48 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 48));
			tmp.intoArray(output, 384 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK48);
			tmp.intoArray(output, 512 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48).and(MASK16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 64 + i * stride);
			tmp = tmp.or(src.and(MASK32).lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 640 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 80 + i * stride);
			tmp = tmp.or(src.and(MASK16).lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 768 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK48);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 96 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 48));
			tmp.intoArray(output, 896 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK48);
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48).and(MASK16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 112 + i * stride);
			tmp = tmp.or(src.and(MASK32).lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 128 + i * stride);
			tmp = tmp.or(src.and(MASK16).lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK48);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 144 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 48));
			tmp.intoArray(output, 448 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK48);
			tmp.intoArray(output, 576 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48).and(MASK16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 160 + i * stride);
			tmp = tmp.or(src.and(MASK32).lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 704 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 176 + i * stride);
			tmp = tmp.or(src.and(MASK16).lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 832 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK48);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 192 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 48));
			tmp.intoArray(output, 960 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK48);
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48).and(MASK16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 208 + i * stride);
			tmp = tmp.or(src.and(MASK32).lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 160 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 224 + i * stride);
			tmp = tmp.or(src.and(MASK16).lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 288 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK48);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 240 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 48));
			tmp.intoArray(output, 416 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK48);
			tmp.intoArray(output, 544 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48).and(MASK16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 256 + i * stride);
			tmp = tmp.or(src.and(MASK32).lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 672 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 272 + i * stride);
			tmp = tmp.or(src.and(MASK16).lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 800 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK48);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 288 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 48));
			tmp.intoArray(output, 928 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK48);
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48).and(MASK16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 304 + i * stride);
			tmp = tmp.or(src.and(MASK32).lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 224 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 320 + i * stride);
			tmp = tmp.or(src.and(MASK16).lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 352 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK48);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 336 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 48));
			tmp.intoArray(output, 480 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK48);
			tmp.intoArray(output, 608 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48).and(MASK16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 352 + i * stride);
			tmp = tmp.or(src.and(MASK32).lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 736 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 368 + i * stride);
			tmp = tmp.or(src.and(MASK16).lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 864 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK48);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 384 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 48));
			tmp.intoArray(output, 992 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK48);
			tmp.intoArray(output, 16 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48).and(MASK16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 400 + i * stride);
			tmp = tmp.or(src.and(MASK32).lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 144 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 416 + i * stride);
			tmp = tmp.or(src.and(MASK16).lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 272 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK48);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 432 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 48));
			tmp.intoArray(output, 400 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK48);
			tmp.intoArray(output, 528 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48).and(MASK16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 448 + i * stride);
			tmp = tmp.or(src.and(MASK32).lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 656 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 464 + i * stride);
			tmp = tmp.or(src.and(MASK16).lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 784 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK48);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 480 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 48));
			tmp.intoArray(output, 912 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK48);
			tmp.intoArray(output, 80 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48).and(MASK16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 496 + i * stride);
			tmp = tmp.or(src.and(MASK32).lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 208 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 512 + i * stride);
			tmp = tmp.or(src.and(MASK16).lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 336 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK48);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 528 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 48));
			tmp.intoArray(output, 464 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK48);
			tmp.intoArray(output, 592 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48).and(MASK16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 544 + i * stride);
			tmp = tmp.or(src.and(MASK32).lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 720 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 560 + i * stride);
			tmp = tmp.or(src.and(MASK16).lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 848 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK48);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 576 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 48));
			tmp.intoArray(output, 976 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK48);
			tmp.intoArray(output, 48 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48).and(MASK16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 592 + i * stride);
			tmp = tmp.or(src.and(MASK32).lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 176 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 608 + i * stride);
			tmp = tmp.or(src.and(MASK16).lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 304 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK48);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 624 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 48));
			tmp.intoArray(output, 432 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK48);
			tmp.intoArray(output, 560 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48).and(MASK16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 640 + i * stride);
			tmp = tmp.or(src.and(MASK32).lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 688 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 656 + i * stride);
			tmp = tmp.or(src.and(MASK16).lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 816 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK48);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 672 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 48));
			tmp.intoArray(output, 944 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK48);
			tmp.intoArray(output, 112 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48).and(MASK16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 688 + i * stride);
			tmp = tmp.or(src.and(MASK32).lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 240 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 704 + i * stride);
			tmp = tmp.or(src.and(MASK16).lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 368 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK48);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 720 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 48));
			tmp.intoArray(output, 496 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK48);
			tmp.intoArray(output, 624 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48).and(MASK16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 736 + i * stride);
			tmp = tmp.or(src.and(MASK32).lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 752 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 752 + i * stride);
			tmp = tmp.or(src.and(MASK16).lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 880 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK48);
			tmp.intoArray(output, 1008 + i * stride);
		}
	}

	public static void unpack49(long[] input, long[] output) {
		int stride = LongVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 64;
		for (int i = 0; i < 16 / stride; i++) {
			LongVector src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, i * stride);
			LongVector tmp;
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK49);
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 49).and(MASK15);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 16 + i * stride);
			tmp = tmp.or(src.and(MASK34).lanewise(VectorOperators.LSHL, 15));
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 34).and(MASK30);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 32 + i * stride);
			tmp = tmp.or(src.and(MASK19).lanewise(VectorOperators.LSHL, 30));
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 19).and(MASK45);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 48 + i * stride);
			tmp = tmp.or(src.and(MASK4).lanewise(VectorOperators.LSHL, 45));
			tmp.intoArray(output, 384 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4).and(MASK49);
			tmp.intoArray(output, 512 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 53).and(MASK11);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 64 + i * stride);
			tmp = tmp.or(src.and(MASK38).lanewise(VectorOperators.LSHL, 11));
			tmp.intoArray(output, 640 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 38).and(MASK26);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 80 + i * stride);
			tmp = tmp.or(src.and(MASK23).lanewise(VectorOperators.LSHL, 26));
			tmp.intoArray(output, 768 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 23).and(MASK41);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 96 + i * stride);
			tmp = tmp.or(src.and(MASK8).lanewise(VectorOperators.LSHL, 41));
			tmp.intoArray(output, 896 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK49);
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 57).and(MASK7);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 112 + i * stride);
			tmp = tmp.or(src.and(MASK42).lanewise(VectorOperators.LSHL, 7));
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 42).and(MASK22);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 128 + i * stride);
			tmp = tmp.or(src.and(MASK27).lanewise(VectorOperators.LSHL, 22));
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 27).and(MASK37);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 144 + i * stride);
			tmp = tmp.or(src.and(MASK12).lanewise(VectorOperators.LSHL, 37));
			tmp.intoArray(output, 448 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12).and(MASK49);
			tmp.intoArray(output, 576 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 61).and(MASK3);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 160 + i * stride);
			tmp = tmp.or(src.and(MASK46).lanewise(VectorOperators.LSHL, 3));
			tmp.intoArray(output, 704 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 46).and(MASK18);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 176 + i * stride);
			tmp = tmp.or(src.and(MASK31).lanewise(VectorOperators.LSHL, 18));
			tmp.intoArray(output, 832 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 31).and(MASK33);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 192 + i * stride);
			tmp = tmp.or(src.and(MASK16).lanewise(VectorOperators.LSHL, 33));
			tmp.intoArray(output, 960 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK48);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 208 + i * stride);
			tmp = tmp.or(src.and(MASK1).lanewise(VectorOperators.LSHL, 48));
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 1).and(MASK49);
			tmp.intoArray(output, 160 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 50).and(MASK14);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 224 + i * stride);
			tmp = tmp.or(src.and(MASK35).lanewise(VectorOperators.LSHL, 14));
			tmp.intoArray(output, 288 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 35).and(MASK29);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 240 + i * stride);
			tmp = tmp.or(src.and(MASK20).lanewise(VectorOperators.LSHL, 29));
			tmp.intoArray(output, 416 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20).and(MASK44);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 256 + i * stride);
			tmp = tmp.or(src.and(MASK5).lanewise(VectorOperators.LSHL, 44));
			tmp.intoArray(output, 544 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 5).and(MASK49);
			tmp.intoArray(output, 672 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 54).and(MASK10);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 272 + i * stride);
			tmp = tmp.or(src.and(MASK39).lanewise(VectorOperators.LSHL, 10));
			tmp.intoArray(output, 800 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 39).and(MASK25);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 288 + i * stride);
			tmp = tmp.or(src.and(MASK24).lanewise(VectorOperators.LSHL, 25));
			tmp.intoArray(output, 928 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK40);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 304 + i * stride);
			tmp = tmp.or(src.and(MASK9).lanewise(VectorOperators.LSHL, 40));
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 9).and(MASK49);
			tmp.intoArray(output, 224 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 58).and(MASK6);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 320 + i * stride);
			tmp = tmp.or(src.and(MASK43).lanewise(VectorOperators.LSHL, 6));
			tmp.intoArray(output, 352 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 43).and(MASK21);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 336 + i * stride);
			tmp = tmp.or(src.and(MASK28).lanewise(VectorOperators.LSHL, 21));
			tmp.intoArray(output, 480 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28).and(MASK36);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 352 + i * stride);
			tmp = tmp.or(src.and(MASK13).lanewise(VectorOperators.LSHL, 36));
			tmp.intoArray(output, 608 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 13).and(MASK49);
			tmp.intoArray(output, 736 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 62).and(MASK2);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 368 + i * stride);
			tmp = tmp.or(src.and(MASK47).lanewise(VectorOperators.LSHL, 2));
			tmp.intoArray(output, 864 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 47).and(MASK17);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 384 + i * stride);
			tmp = tmp.or(src.and(MASK32).lanewise(VectorOperators.LSHL, 17));
			tmp.intoArray(output, 992 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 400 + i * stride);
			tmp = tmp.or(src.and(MASK17).lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 16 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 17).and(MASK47);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 416 + i * stride);
			tmp = tmp.or(src.and(MASK2).lanewise(VectorOperators.LSHL, 47));
			tmp.intoArray(output, 144 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2).and(MASK49);
			tmp.intoArray(output, 272 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 51).and(MASK13);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 432 + i * stride);
			tmp = tmp.or(src.and(MASK36).lanewise(VectorOperators.LSHL, 13));
			tmp.intoArray(output, 400 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 36).and(MASK28);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 448 + i * stride);
			tmp = tmp.or(src.and(MASK21).lanewise(VectorOperators.LSHL, 28));
			tmp.intoArray(output, 528 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 21).and(MASK43);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 464 + i * stride);
			tmp = tmp.or(src.and(MASK6).lanewise(VectorOperators.LSHL, 43));
			tmp.intoArray(output, 656 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6).and(MASK49);
			tmp.intoArray(output, 784 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 55).and(MASK9);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 480 + i * stride);
			tmp = tmp.or(src.and(MASK40).lanewise(VectorOperators.LSHL, 9));
			tmp.intoArray(output, 912 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40).and(MASK24);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 496 + i * stride);
			tmp = tmp.or(src.and(MASK25).lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 80 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 25).and(MASK39);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 512 + i * stride);
			tmp = tmp.or(src.and(MASK10).lanewise(VectorOperators.LSHL, 39));
			tmp.intoArray(output, 208 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10).and(MASK49);
			tmp.intoArray(output, 336 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 59).and(MASK5);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 528 + i * stride);
			tmp = tmp.or(src.and(MASK44).lanewise(VectorOperators.LSHL, 5));
			tmp.intoArray(output, 464 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 44).and(MASK20);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 544 + i * stride);
			tmp = tmp.or(src.and(MASK29).lanewise(VectorOperators.LSHL, 20));
			tmp.intoArray(output, 592 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 29).and(MASK35);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 560 + i * stride);
			tmp = tmp.or(src.and(MASK14).lanewise(VectorOperators.LSHL, 35));
			tmp.intoArray(output, 720 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14).and(MASK49);
			tmp.intoArray(output, 848 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 63).and(MASK1);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 576 + i * stride);
			tmp = tmp.or(src.and(MASK48).lanewise(VectorOperators.LSHL, 1));
			tmp.intoArray(output, 976 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48).and(MASK16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 592 + i * stride);
			tmp = tmp.or(src.and(MASK33).lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 48 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 33).and(MASK31);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 608 + i * stride);
			tmp = tmp.or(src.and(MASK18).lanewise(VectorOperators.LSHL, 31));
			tmp.intoArray(output, 176 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 18).and(MASK46);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 624 + i * stride);
			tmp = tmp.or(src.and(MASK3).lanewise(VectorOperators.LSHL, 46));
			tmp.intoArray(output, 304 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 3).and(MASK49);
			tmp.intoArray(output, 432 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 52).and(MASK12);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 640 + i * stride);
			tmp = tmp.or(src.and(MASK37).lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 560 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 37).and(MASK27);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 656 + i * stride);
			tmp = tmp.or(src.and(MASK22).lanewise(VectorOperators.LSHL, 27));
			tmp.intoArray(output, 688 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 22).and(MASK42);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 672 + i * stride);
			tmp = tmp.or(src.and(MASK7).lanewise(VectorOperators.LSHL, 42));
			tmp.intoArray(output, 816 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 7).and(MASK49);
			tmp.intoArray(output, 944 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 56).and(MASK8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 688 + i * stride);
			tmp = tmp.or(src.and(MASK41).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 112 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 41).and(MASK23);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 704 + i * stride);
			tmp = tmp.or(src.and(MASK26).lanewise(VectorOperators.LSHL, 23));
			tmp.intoArray(output, 240 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 26).and(MASK38);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 720 + i * stride);
			tmp = tmp.or(src.and(MASK11).lanewise(VectorOperators.LSHL, 38));
			tmp.intoArray(output, 368 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 11).and(MASK49);
			tmp.intoArray(output, 496 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 60).and(MASK4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 736 + i * stride);
			tmp = tmp.or(src.and(MASK45).lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 624 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 45).and(MASK19);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 752 + i * stride);
			tmp = tmp.or(src.and(MASK30).lanewise(VectorOperators.LSHL, 19));
			tmp.intoArray(output, 752 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 30).and(MASK34);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 768 + i * stride);
			tmp = tmp.or(src.and(MASK15).lanewise(VectorOperators.LSHL, 34));
			tmp.intoArray(output, 880 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 15).and(MASK49);
			tmp.intoArray(output, 1008 + i * stride);
		}
	}

	public static void unpack50(long[] input, long[] output) {
		int stride = LongVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 64;
		for (int i = 0; i < 16 / stride; i++) {
			LongVector src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, i * stride);
			LongVector tmp;
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK50);
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 50).and(MASK14);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 16 + i * stride);
			tmp = tmp.or(src.and(MASK36).lanewise(VectorOperators.LSHL, 14));
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 36).and(MASK28);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 32 + i * stride);
			tmp = tmp.or(src.and(MASK22).lanewise(VectorOperators.LSHL, 28));
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 22).and(MASK42);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 48 + i * stride);
			tmp = tmp.or(src.and(MASK8).lanewise(VectorOperators.LSHL, 42));
			tmp.intoArray(output, 384 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK50);
			tmp.intoArray(output, 512 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 58).and(MASK6);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 64 + i * stride);
			tmp = tmp.or(src.and(MASK44).lanewise(VectorOperators.LSHL, 6));
			tmp.intoArray(output, 640 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 44).and(MASK20);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 80 + i * stride);
			tmp = tmp.or(src.and(MASK30).lanewise(VectorOperators.LSHL, 20));
			tmp.intoArray(output, 768 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 30).and(MASK34);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 96 + i * stride);
			tmp = tmp.or(src.and(MASK16).lanewise(VectorOperators.LSHL, 34));
			tmp.intoArray(output, 896 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK48);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 112 + i * stride);
			tmp = tmp.or(src.and(MASK2).lanewise(VectorOperators.LSHL, 48));
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2).and(MASK50);
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 52).and(MASK12);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 128 + i * stride);
			tmp = tmp.or(src.and(MASK38).lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 38).and(MASK26);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 144 + i * stride);
			tmp = tmp.or(src.and(MASK24).lanewise(VectorOperators.LSHL, 26));
			tmp.intoArray(output, 448 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK40);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 160 + i * stride);
			tmp = tmp.or(src.and(MASK10).lanewise(VectorOperators.LSHL, 40));
			tmp.intoArray(output, 576 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10).and(MASK50);
			tmp.intoArray(output, 704 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 60).and(MASK4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 176 + i * stride);
			tmp = tmp.or(src.and(MASK46).lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 832 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 46).and(MASK18);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 192 + i * stride);
			tmp = tmp.or(src.and(MASK32).lanewise(VectorOperators.LSHL, 18));
			tmp.intoArray(output, 960 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 208 + i * stride);
			tmp = tmp.or(src.and(MASK18).lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 18).and(MASK46);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 224 + i * stride);
			tmp = tmp.or(src.and(MASK4).lanewise(VectorOperators.LSHL, 46));
			tmp.intoArray(output, 160 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4).and(MASK50);
			tmp.intoArray(output, 288 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 54).and(MASK10);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 240 + i * stride);
			tmp = tmp.or(src.and(MASK40).lanewise(VectorOperators.LSHL, 10));
			tmp.intoArray(output, 416 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40).and(MASK24);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 256 + i * stride);
			tmp = tmp.or(src.and(MASK26).lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 544 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 26).and(MASK38);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 272 + i * stride);
			tmp = tmp.or(src.and(MASK12).lanewise(VectorOperators.LSHL, 38));
			tmp.intoArray(output, 672 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12).and(MASK50);
			tmp.intoArray(output, 800 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 62).and(MASK2);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 288 + i * stride);
			tmp = tmp.or(src.and(MASK48).lanewise(VectorOperators.LSHL, 2));
			tmp.intoArray(output, 928 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48).and(MASK16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 304 + i * stride);
			tmp = tmp.or(src.and(MASK34).lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 34).and(MASK30);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 320 + i * stride);
			tmp = tmp.or(src.and(MASK20).lanewise(VectorOperators.LSHL, 30));
			tmp.intoArray(output, 224 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20).and(MASK44);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 336 + i * stride);
			tmp = tmp.or(src.and(MASK6).lanewise(VectorOperators.LSHL, 44));
			tmp.intoArray(output, 352 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6).and(MASK50);
			tmp.intoArray(output, 480 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 56).and(MASK8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 352 + i * stride);
			tmp = tmp.or(src.and(MASK42).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 608 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 42).and(MASK22);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 368 + i * stride);
			tmp = tmp.or(src.and(MASK28).lanewise(VectorOperators.LSHL, 22));
			tmp.intoArray(output, 736 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28).and(MASK36);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 384 + i * stride);
			tmp = tmp.or(src.and(MASK14).lanewise(VectorOperators.LSHL, 36));
			tmp.intoArray(output, 864 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14).and(MASK50);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 400 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 50));
			tmp.intoArray(output, 992 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK50);
			tmp.intoArray(output, 16 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 50).and(MASK14);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 416 + i * stride);
			tmp = tmp.or(src.and(MASK36).lanewise(VectorOperators.LSHL, 14));
			tmp.intoArray(output, 144 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 36).and(MASK28);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 432 + i * stride);
			tmp = tmp.or(src.and(MASK22).lanewise(VectorOperators.LSHL, 28));
			tmp.intoArray(output, 272 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 22).and(MASK42);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 448 + i * stride);
			tmp = tmp.or(src.and(MASK8).lanewise(VectorOperators.LSHL, 42));
			tmp.intoArray(output, 400 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK50);
			tmp.intoArray(output, 528 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 58).and(MASK6);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 464 + i * stride);
			tmp = tmp.or(src.and(MASK44).lanewise(VectorOperators.LSHL, 6));
			tmp.intoArray(output, 656 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 44).and(MASK20);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 480 + i * stride);
			tmp = tmp.or(src.and(MASK30).lanewise(VectorOperators.LSHL, 20));
			tmp.intoArray(output, 784 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 30).and(MASK34);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 496 + i * stride);
			tmp = tmp.or(src.and(MASK16).lanewise(VectorOperators.LSHL, 34));
			tmp.intoArray(output, 912 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK48);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 512 + i * stride);
			tmp = tmp.or(src.and(MASK2).lanewise(VectorOperators.LSHL, 48));
			tmp.intoArray(output, 80 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2).and(MASK50);
			tmp.intoArray(output, 208 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 52).and(MASK12);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 528 + i * stride);
			tmp = tmp.or(src.and(MASK38).lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 336 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 38).and(MASK26);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 544 + i * stride);
			tmp = tmp.or(src.and(MASK24).lanewise(VectorOperators.LSHL, 26));
			tmp.intoArray(output, 464 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK40);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 560 + i * stride);
			tmp = tmp.or(src.and(MASK10).lanewise(VectorOperators.LSHL, 40));
			tmp.intoArray(output, 592 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10).and(MASK50);
			tmp.intoArray(output, 720 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 60).and(MASK4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 576 + i * stride);
			tmp = tmp.or(src.and(MASK46).lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 848 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 46).and(MASK18);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 592 + i * stride);
			tmp = tmp.or(src.and(MASK32).lanewise(VectorOperators.LSHL, 18));
			tmp.intoArray(output, 976 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 608 + i * stride);
			tmp = tmp.or(src.and(MASK18).lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 48 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 18).and(MASK46);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 624 + i * stride);
			tmp = tmp.or(src.and(MASK4).lanewise(VectorOperators.LSHL, 46));
			tmp.intoArray(output, 176 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4).and(MASK50);
			tmp.intoArray(output, 304 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 54).and(MASK10);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 640 + i * stride);
			tmp = tmp.or(src.and(MASK40).lanewise(VectorOperators.LSHL, 10));
			tmp.intoArray(output, 432 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40).and(MASK24);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 656 + i * stride);
			tmp = tmp.or(src.and(MASK26).lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 560 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 26).and(MASK38);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 672 + i * stride);
			tmp = tmp.or(src.and(MASK12).lanewise(VectorOperators.LSHL, 38));
			tmp.intoArray(output, 688 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12).and(MASK50);
			tmp.intoArray(output, 816 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 62).and(MASK2);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 688 + i * stride);
			tmp = tmp.or(src.and(MASK48).lanewise(VectorOperators.LSHL, 2));
			tmp.intoArray(output, 944 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48).and(MASK16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 704 + i * stride);
			tmp = tmp.or(src.and(MASK34).lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 112 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 34).and(MASK30);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 720 + i * stride);
			tmp = tmp.or(src.and(MASK20).lanewise(VectorOperators.LSHL, 30));
			tmp.intoArray(output, 240 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20).and(MASK44);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 736 + i * stride);
			tmp = tmp.or(src.and(MASK6).lanewise(VectorOperators.LSHL, 44));
			tmp.intoArray(output, 368 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6).and(MASK50);
			tmp.intoArray(output, 496 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 56).and(MASK8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 752 + i * stride);
			tmp = tmp.or(src.and(MASK42).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 624 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 42).and(MASK22);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 768 + i * stride);
			tmp = tmp.or(src.and(MASK28).lanewise(VectorOperators.LSHL, 22));
			tmp.intoArray(output, 752 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28).and(MASK36);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 784 + i * stride);
			tmp = tmp.or(src.and(MASK14).lanewise(VectorOperators.LSHL, 36));
			tmp.intoArray(output, 880 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14).and(MASK50);
			tmp.intoArray(output, 1008 + i * stride);
		}
	}

	public static void unpack51(long[] input, long[] output) {
		int stride = LongVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 64;
		for (int i = 0; i < 16 / stride; i++) {
			LongVector src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, i * stride);
			LongVector tmp;
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK51);
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 51).and(MASK13);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 16 + i * stride);
			tmp = tmp.or(src.and(MASK38).lanewise(VectorOperators.LSHL, 13));
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 38).and(MASK26);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 32 + i * stride);
			tmp = tmp.or(src.and(MASK25).lanewise(VectorOperators.LSHL, 26));
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 25).and(MASK39);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 48 + i * stride);
			tmp = tmp.or(src.and(MASK12).lanewise(VectorOperators.LSHL, 39));
			tmp.intoArray(output, 384 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12).and(MASK51);
			tmp.intoArray(output, 512 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 63).and(MASK1);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 64 + i * stride);
			tmp = tmp.or(src.and(MASK50).lanewise(VectorOperators.LSHL, 1));
			tmp.intoArray(output, 640 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 50).and(MASK14);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 80 + i * stride);
			tmp = tmp.or(src.and(MASK37).lanewise(VectorOperators.LSHL, 14));
			tmp.intoArray(output, 768 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 37).and(MASK27);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 96 + i * stride);
			tmp = tmp.or(src.and(MASK24).lanewise(VectorOperators.LSHL, 27));
			tmp.intoArray(output, 896 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK40);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 112 + i * stride);
			tmp = tmp.or(src.and(MASK11).lanewise(VectorOperators.LSHL, 40));
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 11).and(MASK51);
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 62).and(MASK2);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 128 + i * stride);
			tmp = tmp.or(src.and(MASK49).lanewise(VectorOperators.LSHL, 2));
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 49).and(MASK15);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 144 + i * stride);
			tmp = tmp.or(src.and(MASK36).lanewise(VectorOperators.LSHL, 15));
			tmp.intoArray(output, 448 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 36).and(MASK28);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 160 + i * stride);
			tmp = tmp.or(src.and(MASK23).lanewise(VectorOperators.LSHL, 28));
			tmp.intoArray(output, 576 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 23).and(MASK41);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 176 + i * stride);
			tmp = tmp.or(src.and(MASK10).lanewise(VectorOperators.LSHL, 41));
			tmp.intoArray(output, 704 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10).and(MASK51);
			tmp.intoArray(output, 832 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 61).and(MASK3);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 192 + i * stride);
			tmp = tmp.or(src.and(MASK48).lanewise(VectorOperators.LSHL, 3));
			tmp.intoArray(output, 960 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48).and(MASK16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 208 + i * stride);
			tmp = tmp.or(src.and(MASK35).lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 35).and(MASK29);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 224 + i * stride);
			tmp = tmp.or(src.and(MASK22).lanewise(VectorOperators.LSHL, 29));
			tmp.intoArray(output, 160 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 22).and(MASK42);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 240 + i * stride);
			tmp = tmp.or(src.and(MASK9).lanewise(VectorOperators.LSHL, 42));
			tmp.intoArray(output, 288 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 9).and(MASK51);
			tmp.intoArray(output, 416 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 60).and(MASK4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 256 + i * stride);
			tmp = tmp.or(src.and(MASK47).lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 544 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 47).and(MASK17);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 272 + i * stride);
			tmp = tmp.or(src.and(MASK34).lanewise(VectorOperators.LSHL, 17));
			tmp.intoArray(output, 672 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 34).and(MASK30);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 288 + i * stride);
			tmp = tmp.or(src.and(MASK21).lanewise(VectorOperators.LSHL, 30));
			tmp.intoArray(output, 800 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 21).and(MASK43);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 304 + i * stride);
			tmp = tmp.or(src.and(MASK8).lanewise(VectorOperators.LSHL, 43));
			tmp.intoArray(output, 928 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK51);
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 59).and(MASK5);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 320 + i * stride);
			tmp = tmp.or(src.and(MASK46).lanewise(VectorOperators.LSHL, 5));
			tmp.intoArray(output, 224 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 46).and(MASK18);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 336 + i * stride);
			tmp = tmp.or(src.and(MASK33).lanewise(VectorOperators.LSHL, 18));
			tmp.intoArray(output, 352 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 33).and(MASK31);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 352 + i * stride);
			tmp = tmp.or(src.and(MASK20).lanewise(VectorOperators.LSHL, 31));
			tmp.intoArray(output, 480 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20).and(MASK44);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 368 + i * stride);
			tmp = tmp.or(src.and(MASK7).lanewise(VectorOperators.LSHL, 44));
			tmp.intoArray(output, 608 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 7).and(MASK51);
			tmp.intoArray(output, 736 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 58).and(MASK6);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 384 + i * stride);
			tmp = tmp.or(src.and(MASK45).lanewise(VectorOperators.LSHL, 6));
			tmp.intoArray(output, 864 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 45).and(MASK19);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 400 + i * stride);
			tmp = tmp.or(src.and(MASK32).lanewise(VectorOperators.LSHL, 19));
			tmp.intoArray(output, 992 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 416 + i * stride);
			tmp = tmp.or(src.and(MASK19).lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 16 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 19).and(MASK45);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 432 + i * stride);
			tmp = tmp.or(src.and(MASK6).lanewise(VectorOperators.LSHL, 45));
			tmp.intoArray(output, 144 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6).and(MASK51);
			tmp.intoArray(output, 272 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 57).and(MASK7);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 448 + i * stride);
			tmp = tmp.or(src.and(MASK44).lanewise(VectorOperators.LSHL, 7));
			tmp.intoArray(output, 400 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 44).and(MASK20);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 464 + i * stride);
			tmp = tmp.or(src.and(MASK31).lanewise(VectorOperators.LSHL, 20));
			tmp.intoArray(output, 528 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 31).and(MASK33);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 480 + i * stride);
			tmp = tmp.or(src.and(MASK18).lanewise(VectorOperators.LSHL, 33));
			tmp.intoArray(output, 656 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 18).and(MASK46);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 496 + i * stride);
			tmp = tmp.or(src.and(MASK5).lanewise(VectorOperators.LSHL, 46));
			tmp.intoArray(output, 784 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 5).and(MASK51);
			tmp.intoArray(output, 912 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 56).and(MASK8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 512 + i * stride);
			tmp = tmp.or(src.and(MASK43).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 80 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 43).and(MASK21);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 528 + i * stride);
			tmp = tmp.or(src.and(MASK30).lanewise(VectorOperators.LSHL, 21));
			tmp.intoArray(output, 208 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 30).and(MASK34);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 544 + i * stride);
			tmp = tmp.or(src.and(MASK17).lanewise(VectorOperators.LSHL, 34));
			tmp.intoArray(output, 336 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 17).and(MASK47);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 560 + i * stride);
			tmp = tmp.or(src.and(MASK4).lanewise(VectorOperators.LSHL, 47));
			tmp.intoArray(output, 464 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4).and(MASK51);
			tmp.intoArray(output, 592 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 55).and(MASK9);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 576 + i * stride);
			tmp = tmp.or(src.and(MASK42).lanewise(VectorOperators.LSHL, 9));
			tmp.intoArray(output, 720 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 42).and(MASK22);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 592 + i * stride);
			tmp = tmp.or(src.and(MASK29).lanewise(VectorOperators.LSHL, 22));
			tmp.intoArray(output, 848 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 29).and(MASK35);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 608 + i * stride);
			tmp = tmp.or(src.and(MASK16).lanewise(VectorOperators.LSHL, 35));
			tmp.intoArray(output, 976 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK48);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 624 + i * stride);
			tmp = tmp.or(src.and(MASK3).lanewise(VectorOperators.LSHL, 48));
			tmp.intoArray(output, 48 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 3).and(MASK51);
			tmp.intoArray(output, 176 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 54).and(MASK10);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 640 + i * stride);
			tmp = tmp.or(src.and(MASK41).lanewise(VectorOperators.LSHL, 10));
			tmp.intoArray(output, 304 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 41).and(MASK23);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 656 + i * stride);
			tmp = tmp.or(src.and(MASK28).lanewise(VectorOperators.LSHL, 23));
			tmp.intoArray(output, 432 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28).and(MASK36);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 672 + i * stride);
			tmp = tmp.or(src.and(MASK15).lanewise(VectorOperators.LSHL, 36));
			tmp.intoArray(output, 560 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 15).and(MASK49);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 688 + i * stride);
			tmp = tmp.or(src.and(MASK2).lanewise(VectorOperators.LSHL, 49));
			tmp.intoArray(output, 688 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2).and(MASK51);
			tmp.intoArray(output, 816 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 53).and(MASK11);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 704 + i * stride);
			tmp = tmp.or(src.and(MASK40).lanewise(VectorOperators.LSHL, 11));
			tmp.intoArray(output, 944 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40).and(MASK24);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 720 + i * stride);
			tmp = tmp.or(src.and(MASK27).lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 112 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 27).and(MASK37);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 736 + i * stride);
			tmp = tmp.or(src.and(MASK14).lanewise(VectorOperators.LSHL, 37));
			tmp.intoArray(output, 240 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14).and(MASK50);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 752 + i * stride);
			tmp = tmp.or(src.and(MASK1).lanewise(VectorOperators.LSHL, 50));
			tmp.intoArray(output, 368 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 1).and(MASK51);
			tmp.intoArray(output, 496 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 52).and(MASK12);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 768 + i * stride);
			tmp = tmp.or(src.and(MASK39).lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 624 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 39).and(MASK25);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 784 + i * stride);
			tmp = tmp.or(src.and(MASK26).lanewise(VectorOperators.LSHL, 25));
			tmp.intoArray(output, 752 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 26).and(MASK38);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 800 + i * stride);
			tmp = tmp.or(src.and(MASK13).lanewise(VectorOperators.LSHL, 38));
			tmp.intoArray(output, 880 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 13).and(MASK51);
			tmp.intoArray(output, 1008 + i * stride);
		}
	}

	public static void unpack52(long[] input, long[] output) {
		int stride = LongVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 64;
		for (int i = 0; i < 16 / stride; i++) {
			LongVector src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, i * stride);
			LongVector tmp;
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK52);
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 52).and(MASK12);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 16 + i * stride);
			tmp = tmp.or(src.and(MASK40).lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40).and(MASK24);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 32 + i * stride);
			tmp = tmp.or(src.and(MASK28).lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28).and(MASK36);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 48 + i * stride);
			tmp = tmp.or(src.and(MASK16).lanewise(VectorOperators.LSHL, 36));
			tmp.intoArray(output, 384 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK48);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 64 + i * stride);
			tmp = tmp.or(src.and(MASK4).lanewise(VectorOperators.LSHL, 48));
			tmp.intoArray(output, 512 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4).and(MASK52);
			tmp.intoArray(output, 640 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 56).and(MASK8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 80 + i * stride);
			tmp = tmp.or(src.and(MASK44).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 768 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 44).and(MASK20);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 96 + i * stride);
			tmp = tmp.or(src.and(MASK32).lanewise(VectorOperators.LSHL, 20));
			tmp.intoArray(output, 896 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 112 + i * stride);
			tmp = tmp.or(src.and(MASK20).lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20).and(MASK44);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 128 + i * stride);
			tmp = tmp.or(src.and(MASK8).lanewise(VectorOperators.LSHL, 44));
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK52);
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 60).and(MASK4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 144 + i * stride);
			tmp = tmp.or(src.and(MASK48).lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 448 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48).and(MASK16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 160 + i * stride);
			tmp = tmp.or(src.and(MASK36).lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 576 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 36).and(MASK28);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 176 + i * stride);
			tmp = tmp.or(src.and(MASK24).lanewise(VectorOperators.LSHL, 28));
			tmp.intoArray(output, 704 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK40);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 192 + i * stride);
			tmp = tmp.or(src.and(MASK12).lanewise(VectorOperators.LSHL, 40));
			tmp.intoArray(output, 832 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12).and(MASK52);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 208 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 52));
			tmp.intoArray(output, 960 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK52);
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 52).and(MASK12);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 224 + i * stride);
			tmp = tmp.or(src.and(MASK40).lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 160 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40).and(MASK24);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 240 + i * stride);
			tmp = tmp.or(src.and(MASK28).lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 288 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28).and(MASK36);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 256 + i * stride);
			tmp = tmp.or(src.and(MASK16).lanewise(VectorOperators.LSHL, 36));
			tmp.intoArray(output, 416 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK48);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 272 + i * stride);
			tmp = tmp.or(src.and(MASK4).lanewise(VectorOperators.LSHL, 48));
			tmp.intoArray(output, 544 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4).and(MASK52);
			tmp.intoArray(output, 672 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 56).and(MASK8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 288 + i * stride);
			tmp = tmp.or(src.and(MASK44).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 800 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 44).and(MASK20);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 304 + i * stride);
			tmp = tmp.or(src.and(MASK32).lanewise(VectorOperators.LSHL, 20));
			tmp.intoArray(output, 928 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 320 + i * stride);
			tmp = tmp.or(src.and(MASK20).lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20).and(MASK44);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 336 + i * stride);
			tmp = tmp.or(src.and(MASK8).lanewise(VectorOperators.LSHL, 44));
			tmp.intoArray(output, 224 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK52);
			tmp.intoArray(output, 352 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 60).and(MASK4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 352 + i * stride);
			tmp = tmp.or(src.and(MASK48).lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 480 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48).and(MASK16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 368 + i * stride);
			tmp = tmp.or(src.and(MASK36).lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 608 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 36).and(MASK28);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 384 + i * stride);
			tmp = tmp.or(src.and(MASK24).lanewise(VectorOperators.LSHL, 28));
			tmp.intoArray(output, 736 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK40);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 400 + i * stride);
			tmp = tmp.or(src.and(MASK12).lanewise(VectorOperators.LSHL, 40));
			tmp.intoArray(output, 864 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12).and(MASK52);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 416 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 52));
			tmp.intoArray(output, 992 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK52);
			tmp.intoArray(output, 16 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 52).and(MASK12);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 432 + i * stride);
			tmp = tmp.or(src.and(MASK40).lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 144 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40).and(MASK24);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 448 + i * stride);
			tmp = tmp.or(src.and(MASK28).lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 272 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28).and(MASK36);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 464 + i * stride);
			tmp = tmp.or(src.and(MASK16).lanewise(VectorOperators.LSHL, 36));
			tmp.intoArray(output, 400 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK48);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 480 + i * stride);
			tmp = tmp.or(src.and(MASK4).lanewise(VectorOperators.LSHL, 48));
			tmp.intoArray(output, 528 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4).and(MASK52);
			tmp.intoArray(output, 656 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 56).and(MASK8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 496 + i * stride);
			tmp = tmp.or(src.and(MASK44).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 784 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 44).and(MASK20);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 512 + i * stride);
			tmp = tmp.or(src.and(MASK32).lanewise(VectorOperators.LSHL, 20));
			tmp.intoArray(output, 912 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 528 + i * stride);
			tmp = tmp.or(src.and(MASK20).lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 80 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20).and(MASK44);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 544 + i * stride);
			tmp = tmp.or(src.and(MASK8).lanewise(VectorOperators.LSHL, 44));
			tmp.intoArray(output, 208 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK52);
			tmp.intoArray(output, 336 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 60).and(MASK4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 560 + i * stride);
			tmp = tmp.or(src.and(MASK48).lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 464 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48).and(MASK16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 576 + i * stride);
			tmp = tmp.or(src.and(MASK36).lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 592 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 36).and(MASK28);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 592 + i * stride);
			tmp = tmp.or(src.and(MASK24).lanewise(VectorOperators.LSHL, 28));
			tmp.intoArray(output, 720 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK40);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 608 + i * stride);
			tmp = tmp.or(src.and(MASK12).lanewise(VectorOperators.LSHL, 40));
			tmp.intoArray(output, 848 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12).and(MASK52);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 624 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 52));
			tmp.intoArray(output, 976 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK52);
			tmp.intoArray(output, 48 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 52).and(MASK12);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 640 + i * stride);
			tmp = tmp.or(src.and(MASK40).lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 176 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40).and(MASK24);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 656 + i * stride);
			tmp = tmp.or(src.and(MASK28).lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 304 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28).and(MASK36);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 672 + i * stride);
			tmp = tmp.or(src.and(MASK16).lanewise(VectorOperators.LSHL, 36));
			tmp.intoArray(output, 432 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK48);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 688 + i * stride);
			tmp = tmp.or(src.and(MASK4).lanewise(VectorOperators.LSHL, 48));
			tmp.intoArray(output, 560 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4).and(MASK52);
			tmp.intoArray(output, 688 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 56).and(MASK8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 704 + i * stride);
			tmp = tmp.or(src.and(MASK44).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 816 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 44).and(MASK20);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 720 + i * stride);
			tmp = tmp.or(src.and(MASK32).lanewise(VectorOperators.LSHL, 20));
			tmp.intoArray(output, 944 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 736 + i * stride);
			tmp = tmp.or(src.and(MASK20).lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 112 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20).and(MASK44);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 752 + i * stride);
			tmp = tmp.or(src.and(MASK8).lanewise(VectorOperators.LSHL, 44));
			tmp.intoArray(output, 240 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK52);
			tmp.intoArray(output, 368 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 60).and(MASK4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 768 + i * stride);
			tmp = tmp.or(src.and(MASK48).lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 496 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48).and(MASK16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 784 + i * stride);
			tmp = tmp.or(src.and(MASK36).lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 624 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 36).and(MASK28);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 800 + i * stride);
			tmp = tmp.or(src.and(MASK24).lanewise(VectorOperators.LSHL, 28));
			tmp.intoArray(output, 752 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK40);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 816 + i * stride);
			tmp = tmp.or(src.and(MASK12).lanewise(VectorOperators.LSHL, 40));
			tmp.intoArray(output, 880 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12).and(MASK52);
			tmp.intoArray(output, 1008 + i * stride);
		}
	}

	public static void unpack53(long[] input, long[] output) {
		int stride = LongVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 64;
		for (int i = 0; i < 16 / stride; i++) {
			LongVector src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, i * stride);
			LongVector tmp;
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK53);
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 53).and(MASK11);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 16 + i * stride);
			tmp = tmp.or(src.and(MASK42).lanewise(VectorOperators.LSHL, 11));
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 42).and(MASK22);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 32 + i * stride);
			tmp = tmp.or(src.and(MASK31).lanewise(VectorOperators.LSHL, 22));
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 31).and(MASK33);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 48 + i * stride);
			tmp = tmp.or(src.and(MASK20).lanewise(VectorOperators.LSHL, 33));
			tmp.intoArray(output, 384 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20).and(MASK44);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 64 + i * stride);
			tmp = tmp.or(src.and(MASK9).lanewise(VectorOperators.LSHL, 44));
			tmp.intoArray(output, 512 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 9).and(MASK53);
			tmp.intoArray(output, 640 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 62).and(MASK2);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 80 + i * stride);
			tmp = tmp.or(src.and(MASK51).lanewise(VectorOperators.LSHL, 2));
			tmp.intoArray(output, 768 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 51).and(MASK13);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 96 + i * stride);
			tmp = tmp.or(src.and(MASK40).lanewise(VectorOperators.LSHL, 13));
			tmp.intoArray(output, 896 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40).and(MASK24);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 112 + i * stride);
			tmp = tmp.or(src.and(MASK29).lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 29).and(MASK35);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 128 + i * stride);
			tmp = tmp.or(src.and(MASK18).lanewise(VectorOperators.LSHL, 35));
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 18).and(MASK46);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 144 + i * stride);
			tmp = tmp.or(src.and(MASK7).lanewise(VectorOperators.LSHL, 46));
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 7).and(MASK53);
			tmp.intoArray(output, 448 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 60).and(MASK4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 160 + i * stride);
			tmp = tmp.or(src.and(MASK49).lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 576 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 49).and(MASK15);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 176 + i * stride);
			tmp = tmp.or(src.and(MASK38).lanewise(VectorOperators.LSHL, 15));
			tmp.intoArray(output, 704 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 38).and(MASK26);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 192 + i * stride);
			tmp = tmp.or(src.and(MASK27).lanewise(VectorOperators.LSHL, 26));
			tmp.intoArray(output, 832 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 27).and(MASK37);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 208 + i * stride);
			tmp = tmp.or(src.and(MASK16).lanewise(VectorOperators.LSHL, 37));
			tmp.intoArray(output, 960 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK48);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 224 + i * stride);
			tmp = tmp.or(src.and(MASK5).lanewise(VectorOperators.LSHL, 48));
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 5).and(MASK53);
			tmp.intoArray(output, 160 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 58).and(MASK6);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 240 + i * stride);
			tmp = tmp.or(src.and(MASK47).lanewise(VectorOperators.LSHL, 6));
			tmp.intoArray(output, 288 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 47).and(MASK17);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 256 + i * stride);
			tmp = tmp.or(src.and(MASK36).lanewise(VectorOperators.LSHL, 17));
			tmp.intoArray(output, 416 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 36).and(MASK28);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 272 + i * stride);
			tmp = tmp.or(src.and(MASK25).lanewise(VectorOperators.LSHL, 28));
			tmp.intoArray(output, 544 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 25).and(MASK39);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 288 + i * stride);
			tmp = tmp.or(src.and(MASK14).lanewise(VectorOperators.LSHL, 39));
			tmp.intoArray(output, 672 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14).and(MASK50);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 304 + i * stride);
			tmp = tmp.or(src.and(MASK3).lanewise(VectorOperators.LSHL, 50));
			tmp.intoArray(output, 800 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 3).and(MASK53);
			tmp.intoArray(output, 928 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 56).and(MASK8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 320 + i * stride);
			tmp = tmp.or(src.and(MASK45).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 45).and(MASK19);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 336 + i * stride);
			tmp = tmp.or(src.and(MASK34).lanewise(VectorOperators.LSHL, 19));
			tmp.intoArray(output, 224 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 34).and(MASK30);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 352 + i * stride);
			tmp = tmp.or(src.and(MASK23).lanewise(VectorOperators.LSHL, 30));
			tmp.intoArray(output, 352 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 23).and(MASK41);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 368 + i * stride);
			tmp = tmp.or(src.and(MASK12).lanewise(VectorOperators.LSHL, 41));
			tmp.intoArray(output, 480 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12).and(MASK52);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 384 + i * stride);
			tmp = tmp.or(src.and(MASK1).lanewise(VectorOperators.LSHL, 52));
			tmp.intoArray(output, 608 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 1).and(MASK53);
			tmp.intoArray(output, 736 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 54).and(MASK10);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 400 + i * stride);
			tmp = tmp.or(src.and(MASK43).lanewise(VectorOperators.LSHL, 10));
			tmp.intoArray(output, 864 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 43).and(MASK21);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 416 + i * stride);
			tmp = tmp.or(src.and(MASK32).lanewise(VectorOperators.LSHL, 21));
			tmp.intoArray(output, 992 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 432 + i * stride);
			tmp = tmp.or(src.and(MASK21).lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 16 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 21).and(MASK43);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 448 + i * stride);
			tmp = tmp.or(src.and(MASK10).lanewise(VectorOperators.LSHL, 43));
			tmp.intoArray(output, 144 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10).and(MASK53);
			tmp.intoArray(output, 272 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 63).and(MASK1);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 464 + i * stride);
			tmp = tmp.or(src.and(MASK52).lanewise(VectorOperators.LSHL, 1));
			tmp.intoArray(output, 400 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 52).and(MASK12);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 480 + i * stride);
			tmp = tmp.or(src.and(MASK41).lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 528 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 41).and(MASK23);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 496 + i * stride);
			tmp = tmp.or(src.and(MASK30).lanewise(VectorOperators.LSHL, 23));
			tmp.intoArray(output, 656 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 30).and(MASK34);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 512 + i * stride);
			tmp = tmp.or(src.and(MASK19).lanewise(VectorOperators.LSHL, 34));
			tmp.intoArray(output, 784 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 19).and(MASK45);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 528 + i * stride);
			tmp = tmp.or(src.and(MASK8).lanewise(VectorOperators.LSHL, 45));
			tmp.intoArray(output, 912 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK53);
			tmp.intoArray(output, 80 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 61).and(MASK3);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 544 + i * stride);
			tmp = tmp.or(src.and(MASK50).lanewise(VectorOperators.LSHL, 3));
			tmp.intoArray(output, 208 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 50).and(MASK14);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 560 + i * stride);
			tmp = tmp.or(src.and(MASK39).lanewise(VectorOperators.LSHL, 14));
			tmp.intoArray(output, 336 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 39).and(MASK25);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 576 + i * stride);
			tmp = tmp.or(src.and(MASK28).lanewise(VectorOperators.LSHL, 25));
			tmp.intoArray(output, 464 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28).and(MASK36);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 592 + i * stride);
			tmp = tmp.or(src.and(MASK17).lanewise(VectorOperators.LSHL, 36));
			tmp.intoArray(output, 592 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 17).and(MASK47);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 608 + i * stride);
			tmp = tmp.or(src.and(MASK6).lanewise(VectorOperators.LSHL, 47));
			tmp.intoArray(output, 720 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6).and(MASK53);
			tmp.intoArray(output, 848 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 59).and(MASK5);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 624 + i * stride);
			tmp = tmp.or(src.and(MASK48).lanewise(VectorOperators.LSHL, 5));
			tmp.intoArray(output, 976 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48).and(MASK16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 640 + i * stride);
			tmp = tmp.or(src.and(MASK37).lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 48 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 37).and(MASK27);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 656 + i * stride);
			tmp = tmp.or(src.and(MASK26).lanewise(VectorOperators.LSHL, 27));
			tmp.intoArray(output, 176 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 26).and(MASK38);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 672 + i * stride);
			tmp = tmp.or(src.and(MASK15).lanewise(VectorOperators.LSHL, 38));
			tmp.intoArray(output, 304 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 15).and(MASK49);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 688 + i * stride);
			tmp = tmp.or(src.and(MASK4).lanewise(VectorOperators.LSHL, 49));
			tmp.intoArray(output, 432 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4).and(MASK53);
			tmp.intoArray(output, 560 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 57).and(MASK7);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 704 + i * stride);
			tmp = tmp.or(src.and(MASK46).lanewise(VectorOperators.LSHL, 7));
			tmp.intoArray(output, 688 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 46).and(MASK18);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 720 + i * stride);
			tmp = tmp.or(src.and(MASK35).lanewise(VectorOperators.LSHL, 18));
			tmp.intoArray(output, 816 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 35).and(MASK29);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 736 + i * stride);
			tmp = tmp.or(src.and(MASK24).lanewise(VectorOperators.LSHL, 29));
			tmp.intoArray(output, 944 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK40);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 752 + i * stride);
			tmp = tmp.or(src.and(MASK13).lanewise(VectorOperators.LSHL, 40));
			tmp.intoArray(output, 112 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 13).and(MASK51);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 768 + i * stride);
			tmp = tmp.or(src.and(MASK2).lanewise(VectorOperators.LSHL, 51));
			tmp.intoArray(output, 240 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2).and(MASK53);
			tmp.intoArray(output, 368 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 55).and(MASK9);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 784 + i * stride);
			tmp = tmp.or(src.and(MASK44).lanewise(VectorOperators.LSHL, 9));
			tmp.intoArray(output, 496 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 44).and(MASK20);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 800 + i * stride);
			tmp = tmp.or(src.and(MASK33).lanewise(VectorOperators.LSHL, 20));
			tmp.intoArray(output, 624 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 33).and(MASK31);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 816 + i * stride);
			tmp = tmp.or(src.and(MASK22).lanewise(VectorOperators.LSHL, 31));
			tmp.intoArray(output, 752 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 22).and(MASK42);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 832 + i * stride);
			tmp = tmp.or(src.and(MASK11).lanewise(VectorOperators.LSHL, 42));
			tmp.intoArray(output, 880 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 11).and(MASK53);
			tmp.intoArray(output, 1008 + i * stride);
		}
	}

	public static void unpack54(long[] input, long[] output) {
		int stride = LongVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 64;
		for (int i = 0; i < 16 / stride; i++) {
			LongVector src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, i * stride);
			LongVector tmp;
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK54);
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 54).and(MASK10);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 16 + i * stride);
			tmp = tmp.or(src.and(MASK44).lanewise(VectorOperators.LSHL, 10));
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 44).and(MASK20);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 32 + i * stride);
			tmp = tmp.or(src.and(MASK34).lanewise(VectorOperators.LSHL, 20));
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 34).and(MASK30);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 48 + i * stride);
			tmp = tmp.or(src.and(MASK24).lanewise(VectorOperators.LSHL, 30));
			tmp.intoArray(output, 384 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK40);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 64 + i * stride);
			tmp = tmp.or(src.and(MASK14).lanewise(VectorOperators.LSHL, 40));
			tmp.intoArray(output, 512 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14).and(MASK50);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 80 + i * stride);
			tmp = tmp.or(src.and(MASK4).lanewise(VectorOperators.LSHL, 50));
			tmp.intoArray(output, 640 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4).and(MASK54);
			tmp.intoArray(output, 768 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 58).and(MASK6);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 96 + i * stride);
			tmp = tmp.or(src.and(MASK48).lanewise(VectorOperators.LSHL, 6));
			tmp.intoArray(output, 896 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48).and(MASK16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 112 + i * stride);
			tmp = tmp.or(src.and(MASK38).lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 38).and(MASK26);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 128 + i * stride);
			tmp = tmp.or(src.and(MASK28).lanewise(VectorOperators.LSHL, 26));
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28).and(MASK36);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 144 + i * stride);
			tmp = tmp.or(src.and(MASK18).lanewise(VectorOperators.LSHL, 36));
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 18).and(MASK46);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 160 + i * stride);
			tmp = tmp.or(src.and(MASK8).lanewise(VectorOperators.LSHL, 46));
			tmp.intoArray(output, 448 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK54);
			tmp.intoArray(output, 576 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 62).and(MASK2);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 176 + i * stride);
			tmp = tmp.or(src.and(MASK52).lanewise(VectorOperators.LSHL, 2));
			tmp.intoArray(output, 704 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 52).and(MASK12);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 192 + i * stride);
			tmp = tmp.or(src.and(MASK42).lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 832 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 42).and(MASK22);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 208 + i * stride);
			tmp = tmp.or(src.and(MASK32).lanewise(VectorOperators.LSHL, 22));
			tmp.intoArray(output, 960 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 224 + i * stride);
			tmp = tmp.or(src.and(MASK22).lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 22).and(MASK42);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 240 + i * stride);
			tmp = tmp.or(src.and(MASK12).lanewise(VectorOperators.LSHL, 42));
			tmp.intoArray(output, 160 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12).and(MASK52);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 256 + i * stride);
			tmp = tmp.or(src.and(MASK2).lanewise(VectorOperators.LSHL, 52));
			tmp.intoArray(output, 288 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2).and(MASK54);
			tmp.intoArray(output, 416 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 56).and(MASK8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 272 + i * stride);
			tmp = tmp.or(src.and(MASK46).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 544 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 46).and(MASK18);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 288 + i * stride);
			tmp = tmp.or(src.and(MASK36).lanewise(VectorOperators.LSHL, 18));
			tmp.intoArray(output, 672 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 36).and(MASK28);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 304 + i * stride);
			tmp = tmp.or(src.and(MASK26).lanewise(VectorOperators.LSHL, 28));
			tmp.intoArray(output, 800 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 26).and(MASK38);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 320 + i * stride);
			tmp = tmp.or(src.and(MASK16).lanewise(VectorOperators.LSHL, 38));
			tmp.intoArray(output, 928 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK48);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 336 + i * stride);
			tmp = tmp.or(src.and(MASK6).lanewise(VectorOperators.LSHL, 48));
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6).and(MASK54);
			tmp.intoArray(output, 224 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 60).and(MASK4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 352 + i * stride);
			tmp = tmp.or(src.and(MASK50).lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 352 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 50).and(MASK14);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 368 + i * stride);
			tmp = tmp.or(src.and(MASK40).lanewise(VectorOperators.LSHL, 14));
			tmp.intoArray(output, 480 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40).and(MASK24);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 384 + i * stride);
			tmp = tmp.or(src.and(MASK30).lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 608 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 30).and(MASK34);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 400 + i * stride);
			tmp = tmp.or(src.and(MASK20).lanewise(VectorOperators.LSHL, 34));
			tmp.intoArray(output, 736 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20).and(MASK44);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 416 + i * stride);
			tmp = tmp.or(src.and(MASK10).lanewise(VectorOperators.LSHL, 44));
			tmp.intoArray(output, 864 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10).and(MASK54);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 432 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 54));
			tmp.intoArray(output, 992 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK54);
			tmp.intoArray(output, 16 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 54).and(MASK10);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 448 + i * stride);
			tmp = tmp.or(src.and(MASK44).lanewise(VectorOperators.LSHL, 10));
			tmp.intoArray(output, 144 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 44).and(MASK20);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 464 + i * stride);
			tmp = tmp.or(src.and(MASK34).lanewise(VectorOperators.LSHL, 20));
			tmp.intoArray(output, 272 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 34).and(MASK30);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 480 + i * stride);
			tmp = tmp.or(src.and(MASK24).lanewise(VectorOperators.LSHL, 30));
			tmp.intoArray(output, 400 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK40);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 496 + i * stride);
			tmp = tmp.or(src.and(MASK14).lanewise(VectorOperators.LSHL, 40));
			tmp.intoArray(output, 528 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14).and(MASK50);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 512 + i * stride);
			tmp = tmp.or(src.and(MASK4).lanewise(VectorOperators.LSHL, 50));
			tmp.intoArray(output, 656 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4).and(MASK54);
			tmp.intoArray(output, 784 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 58).and(MASK6);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 528 + i * stride);
			tmp = tmp.or(src.and(MASK48).lanewise(VectorOperators.LSHL, 6));
			tmp.intoArray(output, 912 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48).and(MASK16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 544 + i * stride);
			tmp = tmp.or(src.and(MASK38).lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 80 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 38).and(MASK26);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 560 + i * stride);
			tmp = tmp.or(src.and(MASK28).lanewise(VectorOperators.LSHL, 26));
			tmp.intoArray(output, 208 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28).and(MASK36);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 576 + i * stride);
			tmp = tmp.or(src.and(MASK18).lanewise(VectorOperators.LSHL, 36));
			tmp.intoArray(output, 336 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 18).and(MASK46);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 592 + i * stride);
			tmp = tmp.or(src.and(MASK8).lanewise(VectorOperators.LSHL, 46));
			tmp.intoArray(output, 464 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK54);
			tmp.intoArray(output, 592 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 62).and(MASK2);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 608 + i * stride);
			tmp = tmp.or(src.and(MASK52).lanewise(VectorOperators.LSHL, 2));
			tmp.intoArray(output, 720 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 52).and(MASK12);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 624 + i * stride);
			tmp = tmp.or(src.and(MASK42).lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 848 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 42).and(MASK22);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 640 + i * stride);
			tmp = tmp.or(src.and(MASK32).lanewise(VectorOperators.LSHL, 22));
			tmp.intoArray(output, 976 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 656 + i * stride);
			tmp = tmp.or(src.and(MASK22).lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 48 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 22).and(MASK42);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 672 + i * stride);
			tmp = tmp.or(src.and(MASK12).lanewise(VectorOperators.LSHL, 42));
			tmp.intoArray(output, 176 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12).and(MASK52);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 688 + i * stride);
			tmp = tmp.or(src.and(MASK2).lanewise(VectorOperators.LSHL, 52));
			tmp.intoArray(output, 304 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2).and(MASK54);
			tmp.intoArray(output, 432 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 56).and(MASK8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 704 + i * stride);
			tmp = tmp.or(src.and(MASK46).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 560 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 46).and(MASK18);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 720 + i * stride);
			tmp = tmp.or(src.and(MASK36).lanewise(VectorOperators.LSHL, 18));
			tmp.intoArray(output, 688 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 36).and(MASK28);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 736 + i * stride);
			tmp = tmp.or(src.and(MASK26).lanewise(VectorOperators.LSHL, 28));
			tmp.intoArray(output, 816 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 26).and(MASK38);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 752 + i * stride);
			tmp = tmp.or(src.and(MASK16).lanewise(VectorOperators.LSHL, 38));
			tmp.intoArray(output, 944 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK48);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 768 + i * stride);
			tmp = tmp.or(src.and(MASK6).lanewise(VectorOperators.LSHL, 48));
			tmp.intoArray(output, 112 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6).and(MASK54);
			tmp.intoArray(output, 240 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 60).and(MASK4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 784 + i * stride);
			tmp = tmp.or(src.and(MASK50).lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 368 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 50).and(MASK14);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 800 + i * stride);
			tmp = tmp.or(src.and(MASK40).lanewise(VectorOperators.LSHL, 14));
			tmp.intoArray(output, 496 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40).and(MASK24);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 816 + i * stride);
			tmp = tmp.or(src.and(MASK30).lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 624 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 30).and(MASK34);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 832 + i * stride);
			tmp = tmp.or(src.and(MASK20).lanewise(VectorOperators.LSHL, 34));
			tmp.intoArray(output, 752 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20).and(MASK44);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 848 + i * stride);
			tmp = tmp.or(src.and(MASK10).lanewise(VectorOperators.LSHL, 44));
			tmp.intoArray(output, 880 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10).and(MASK54);
			tmp.intoArray(output, 1008 + i * stride);
		}
	}

	public static void unpack55(long[] input, long[] output) {
		int stride = LongVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 64;
		for (int i = 0; i < 16 / stride; i++) {
			LongVector src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, i * stride);
			LongVector tmp;
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK55);
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 55).and(MASK9);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 16 + i * stride);
			tmp = tmp.or(src.and(MASK46).lanewise(VectorOperators.LSHL, 9));
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 46).and(MASK18);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 32 + i * stride);
			tmp = tmp.or(src.and(MASK37).lanewise(VectorOperators.LSHL, 18));
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 37).and(MASK27);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 48 + i * stride);
			tmp = tmp.or(src.and(MASK28).lanewise(VectorOperators.LSHL, 27));
			tmp.intoArray(output, 384 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28).and(MASK36);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 64 + i * stride);
			tmp = tmp.or(src.and(MASK19).lanewise(VectorOperators.LSHL, 36));
			tmp.intoArray(output, 512 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 19).and(MASK45);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 80 + i * stride);
			tmp = tmp.or(src.and(MASK10).lanewise(VectorOperators.LSHL, 45));
			tmp.intoArray(output, 640 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10).and(MASK54);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 96 + i * stride);
			tmp = tmp.or(src.and(MASK1).lanewise(VectorOperators.LSHL, 54));
			tmp.intoArray(output, 768 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 1).and(MASK55);
			tmp.intoArray(output, 896 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 56).and(MASK8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 112 + i * stride);
			tmp = tmp.or(src.and(MASK47).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 47).and(MASK17);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 128 + i * stride);
			tmp = tmp.or(src.and(MASK38).lanewise(VectorOperators.LSHL, 17));
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 38).and(MASK26);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 144 + i * stride);
			tmp = tmp.or(src.and(MASK29).lanewise(VectorOperators.LSHL, 26));
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 29).and(MASK35);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 160 + i * stride);
			tmp = tmp.or(src.and(MASK20).lanewise(VectorOperators.LSHL, 35));
			tmp.intoArray(output, 448 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20).and(MASK44);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 176 + i * stride);
			tmp = tmp.or(src.and(MASK11).lanewise(VectorOperators.LSHL, 44));
			tmp.intoArray(output, 576 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 11).and(MASK53);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 192 + i * stride);
			tmp = tmp.or(src.and(MASK2).lanewise(VectorOperators.LSHL, 53));
			tmp.intoArray(output, 704 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2).and(MASK55);
			tmp.intoArray(output, 832 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 57).and(MASK7);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 208 + i * stride);
			tmp = tmp.or(src.and(MASK48).lanewise(VectorOperators.LSHL, 7));
			tmp.intoArray(output, 960 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48).and(MASK16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 224 + i * stride);
			tmp = tmp.or(src.and(MASK39).lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 39).and(MASK25);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 240 + i * stride);
			tmp = tmp.or(src.and(MASK30).lanewise(VectorOperators.LSHL, 25));
			tmp.intoArray(output, 160 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 30).and(MASK34);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 256 + i * stride);
			tmp = tmp.or(src.and(MASK21).lanewise(VectorOperators.LSHL, 34));
			tmp.intoArray(output, 288 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 21).and(MASK43);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 272 + i * stride);
			tmp = tmp.or(src.and(MASK12).lanewise(VectorOperators.LSHL, 43));
			tmp.intoArray(output, 416 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12).and(MASK52);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 288 + i * stride);
			tmp = tmp.or(src.and(MASK3).lanewise(VectorOperators.LSHL, 52));
			tmp.intoArray(output, 544 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 3).and(MASK55);
			tmp.intoArray(output, 672 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 58).and(MASK6);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 304 + i * stride);
			tmp = tmp.or(src.and(MASK49).lanewise(VectorOperators.LSHL, 6));
			tmp.intoArray(output, 800 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 49).and(MASK15);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 320 + i * stride);
			tmp = tmp.or(src.and(MASK40).lanewise(VectorOperators.LSHL, 15));
			tmp.intoArray(output, 928 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40).and(MASK24);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 336 + i * stride);
			tmp = tmp.or(src.and(MASK31).lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 31).and(MASK33);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 352 + i * stride);
			tmp = tmp.or(src.and(MASK22).lanewise(VectorOperators.LSHL, 33));
			tmp.intoArray(output, 224 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 22).and(MASK42);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 368 + i * stride);
			tmp = tmp.or(src.and(MASK13).lanewise(VectorOperators.LSHL, 42));
			tmp.intoArray(output, 352 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 13).and(MASK51);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 384 + i * stride);
			tmp = tmp.or(src.and(MASK4).lanewise(VectorOperators.LSHL, 51));
			tmp.intoArray(output, 480 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4).and(MASK55);
			tmp.intoArray(output, 608 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 59).and(MASK5);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 400 + i * stride);
			tmp = tmp.or(src.and(MASK50).lanewise(VectorOperators.LSHL, 5));
			tmp.intoArray(output, 736 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 50).and(MASK14);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 416 + i * stride);
			tmp = tmp.or(src.and(MASK41).lanewise(VectorOperators.LSHL, 14));
			tmp.intoArray(output, 864 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 41).and(MASK23);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 432 + i * stride);
			tmp = tmp.or(src.and(MASK32).lanewise(VectorOperators.LSHL, 23));
			tmp.intoArray(output, 992 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 448 + i * stride);
			tmp = tmp.or(src.and(MASK23).lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 16 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 23).and(MASK41);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 464 + i * stride);
			tmp = tmp.or(src.and(MASK14).lanewise(VectorOperators.LSHL, 41));
			tmp.intoArray(output, 144 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14).and(MASK50);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 480 + i * stride);
			tmp = tmp.or(src.and(MASK5).lanewise(VectorOperators.LSHL, 50));
			tmp.intoArray(output, 272 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 5).and(MASK55);
			tmp.intoArray(output, 400 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 60).and(MASK4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 496 + i * stride);
			tmp = tmp.or(src.and(MASK51).lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 528 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 51).and(MASK13);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 512 + i * stride);
			tmp = tmp.or(src.and(MASK42).lanewise(VectorOperators.LSHL, 13));
			tmp.intoArray(output, 656 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 42).and(MASK22);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 528 + i * stride);
			tmp = tmp.or(src.and(MASK33).lanewise(VectorOperators.LSHL, 22));
			tmp.intoArray(output, 784 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 33).and(MASK31);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 544 + i * stride);
			tmp = tmp.or(src.and(MASK24).lanewise(VectorOperators.LSHL, 31));
			tmp.intoArray(output, 912 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK40);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 560 + i * stride);
			tmp = tmp.or(src.and(MASK15).lanewise(VectorOperators.LSHL, 40));
			tmp.intoArray(output, 80 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 15).and(MASK49);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 576 + i * stride);
			tmp = tmp.or(src.and(MASK6).lanewise(VectorOperators.LSHL, 49));
			tmp.intoArray(output, 208 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6).and(MASK55);
			tmp.intoArray(output, 336 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 61).and(MASK3);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 592 + i * stride);
			tmp = tmp.or(src.and(MASK52).lanewise(VectorOperators.LSHL, 3));
			tmp.intoArray(output, 464 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 52).and(MASK12);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 608 + i * stride);
			tmp = tmp.or(src.and(MASK43).lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 592 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 43).and(MASK21);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 624 + i * stride);
			tmp = tmp.or(src.and(MASK34).lanewise(VectorOperators.LSHL, 21));
			tmp.intoArray(output, 720 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 34).and(MASK30);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 640 + i * stride);
			tmp = tmp.or(src.and(MASK25).lanewise(VectorOperators.LSHL, 30));
			tmp.intoArray(output, 848 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 25).and(MASK39);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 656 + i * stride);
			tmp = tmp.or(src.and(MASK16).lanewise(VectorOperators.LSHL, 39));
			tmp.intoArray(output, 976 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK48);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 672 + i * stride);
			tmp = tmp.or(src.and(MASK7).lanewise(VectorOperators.LSHL, 48));
			tmp.intoArray(output, 48 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 7).and(MASK55);
			tmp.intoArray(output, 176 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 62).and(MASK2);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 688 + i * stride);
			tmp = tmp.or(src.and(MASK53).lanewise(VectorOperators.LSHL, 2));
			tmp.intoArray(output, 304 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 53).and(MASK11);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 704 + i * stride);
			tmp = tmp.or(src.and(MASK44).lanewise(VectorOperators.LSHL, 11));
			tmp.intoArray(output, 432 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 44).and(MASK20);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 720 + i * stride);
			tmp = tmp.or(src.and(MASK35).lanewise(VectorOperators.LSHL, 20));
			tmp.intoArray(output, 560 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 35).and(MASK29);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 736 + i * stride);
			tmp = tmp.or(src.and(MASK26).lanewise(VectorOperators.LSHL, 29));
			tmp.intoArray(output, 688 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 26).and(MASK38);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 752 + i * stride);
			tmp = tmp.or(src.and(MASK17).lanewise(VectorOperators.LSHL, 38));
			tmp.intoArray(output, 816 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 17).and(MASK47);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 768 + i * stride);
			tmp = tmp.or(src.and(MASK8).lanewise(VectorOperators.LSHL, 47));
			tmp.intoArray(output, 944 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK55);
			tmp.intoArray(output, 112 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 63).and(MASK1);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 784 + i * stride);
			tmp = tmp.or(src.and(MASK54).lanewise(VectorOperators.LSHL, 1));
			tmp.intoArray(output, 240 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 54).and(MASK10);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 800 + i * stride);
			tmp = tmp.or(src.and(MASK45).lanewise(VectorOperators.LSHL, 10));
			tmp.intoArray(output, 368 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 45).and(MASK19);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 816 + i * stride);
			tmp = tmp.or(src.and(MASK36).lanewise(VectorOperators.LSHL, 19));
			tmp.intoArray(output, 496 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 36).and(MASK28);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 832 + i * stride);
			tmp = tmp.or(src.and(MASK27).lanewise(VectorOperators.LSHL, 28));
			tmp.intoArray(output, 624 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 27).and(MASK37);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 848 + i * stride);
			tmp = tmp.or(src.and(MASK18).lanewise(VectorOperators.LSHL, 37));
			tmp.intoArray(output, 752 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 18).and(MASK46);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 864 + i * stride);
			tmp = tmp.or(src.and(MASK9).lanewise(VectorOperators.LSHL, 46));
			tmp.intoArray(output, 880 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 9).and(MASK55);
			tmp.intoArray(output, 1008 + i * stride);
		}
	}

	public static void unpack56(long[] input, long[] output) {
		int stride = LongVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 64;
		for (int i = 0; i < 16 / stride; i++) {
			LongVector src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, i * stride);
			LongVector tmp;
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK56);
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 56).and(MASK8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 16 + i * stride);
			tmp = tmp.or(src.and(MASK48).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48).and(MASK16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 32 + i * stride);
			tmp = tmp.or(src.and(MASK40).lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40).and(MASK24);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 48 + i * stride);
			tmp = tmp.or(src.and(MASK32).lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 384 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 64 + i * stride);
			tmp = tmp.or(src.and(MASK24).lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 512 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK40);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 80 + i * stride);
			tmp = tmp.or(src.and(MASK16).lanewise(VectorOperators.LSHL, 40));
			tmp.intoArray(output, 640 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK48);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 96 + i * stride);
			tmp = tmp.or(src.and(MASK8).lanewise(VectorOperators.LSHL, 48));
			tmp.intoArray(output, 768 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK56);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 112 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 56));
			tmp.intoArray(output, 896 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK56);
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 56).and(MASK8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 128 + i * stride);
			tmp = tmp.or(src.and(MASK48).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48).and(MASK16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 144 + i * stride);
			tmp = tmp.or(src.and(MASK40).lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40).and(MASK24);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 160 + i * stride);
			tmp = tmp.or(src.and(MASK32).lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 448 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 176 + i * stride);
			tmp = tmp.or(src.and(MASK24).lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 576 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK40);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 192 + i * stride);
			tmp = tmp.or(src.and(MASK16).lanewise(VectorOperators.LSHL, 40));
			tmp.intoArray(output, 704 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK48);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 208 + i * stride);
			tmp = tmp.or(src.and(MASK8).lanewise(VectorOperators.LSHL, 48));
			tmp.intoArray(output, 832 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK56);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 224 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 56));
			tmp.intoArray(output, 960 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK56);
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 56).and(MASK8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 240 + i * stride);
			tmp = tmp.or(src.and(MASK48).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 160 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48).and(MASK16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 256 + i * stride);
			tmp = tmp.or(src.and(MASK40).lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 288 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40).and(MASK24);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 272 + i * stride);
			tmp = tmp.or(src.and(MASK32).lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 416 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 288 + i * stride);
			tmp = tmp.or(src.and(MASK24).lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 544 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK40);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 304 + i * stride);
			tmp = tmp.or(src.and(MASK16).lanewise(VectorOperators.LSHL, 40));
			tmp.intoArray(output, 672 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK48);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 320 + i * stride);
			tmp = tmp.or(src.and(MASK8).lanewise(VectorOperators.LSHL, 48));
			tmp.intoArray(output, 800 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK56);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 336 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 56));
			tmp.intoArray(output, 928 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK56);
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 56).and(MASK8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 352 + i * stride);
			tmp = tmp.or(src.and(MASK48).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 224 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48).and(MASK16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 368 + i * stride);
			tmp = tmp.or(src.and(MASK40).lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 352 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40).and(MASK24);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 384 + i * stride);
			tmp = tmp.or(src.and(MASK32).lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 480 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 400 + i * stride);
			tmp = tmp.or(src.and(MASK24).lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 608 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK40);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 416 + i * stride);
			tmp = tmp.or(src.and(MASK16).lanewise(VectorOperators.LSHL, 40));
			tmp.intoArray(output, 736 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK48);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 432 + i * stride);
			tmp = tmp.or(src.and(MASK8).lanewise(VectorOperators.LSHL, 48));
			tmp.intoArray(output, 864 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK56);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 448 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 56));
			tmp.intoArray(output, 992 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK56);
			tmp.intoArray(output, 16 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 56).and(MASK8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 464 + i * stride);
			tmp = tmp.or(src.and(MASK48).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 144 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48).and(MASK16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 480 + i * stride);
			tmp = tmp.or(src.and(MASK40).lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 272 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40).and(MASK24);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 496 + i * stride);
			tmp = tmp.or(src.and(MASK32).lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 400 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 512 + i * stride);
			tmp = tmp.or(src.and(MASK24).lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 528 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK40);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 528 + i * stride);
			tmp = tmp.or(src.and(MASK16).lanewise(VectorOperators.LSHL, 40));
			tmp.intoArray(output, 656 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK48);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 544 + i * stride);
			tmp = tmp.or(src.and(MASK8).lanewise(VectorOperators.LSHL, 48));
			tmp.intoArray(output, 784 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK56);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 560 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 56));
			tmp.intoArray(output, 912 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK56);
			tmp.intoArray(output, 80 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 56).and(MASK8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 576 + i * stride);
			tmp = tmp.or(src.and(MASK48).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 208 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48).and(MASK16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 592 + i * stride);
			tmp = tmp.or(src.and(MASK40).lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 336 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40).and(MASK24);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 608 + i * stride);
			tmp = tmp.or(src.and(MASK32).lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 464 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 624 + i * stride);
			tmp = tmp.or(src.and(MASK24).lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 592 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK40);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 640 + i * stride);
			tmp = tmp.or(src.and(MASK16).lanewise(VectorOperators.LSHL, 40));
			tmp.intoArray(output, 720 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK48);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 656 + i * stride);
			tmp = tmp.or(src.and(MASK8).lanewise(VectorOperators.LSHL, 48));
			tmp.intoArray(output, 848 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK56);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 672 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 56));
			tmp.intoArray(output, 976 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK56);
			tmp.intoArray(output, 48 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 56).and(MASK8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 688 + i * stride);
			tmp = tmp.or(src.and(MASK48).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 176 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48).and(MASK16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 704 + i * stride);
			tmp = tmp.or(src.and(MASK40).lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 304 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40).and(MASK24);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 720 + i * stride);
			tmp = tmp.or(src.and(MASK32).lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 432 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 736 + i * stride);
			tmp = tmp.or(src.and(MASK24).lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 560 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK40);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 752 + i * stride);
			tmp = tmp.or(src.and(MASK16).lanewise(VectorOperators.LSHL, 40));
			tmp.intoArray(output, 688 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK48);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 768 + i * stride);
			tmp = tmp.or(src.and(MASK8).lanewise(VectorOperators.LSHL, 48));
			tmp.intoArray(output, 816 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK56);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 784 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 56));
			tmp.intoArray(output, 944 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK56);
			tmp.intoArray(output, 112 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 56).and(MASK8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 800 + i * stride);
			tmp = tmp.or(src.and(MASK48).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 240 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48).and(MASK16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 816 + i * stride);
			tmp = tmp.or(src.and(MASK40).lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 368 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40).and(MASK24);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 832 + i * stride);
			tmp = tmp.or(src.and(MASK32).lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 496 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 848 + i * stride);
			tmp = tmp.or(src.and(MASK24).lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 624 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK40);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 864 + i * stride);
			tmp = tmp.or(src.and(MASK16).lanewise(VectorOperators.LSHL, 40));
			tmp.intoArray(output, 752 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK48);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 880 + i * stride);
			tmp = tmp.or(src.and(MASK8).lanewise(VectorOperators.LSHL, 48));
			tmp.intoArray(output, 880 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK56);
			tmp.intoArray(output, 1008 + i * stride);
		}
	}

	public static void unpack57(long[] input, long[] output) {
		int stride = LongVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 64;
		for (int i = 0; i < 16 / stride; i++) {
			LongVector src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, i * stride);
			LongVector tmp;
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK57);
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 57).and(MASK7);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 16 + i * stride);
			tmp = tmp.or(src.and(MASK50).lanewise(VectorOperators.LSHL, 7));
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 50).and(MASK14);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 32 + i * stride);
			tmp = tmp.or(src.and(MASK43).lanewise(VectorOperators.LSHL, 14));
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 43).and(MASK21);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 48 + i * stride);
			tmp = tmp.or(src.and(MASK36).lanewise(VectorOperators.LSHL, 21));
			tmp.intoArray(output, 384 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 36).and(MASK28);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 64 + i * stride);
			tmp = tmp.or(src.and(MASK29).lanewise(VectorOperators.LSHL, 28));
			tmp.intoArray(output, 512 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 29).and(MASK35);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 80 + i * stride);
			tmp = tmp.or(src.and(MASK22).lanewise(VectorOperators.LSHL, 35));
			tmp.intoArray(output, 640 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 22).and(MASK42);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 96 + i * stride);
			tmp = tmp.or(src.and(MASK15).lanewise(VectorOperators.LSHL, 42));
			tmp.intoArray(output, 768 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 15).and(MASK49);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 112 + i * stride);
			tmp = tmp.or(src.and(MASK8).lanewise(VectorOperators.LSHL, 49));
			tmp.intoArray(output, 896 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK56);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 128 + i * stride);
			tmp = tmp.or(src.and(MASK1).lanewise(VectorOperators.LSHL, 56));
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 1).and(MASK57);
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 58).and(MASK6);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 144 + i * stride);
			tmp = tmp.or(src.and(MASK51).lanewise(VectorOperators.LSHL, 6));
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 51).and(MASK13);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 160 + i * stride);
			tmp = tmp.or(src.and(MASK44).lanewise(VectorOperators.LSHL, 13));
			tmp.intoArray(output, 448 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 44).and(MASK20);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 176 + i * stride);
			tmp = tmp.or(src.and(MASK37).lanewise(VectorOperators.LSHL, 20));
			tmp.intoArray(output, 576 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 37).and(MASK27);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 192 + i * stride);
			tmp = tmp.or(src.and(MASK30).lanewise(VectorOperators.LSHL, 27));
			tmp.intoArray(output, 704 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 30).and(MASK34);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 208 + i * stride);
			tmp = tmp.or(src.and(MASK23).lanewise(VectorOperators.LSHL, 34));
			tmp.intoArray(output, 832 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 23).and(MASK41);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 224 + i * stride);
			tmp = tmp.or(src.and(MASK16).lanewise(VectorOperators.LSHL, 41));
			tmp.intoArray(output, 960 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK48);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 240 + i * stride);
			tmp = tmp.or(src.and(MASK9).lanewise(VectorOperators.LSHL, 48));
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 9).and(MASK55);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 256 + i * stride);
			tmp = tmp.or(src.and(MASK2).lanewise(VectorOperators.LSHL, 55));
			tmp.intoArray(output, 160 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2).and(MASK57);
			tmp.intoArray(output, 288 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 59).and(MASK5);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 272 + i * stride);
			tmp = tmp.or(src.and(MASK52).lanewise(VectorOperators.LSHL, 5));
			tmp.intoArray(output, 416 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 52).and(MASK12);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 288 + i * stride);
			tmp = tmp.or(src.and(MASK45).lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 544 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 45).and(MASK19);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 304 + i * stride);
			tmp = tmp.or(src.and(MASK38).lanewise(VectorOperators.LSHL, 19));
			tmp.intoArray(output, 672 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 38).and(MASK26);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 320 + i * stride);
			tmp = tmp.or(src.and(MASK31).lanewise(VectorOperators.LSHL, 26));
			tmp.intoArray(output, 800 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 31).and(MASK33);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 336 + i * stride);
			tmp = tmp.or(src.and(MASK24).lanewise(VectorOperators.LSHL, 33));
			tmp.intoArray(output, 928 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK40);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 352 + i * stride);
			tmp = tmp.or(src.and(MASK17).lanewise(VectorOperators.LSHL, 40));
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 17).and(MASK47);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 368 + i * stride);
			tmp = tmp.or(src.and(MASK10).lanewise(VectorOperators.LSHL, 47));
			tmp.intoArray(output, 224 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10).and(MASK54);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 384 + i * stride);
			tmp = tmp.or(src.and(MASK3).lanewise(VectorOperators.LSHL, 54));
			tmp.intoArray(output, 352 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 3).and(MASK57);
			tmp.intoArray(output, 480 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 60).and(MASK4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 400 + i * stride);
			tmp = tmp.or(src.and(MASK53).lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 608 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 53).and(MASK11);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 416 + i * stride);
			tmp = tmp.or(src.and(MASK46).lanewise(VectorOperators.LSHL, 11));
			tmp.intoArray(output, 736 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 46).and(MASK18);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 432 + i * stride);
			tmp = tmp.or(src.and(MASK39).lanewise(VectorOperators.LSHL, 18));
			tmp.intoArray(output, 864 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 39).and(MASK25);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 448 + i * stride);
			tmp = tmp.or(src.and(MASK32).lanewise(VectorOperators.LSHL, 25));
			tmp.intoArray(output, 992 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 464 + i * stride);
			tmp = tmp.or(src.and(MASK25).lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 16 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 25).and(MASK39);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 480 + i * stride);
			tmp = tmp.or(src.and(MASK18).lanewise(VectorOperators.LSHL, 39));
			tmp.intoArray(output, 144 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 18).and(MASK46);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 496 + i * stride);
			tmp = tmp.or(src.and(MASK11).lanewise(VectorOperators.LSHL, 46));
			tmp.intoArray(output, 272 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 11).and(MASK53);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 512 + i * stride);
			tmp = tmp.or(src.and(MASK4).lanewise(VectorOperators.LSHL, 53));
			tmp.intoArray(output, 400 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4).and(MASK57);
			tmp.intoArray(output, 528 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 61).and(MASK3);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 528 + i * stride);
			tmp = tmp.or(src.and(MASK54).lanewise(VectorOperators.LSHL, 3));
			tmp.intoArray(output, 656 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 54).and(MASK10);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 544 + i * stride);
			tmp = tmp.or(src.and(MASK47).lanewise(VectorOperators.LSHL, 10));
			tmp.intoArray(output, 784 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 47).and(MASK17);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 560 + i * stride);
			tmp = tmp.or(src.and(MASK40).lanewise(VectorOperators.LSHL, 17));
			tmp.intoArray(output, 912 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40).and(MASK24);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 576 + i * stride);
			tmp = tmp.or(src.and(MASK33).lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 80 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 33).and(MASK31);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 592 + i * stride);
			tmp = tmp.or(src.and(MASK26).lanewise(VectorOperators.LSHL, 31));
			tmp.intoArray(output, 208 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 26).and(MASK38);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 608 + i * stride);
			tmp = tmp.or(src.and(MASK19).lanewise(VectorOperators.LSHL, 38));
			tmp.intoArray(output, 336 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 19).and(MASK45);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 624 + i * stride);
			tmp = tmp.or(src.and(MASK12).lanewise(VectorOperators.LSHL, 45));
			tmp.intoArray(output, 464 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12).and(MASK52);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 640 + i * stride);
			tmp = tmp.or(src.and(MASK5).lanewise(VectorOperators.LSHL, 52));
			tmp.intoArray(output, 592 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 5).and(MASK57);
			tmp.intoArray(output, 720 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 62).and(MASK2);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 656 + i * stride);
			tmp = tmp.or(src.and(MASK55).lanewise(VectorOperators.LSHL, 2));
			tmp.intoArray(output, 848 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 55).and(MASK9);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 672 + i * stride);
			tmp = tmp.or(src.and(MASK48).lanewise(VectorOperators.LSHL, 9));
			tmp.intoArray(output, 976 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48).and(MASK16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 688 + i * stride);
			tmp = tmp.or(src.and(MASK41).lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 48 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 41).and(MASK23);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 704 + i * stride);
			tmp = tmp.or(src.and(MASK34).lanewise(VectorOperators.LSHL, 23));
			tmp.intoArray(output, 176 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 34).and(MASK30);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 720 + i * stride);
			tmp = tmp.or(src.and(MASK27).lanewise(VectorOperators.LSHL, 30));
			tmp.intoArray(output, 304 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 27).and(MASK37);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 736 + i * stride);
			tmp = tmp.or(src.and(MASK20).lanewise(VectorOperators.LSHL, 37));
			tmp.intoArray(output, 432 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20).and(MASK44);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 752 + i * stride);
			tmp = tmp.or(src.and(MASK13).lanewise(VectorOperators.LSHL, 44));
			tmp.intoArray(output, 560 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 13).and(MASK51);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 768 + i * stride);
			tmp = tmp.or(src.and(MASK6).lanewise(VectorOperators.LSHL, 51));
			tmp.intoArray(output, 688 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6).and(MASK57);
			tmp.intoArray(output, 816 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 63).and(MASK1);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 784 + i * stride);
			tmp = tmp.or(src.and(MASK56).lanewise(VectorOperators.LSHL, 1));
			tmp.intoArray(output, 944 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 56).and(MASK8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 800 + i * stride);
			tmp = tmp.or(src.and(MASK49).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 112 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 49).and(MASK15);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 816 + i * stride);
			tmp = tmp.or(src.and(MASK42).lanewise(VectorOperators.LSHL, 15));
			tmp.intoArray(output, 240 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 42).and(MASK22);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 832 + i * stride);
			tmp = tmp.or(src.and(MASK35).lanewise(VectorOperators.LSHL, 22));
			tmp.intoArray(output, 368 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 35).and(MASK29);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 848 + i * stride);
			tmp = tmp.or(src.and(MASK28).lanewise(VectorOperators.LSHL, 29));
			tmp.intoArray(output, 496 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28).and(MASK36);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 864 + i * stride);
			tmp = tmp.or(src.and(MASK21).lanewise(VectorOperators.LSHL, 36));
			tmp.intoArray(output, 624 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 21).and(MASK43);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 880 + i * stride);
			tmp = tmp.or(src.and(MASK14).lanewise(VectorOperators.LSHL, 43));
			tmp.intoArray(output, 752 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14).and(MASK50);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 896 + i * stride);
			tmp = tmp.or(src.and(MASK7).lanewise(VectorOperators.LSHL, 50));
			tmp.intoArray(output, 880 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 7).and(MASK57);
			tmp.intoArray(output, 1008 + i * stride);
		}
	}

	public static void unpack58(long[] input, long[] output) {
		int stride = LongVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 64;
		for (int i = 0; i < 16 / stride; i++) {
			LongVector src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, i * stride);
			LongVector tmp;
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK58);
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 58).and(MASK6);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 16 + i * stride);
			tmp = tmp.or(src.and(MASK52).lanewise(VectorOperators.LSHL, 6));
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 52).and(MASK12);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 32 + i * stride);
			tmp = tmp.or(src.and(MASK46).lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 46).and(MASK18);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 48 + i * stride);
			tmp = tmp.or(src.and(MASK40).lanewise(VectorOperators.LSHL, 18));
			tmp.intoArray(output, 384 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40).and(MASK24);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 64 + i * stride);
			tmp = tmp.or(src.and(MASK34).lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 512 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 34).and(MASK30);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 80 + i * stride);
			tmp = tmp.or(src.and(MASK28).lanewise(VectorOperators.LSHL, 30));
			tmp.intoArray(output, 640 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28).and(MASK36);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 96 + i * stride);
			tmp = tmp.or(src.and(MASK22).lanewise(VectorOperators.LSHL, 36));
			tmp.intoArray(output, 768 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 22).and(MASK42);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 112 + i * stride);
			tmp = tmp.or(src.and(MASK16).lanewise(VectorOperators.LSHL, 42));
			tmp.intoArray(output, 896 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK48);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 128 + i * stride);
			tmp = tmp.or(src.and(MASK10).lanewise(VectorOperators.LSHL, 48));
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10).and(MASK54);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 144 + i * stride);
			tmp = tmp.or(src.and(MASK4).lanewise(VectorOperators.LSHL, 54));
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4).and(MASK58);
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 62).and(MASK2);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 160 + i * stride);
			tmp = tmp.or(src.and(MASK56).lanewise(VectorOperators.LSHL, 2));
			tmp.intoArray(output, 448 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 56).and(MASK8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 176 + i * stride);
			tmp = tmp.or(src.and(MASK50).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 576 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 50).and(MASK14);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 192 + i * stride);
			tmp = tmp.or(src.and(MASK44).lanewise(VectorOperators.LSHL, 14));
			tmp.intoArray(output, 704 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 44).and(MASK20);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 208 + i * stride);
			tmp = tmp.or(src.and(MASK38).lanewise(VectorOperators.LSHL, 20));
			tmp.intoArray(output, 832 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 38).and(MASK26);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 224 + i * stride);
			tmp = tmp.or(src.and(MASK32).lanewise(VectorOperators.LSHL, 26));
			tmp.intoArray(output, 960 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 240 + i * stride);
			tmp = tmp.or(src.and(MASK26).lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 26).and(MASK38);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 256 + i * stride);
			tmp = tmp.or(src.and(MASK20).lanewise(VectorOperators.LSHL, 38));
			tmp.intoArray(output, 160 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20).and(MASK44);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 272 + i * stride);
			tmp = tmp.or(src.and(MASK14).lanewise(VectorOperators.LSHL, 44));
			tmp.intoArray(output, 288 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14).and(MASK50);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 288 + i * stride);
			tmp = tmp.or(src.and(MASK8).lanewise(VectorOperators.LSHL, 50));
			tmp.intoArray(output, 416 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK56);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 304 + i * stride);
			tmp = tmp.or(src.and(MASK2).lanewise(VectorOperators.LSHL, 56));
			tmp.intoArray(output, 544 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2).and(MASK58);
			tmp.intoArray(output, 672 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 60).and(MASK4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 320 + i * stride);
			tmp = tmp.or(src.and(MASK54).lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 800 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 54).and(MASK10);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 336 + i * stride);
			tmp = tmp.or(src.and(MASK48).lanewise(VectorOperators.LSHL, 10));
			tmp.intoArray(output, 928 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48).and(MASK16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 352 + i * stride);
			tmp = tmp.or(src.and(MASK42).lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 42).and(MASK22);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 368 + i * stride);
			tmp = tmp.or(src.and(MASK36).lanewise(VectorOperators.LSHL, 22));
			tmp.intoArray(output, 224 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 36).and(MASK28);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 384 + i * stride);
			tmp = tmp.or(src.and(MASK30).lanewise(VectorOperators.LSHL, 28));
			tmp.intoArray(output, 352 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 30).and(MASK34);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 400 + i * stride);
			tmp = tmp.or(src.and(MASK24).lanewise(VectorOperators.LSHL, 34));
			tmp.intoArray(output, 480 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK40);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 416 + i * stride);
			tmp = tmp.or(src.and(MASK18).lanewise(VectorOperators.LSHL, 40));
			tmp.intoArray(output, 608 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 18).and(MASK46);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 432 + i * stride);
			tmp = tmp.or(src.and(MASK12).lanewise(VectorOperators.LSHL, 46));
			tmp.intoArray(output, 736 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12).and(MASK52);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 448 + i * stride);
			tmp = tmp.or(src.and(MASK6).lanewise(VectorOperators.LSHL, 52));
			tmp.intoArray(output, 864 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6).and(MASK58);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 464 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 58));
			tmp.intoArray(output, 992 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK58);
			tmp.intoArray(output, 16 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 58).and(MASK6);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 480 + i * stride);
			tmp = tmp.or(src.and(MASK52).lanewise(VectorOperators.LSHL, 6));
			tmp.intoArray(output, 144 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 52).and(MASK12);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 496 + i * stride);
			tmp = tmp.or(src.and(MASK46).lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 272 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 46).and(MASK18);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 512 + i * stride);
			tmp = tmp.or(src.and(MASK40).lanewise(VectorOperators.LSHL, 18));
			tmp.intoArray(output, 400 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40).and(MASK24);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 528 + i * stride);
			tmp = tmp.or(src.and(MASK34).lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 528 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 34).and(MASK30);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 544 + i * stride);
			tmp = tmp.or(src.and(MASK28).lanewise(VectorOperators.LSHL, 30));
			tmp.intoArray(output, 656 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28).and(MASK36);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 560 + i * stride);
			tmp = tmp.or(src.and(MASK22).lanewise(VectorOperators.LSHL, 36));
			tmp.intoArray(output, 784 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 22).and(MASK42);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 576 + i * stride);
			tmp = tmp.or(src.and(MASK16).lanewise(VectorOperators.LSHL, 42));
			tmp.intoArray(output, 912 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK48);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 592 + i * stride);
			tmp = tmp.or(src.and(MASK10).lanewise(VectorOperators.LSHL, 48));
			tmp.intoArray(output, 80 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10).and(MASK54);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 608 + i * stride);
			tmp = tmp.or(src.and(MASK4).lanewise(VectorOperators.LSHL, 54));
			tmp.intoArray(output, 208 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4).and(MASK58);
			tmp.intoArray(output, 336 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 62).and(MASK2);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 624 + i * stride);
			tmp = tmp.or(src.and(MASK56).lanewise(VectorOperators.LSHL, 2));
			tmp.intoArray(output, 464 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 56).and(MASK8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 640 + i * stride);
			tmp = tmp.or(src.and(MASK50).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 592 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 50).and(MASK14);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 656 + i * stride);
			tmp = tmp.or(src.and(MASK44).lanewise(VectorOperators.LSHL, 14));
			tmp.intoArray(output, 720 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 44).and(MASK20);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 672 + i * stride);
			tmp = tmp.or(src.and(MASK38).lanewise(VectorOperators.LSHL, 20));
			tmp.intoArray(output, 848 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 38).and(MASK26);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 688 + i * stride);
			tmp = tmp.or(src.and(MASK32).lanewise(VectorOperators.LSHL, 26));
			tmp.intoArray(output, 976 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 704 + i * stride);
			tmp = tmp.or(src.and(MASK26).lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 48 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 26).and(MASK38);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 720 + i * stride);
			tmp = tmp.or(src.and(MASK20).lanewise(VectorOperators.LSHL, 38));
			tmp.intoArray(output, 176 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20).and(MASK44);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 736 + i * stride);
			tmp = tmp.or(src.and(MASK14).lanewise(VectorOperators.LSHL, 44));
			tmp.intoArray(output, 304 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14).and(MASK50);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 752 + i * stride);
			tmp = tmp.or(src.and(MASK8).lanewise(VectorOperators.LSHL, 50));
			tmp.intoArray(output, 432 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK56);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 768 + i * stride);
			tmp = tmp.or(src.and(MASK2).lanewise(VectorOperators.LSHL, 56));
			tmp.intoArray(output, 560 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2).and(MASK58);
			tmp.intoArray(output, 688 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 60).and(MASK4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 784 + i * stride);
			tmp = tmp.or(src.and(MASK54).lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 816 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 54).and(MASK10);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 800 + i * stride);
			tmp = tmp.or(src.and(MASK48).lanewise(VectorOperators.LSHL, 10));
			tmp.intoArray(output, 944 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48).and(MASK16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 816 + i * stride);
			tmp = tmp.or(src.and(MASK42).lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 112 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 42).and(MASK22);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 832 + i * stride);
			tmp = tmp.or(src.and(MASK36).lanewise(VectorOperators.LSHL, 22));
			tmp.intoArray(output, 240 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 36).and(MASK28);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 848 + i * stride);
			tmp = tmp.or(src.and(MASK30).lanewise(VectorOperators.LSHL, 28));
			tmp.intoArray(output, 368 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 30).and(MASK34);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 864 + i * stride);
			tmp = tmp.or(src.and(MASK24).lanewise(VectorOperators.LSHL, 34));
			tmp.intoArray(output, 496 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK40);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 880 + i * stride);
			tmp = tmp.or(src.and(MASK18).lanewise(VectorOperators.LSHL, 40));
			tmp.intoArray(output, 624 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 18).and(MASK46);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 896 + i * stride);
			tmp = tmp.or(src.and(MASK12).lanewise(VectorOperators.LSHL, 46));
			tmp.intoArray(output, 752 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12).and(MASK52);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 912 + i * stride);
			tmp = tmp.or(src.and(MASK6).lanewise(VectorOperators.LSHL, 52));
			tmp.intoArray(output, 880 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6).and(MASK58);
			tmp.intoArray(output, 1008 + i * stride);
		}
	}

	public static void unpack59(long[] input, long[] output) {
		int stride = LongVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 64;
		for (int i = 0; i < 16 / stride; i++) {
			LongVector src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, i * stride);
			LongVector tmp;
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK59);
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 59).and(MASK5);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 16 + i * stride);
			tmp = tmp.or(src.and(MASK54).lanewise(VectorOperators.LSHL, 5));
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 54).and(MASK10);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 32 + i * stride);
			tmp = tmp.or(src.and(MASK49).lanewise(VectorOperators.LSHL, 10));
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 49).and(MASK15);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 48 + i * stride);
			tmp = tmp.or(src.and(MASK44).lanewise(VectorOperators.LSHL, 15));
			tmp.intoArray(output, 384 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 44).and(MASK20);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 64 + i * stride);
			tmp = tmp.or(src.and(MASK39).lanewise(VectorOperators.LSHL, 20));
			tmp.intoArray(output, 512 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 39).and(MASK25);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 80 + i * stride);
			tmp = tmp.or(src.and(MASK34).lanewise(VectorOperators.LSHL, 25));
			tmp.intoArray(output, 640 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 34).and(MASK30);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 96 + i * stride);
			tmp = tmp.or(src.and(MASK29).lanewise(VectorOperators.LSHL, 30));
			tmp.intoArray(output, 768 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 29).and(MASK35);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 112 + i * stride);
			tmp = tmp.or(src.and(MASK24).lanewise(VectorOperators.LSHL, 35));
			tmp.intoArray(output, 896 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK40);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 128 + i * stride);
			tmp = tmp.or(src.and(MASK19).lanewise(VectorOperators.LSHL, 40));
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 19).and(MASK45);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 144 + i * stride);
			tmp = tmp.or(src.and(MASK14).lanewise(VectorOperators.LSHL, 45));
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14).and(MASK50);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 160 + i * stride);
			tmp = tmp.or(src.and(MASK9).lanewise(VectorOperators.LSHL, 50));
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 9).and(MASK55);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 176 + i * stride);
			tmp = tmp.or(src.and(MASK4).lanewise(VectorOperators.LSHL, 55));
			tmp.intoArray(output, 448 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4).and(MASK59);
			tmp.intoArray(output, 576 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 63).and(MASK1);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 192 + i * stride);
			tmp = tmp.or(src.and(MASK58).lanewise(VectorOperators.LSHL, 1));
			tmp.intoArray(output, 704 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 58).and(MASK6);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 208 + i * stride);
			tmp = tmp.or(src.and(MASK53).lanewise(VectorOperators.LSHL, 6));
			tmp.intoArray(output, 832 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 53).and(MASK11);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 224 + i * stride);
			tmp = tmp.or(src.and(MASK48).lanewise(VectorOperators.LSHL, 11));
			tmp.intoArray(output, 960 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48).and(MASK16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 240 + i * stride);
			tmp = tmp.or(src.and(MASK43).lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 43).and(MASK21);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 256 + i * stride);
			tmp = tmp.or(src.and(MASK38).lanewise(VectorOperators.LSHL, 21));
			tmp.intoArray(output, 160 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 38).and(MASK26);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 272 + i * stride);
			tmp = tmp.or(src.and(MASK33).lanewise(VectorOperators.LSHL, 26));
			tmp.intoArray(output, 288 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 33).and(MASK31);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 288 + i * stride);
			tmp = tmp.or(src.and(MASK28).lanewise(VectorOperators.LSHL, 31));
			tmp.intoArray(output, 416 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28).and(MASK36);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 304 + i * stride);
			tmp = tmp.or(src.and(MASK23).lanewise(VectorOperators.LSHL, 36));
			tmp.intoArray(output, 544 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 23).and(MASK41);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 320 + i * stride);
			tmp = tmp.or(src.and(MASK18).lanewise(VectorOperators.LSHL, 41));
			tmp.intoArray(output, 672 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 18).and(MASK46);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 336 + i * stride);
			tmp = tmp.or(src.and(MASK13).lanewise(VectorOperators.LSHL, 46));
			tmp.intoArray(output, 800 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 13).and(MASK51);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 352 + i * stride);
			tmp = tmp.or(src.and(MASK8).lanewise(VectorOperators.LSHL, 51));
			tmp.intoArray(output, 928 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK56);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 368 + i * stride);
			tmp = tmp.or(src.and(MASK3).lanewise(VectorOperators.LSHL, 56));
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 3).and(MASK59);
			tmp.intoArray(output, 224 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 62).and(MASK2);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 384 + i * stride);
			tmp = tmp.or(src.and(MASK57).lanewise(VectorOperators.LSHL, 2));
			tmp.intoArray(output, 352 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 57).and(MASK7);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 400 + i * stride);
			tmp = tmp.or(src.and(MASK52).lanewise(VectorOperators.LSHL, 7));
			tmp.intoArray(output, 480 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 52).and(MASK12);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 416 + i * stride);
			tmp = tmp.or(src.and(MASK47).lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 608 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 47).and(MASK17);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 432 + i * stride);
			tmp = tmp.or(src.and(MASK42).lanewise(VectorOperators.LSHL, 17));
			tmp.intoArray(output, 736 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 42).and(MASK22);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 448 + i * stride);
			tmp = tmp.or(src.and(MASK37).lanewise(VectorOperators.LSHL, 22));
			tmp.intoArray(output, 864 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 37).and(MASK27);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 464 + i * stride);
			tmp = tmp.or(src.and(MASK32).lanewise(VectorOperators.LSHL, 27));
			tmp.intoArray(output, 992 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 480 + i * stride);
			tmp = tmp.or(src.and(MASK27).lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 16 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 27).and(MASK37);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 496 + i * stride);
			tmp = tmp.or(src.and(MASK22).lanewise(VectorOperators.LSHL, 37));
			tmp.intoArray(output, 144 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 22).and(MASK42);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 512 + i * stride);
			tmp = tmp.or(src.and(MASK17).lanewise(VectorOperators.LSHL, 42));
			tmp.intoArray(output, 272 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 17).and(MASK47);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 528 + i * stride);
			tmp = tmp.or(src.and(MASK12).lanewise(VectorOperators.LSHL, 47));
			tmp.intoArray(output, 400 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12).and(MASK52);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 544 + i * stride);
			tmp = tmp.or(src.and(MASK7).lanewise(VectorOperators.LSHL, 52));
			tmp.intoArray(output, 528 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 7).and(MASK57);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 560 + i * stride);
			tmp = tmp.or(src.and(MASK2).lanewise(VectorOperators.LSHL, 57));
			tmp.intoArray(output, 656 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2).and(MASK59);
			tmp.intoArray(output, 784 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 61).and(MASK3);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 576 + i * stride);
			tmp = tmp.or(src.and(MASK56).lanewise(VectorOperators.LSHL, 3));
			tmp.intoArray(output, 912 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 56).and(MASK8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 592 + i * stride);
			tmp = tmp.or(src.and(MASK51).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 80 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 51).and(MASK13);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 608 + i * stride);
			tmp = tmp.or(src.and(MASK46).lanewise(VectorOperators.LSHL, 13));
			tmp.intoArray(output, 208 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 46).and(MASK18);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 624 + i * stride);
			tmp = tmp.or(src.and(MASK41).lanewise(VectorOperators.LSHL, 18));
			tmp.intoArray(output, 336 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 41).and(MASK23);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 640 + i * stride);
			tmp = tmp.or(src.and(MASK36).lanewise(VectorOperators.LSHL, 23));
			tmp.intoArray(output, 464 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 36).and(MASK28);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 656 + i * stride);
			tmp = tmp.or(src.and(MASK31).lanewise(VectorOperators.LSHL, 28));
			tmp.intoArray(output, 592 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 31).and(MASK33);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 672 + i * stride);
			tmp = tmp.or(src.and(MASK26).lanewise(VectorOperators.LSHL, 33));
			tmp.intoArray(output, 720 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 26).and(MASK38);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 688 + i * stride);
			tmp = tmp.or(src.and(MASK21).lanewise(VectorOperators.LSHL, 38));
			tmp.intoArray(output, 848 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 21).and(MASK43);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 704 + i * stride);
			tmp = tmp.or(src.and(MASK16).lanewise(VectorOperators.LSHL, 43));
			tmp.intoArray(output, 976 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK48);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 720 + i * stride);
			tmp = tmp.or(src.and(MASK11).lanewise(VectorOperators.LSHL, 48));
			tmp.intoArray(output, 48 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 11).and(MASK53);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 736 + i * stride);
			tmp = tmp.or(src.and(MASK6).lanewise(VectorOperators.LSHL, 53));
			tmp.intoArray(output, 176 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6).and(MASK58);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 752 + i * stride);
			tmp = tmp.or(src.and(MASK1).lanewise(VectorOperators.LSHL, 58));
			tmp.intoArray(output, 304 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 1).and(MASK59);
			tmp.intoArray(output, 432 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 60).and(MASK4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 768 + i * stride);
			tmp = tmp.or(src.and(MASK55).lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 560 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 55).and(MASK9);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 784 + i * stride);
			tmp = tmp.or(src.and(MASK50).lanewise(VectorOperators.LSHL, 9));
			tmp.intoArray(output, 688 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 50).and(MASK14);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 800 + i * stride);
			tmp = tmp.or(src.and(MASK45).lanewise(VectorOperators.LSHL, 14));
			tmp.intoArray(output, 816 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 45).and(MASK19);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 816 + i * stride);
			tmp = tmp.or(src.and(MASK40).lanewise(VectorOperators.LSHL, 19));
			tmp.intoArray(output, 944 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40).and(MASK24);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 832 + i * stride);
			tmp = tmp.or(src.and(MASK35).lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 112 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 35).and(MASK29);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 848 + i * stride);
			tmp = tmp.or(src.and(MASK30).lanewise(VectorOperators.LSHL, 29));
			tmp.intoArray(output, 240 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 30).and(MASK34);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 864 + i * stride);
			tmp = tmp.or(src.and(MASK25).lanewise(VectorOperators.LSHL, 34));
			tmp.intoArray(output, 368 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 25).and(MASK39);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 880 + i * stride);
			tmp = tmp.or(src.and(MASK20).lanewise(VectorOperators.LSHL, 39));
			tmp.intoArray(output, 496 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20).and(MASK44);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 896 + i * stride);
			tmp = tmp.or(src.and(MASK15).lanewise(VectorOperators.LSHL, 44));
			tmp.intoArray(output, 624 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 15).and(MASK49);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 912 + i * stride);
			tmp = tmp.or(src.and(MASK10).lanewise(VectorOperators.LSHL, 49));
			tmp.intoArray(output, 752 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10).and(MASK54);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 928 + i * stride);
			tmp = tmp.or(src.and(MASK5).lanewise(VectorOperators.LSHL, 54));
			tmp.intoArray(output, 880 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 5).and(MASK59);
			tmp.intoArray(output, 1008 + i * stride);
		}
	}

	public static void unpack60(long[] input, long[] output) {
		int stride = LongVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 64;
		for (int i = 0; i < 16 / stride; i++) {
			LongVector src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, i * stride);
			LongVector tmp;
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK60);
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 60).and(MASK4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 16 + i * stride);
			tmp = tmp.or(src.and(MASK56).lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 56).and(MASK8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 32 + i * stride);
			tmp = tmp.or(src.and(MASK52).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 52).and(MASK12);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 48 + i * stride);
			tmp = tmp.or(src.and(MASK48).lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 384 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48).and(MASK16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 64 + i * stride);
			tmp = tmp.or(src.and(MASK44).lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 512 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 44).and(MASK20);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 80 + i * stride);
			tmp = tmp.or(src.and(MASK40).lanewise(VectorOperators.LSHL, 20));
			tmp.intoArray(output, 640 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40).and(MASK24);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 96 + i * stride);
			tmp = tmp.or(src.and(MASK36).lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 768 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 36).and(MASK28);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 112 + i * stride);
			tmp = tmp.or(src.and(MASK32).lanewise(VectorOperators.LSHL, 28));
			tmp.intoArray(output, 896 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 128 + i * stride);
			tmp = tmp.or(src.and(MASK28).lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28).and(MASK36);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 144 + i * stride);
			tmp = tmp.or(src.and(MASK24).lanewise(VectorOperators.LSHL, 36));
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK40);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 160 + i * stride);
			tmp = tmp.or(src.and(MASK20).lanewise(VectorOperators.LSHL, 40));
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20).and(MASK44);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 176 + i * stride);
			tmp = tmp.or(src.and(MASK16).lanewise(VectorOperators.LSHL, 44));
			tmp.intoArray(output, 448 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK48);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 192 + i * stride);
			tmp = tmp.or(src.and(MASK12).lanewise(VectorOperators.LSHL, 48));
			tmp.intoArray(output, 576 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12).and(MASK52);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 208 + i * stride);
			tmp = tmp.or(src.and(MASK8).lanewise(VectorOperators.LSHL, 52));
			tmp.intoArray(output, 704 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK56);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 224 + i * stride);
			tmp = tmp.or(src.and(MASK4).lanewise(VectorOperators.LSHL, 56));
			tmp.intoArray(output, 832 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4).and(MASK60);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 240 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 60));
			tmp.intoArray(output, 960 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK60);
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 60).and(MASK4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 256 + i * stride);
			tmp = tmp.or(src.and(MASK56).lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 160 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 56).and(MASK8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 272 + i * stride);
			tmp = tmp.or(src.and(MASK52).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 288 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 52).and(MASK12);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 288 + i * stride);
			tmp = tmp.or(src.and(MASK48).lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 416 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48).and(MASK16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 304 + i * stride);
			tmp = tmp.or(src.and(MASK44).lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 544 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 44).and(MASK20);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 320 + i * stride);
			tmp = tmp.or(src.and(MASK40).lanewise(VectorOperators.LSHL, 20));
			tmp.intoArray(output, 672 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40).and(MASK24);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 336 + i * stride);
			tmp = tmp.or(src.and(MASK36).lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 800 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 36).and(MASK28);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 352 + i * stride);
			tmp = tmp.or(src.and(MASK32).lanewise(VectorOperators.LSHL, 28));
			tmp.intoArray(output, 928 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 368 + i * stride);
			tmp = tmp.or(src.and(MASK28).lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28).and(MASK36);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 384 + i * stride);
			tmp = tmp.or(src.and(MASK24).lanewise(VectorOperators.LSHL, 36));
			tmp.intoArray(output, 224 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK40);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 400 + i * stride);
			tmp = tmp.or(src.and(MASK20).lanewise(VectorOperators.LSHL, 40));
			tmp.intoArray(output, 352 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20).and(MASK44);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 416 + i * stride);
			tmp = tmp.or(src.and(MASK16).lanewise(VectorOperators.LSHL, 44));
			tmp.intoArray(output, 480 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK48);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 432 + i * stride);
			tmp = tmp.or(src.and(MASK12).lanewise(VectorOperators.LSHL, 48));
			tmp.intoArray(output, 608 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12).and(MASK52);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 448 + i * stride);
			tmp = tmp.or(src.and(MASK8).lanewise(VectorOperators.LSHL, 52));
			tmp.intoArray(output, 736 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK56);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 464 + i * stride);
			tmp = tmp.or(src.and(MASK4).lanewise(VectorOperators.LSHL, 56));
			tmp.intoArray(output, 864 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4).and(MASK60);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 480 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 60));
			tmp.intoArray(output, 992 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK60);
			tmp.intoArray(output, 16 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 60).and(MASK4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 496 + i * stride);
			tmp = tmp.or(src.and(MASK56).lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 144 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 56).and(MASK8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 512 + i * stride);
			tmp = tmp.or(src.and(MASK52).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 272 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 52).and(MASK12);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 528 + i * stride);
			tmp = tmp.or(src.and(MASK48).lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 400 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48).and(MASK16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 544 + i * stride);
			tmp = tmp.or(src.and(MASK44).lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 528 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 44).and(MASK20);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 560 + i * stride);
			tmp = tmp.or(src.and(MASK40).lanewise(VectorOperators.LSHL, 20));
			tmp.intoArray(output, 656 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40).and(MASK24);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 576 + i * stride);
			tmp = tmp.or(src.and(MASK36).lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 784 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 36).and(MASK28);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 592 + i * stride);
			tmp = tmp.or(src.and(MASK32).lanewise(VectorOperators.LSHL, 28));
			tmp.intoArray(output, 912 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 608 + i * stride);
			tmp = tmp.or(src.and(MASK28).lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 80 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28).and(MASK36);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 624 + i * stride);
			tmp = tmp.or(src.and(MASK24).lanewise(VectorOperators.LSHL, 36));
			tmp.intoArray(output, 208 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK40);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 640 + i * stride);
			tmp = tmp.or(src.and(MASK20).lanewise(VectorOperators.LSHL, 40));
			tmp.intoArray(output, 336 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20).and(MASK44);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 656 + i * stride);
			tmp = tmp.or(src.and(MASK16).lanewise(VectorOperators.LSHL, 44));
			tmp.intoArray(output, 464 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK48);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 672 + i * stride);
			tmp = tmp.or(src.and(MASK12).lanewise(VectorOperators.LSHL, 48));
			tmp.intoArray(output, 592 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12).and(MASK52);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 688 + i * stride);
			tmp = tmp.or(src.and(MASK8).lanewise(VectorOperators.LSHL, 52));
			tmp.intoArray(output, 720 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK56);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 704 + i * stride);
			tmp = tmp.or(src.and(MASK4).lanewise(VectorOperators.LSHL, 56));
			tmp.intoArray(output, 848 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4).and(MASK60);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 720 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 60));
			tmp.intoArray(output, 976 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK60);
			tmp.intoArray(output, 48 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 60).and(MASK4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 736 + i * stride);
			tmp = tmp.or(src.and(MASK56).lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 176 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 56).and(MASK8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 752 + i * stride);
			tmp = tmp.or(src.and(MASK52).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 304 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 52).and(MASK12);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 768 + i * stride);
			tmp = tmp.or(src.and(MASK48).lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 432 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48).and(MASK16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 784 + i * stride);
			tmp = tmp.or(src.and(MASK44).lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 560 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 44).and(MASK20);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 800 + i * stride);
			tmp = tmp.or(src.and(MASK40).lanewise(VectorOperators.LSHL, 20));
			tmp.intoArray(output, 688 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40).and(MASK24);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 816 + i * stride);
			tmp = tmp.or(src.and(MASK36).lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 816 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 36).and(MASK28);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 832 + i * stride);
			tmp = tmp.or(src.and(MASK32).lanewise(VectorOperators.LSHL, 28));
			tmp.intoArray(output, 944 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 848 + i * stride);
			tmp = tmp.or(src.and(MASK28).lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 112 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28).and(MASK36);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 864 + i * stride);
			tmp = tmp.or(src.and(MASK24).lanewise(VectorOperators.LSHL, 36));
			tmp.intoArray(output, 240 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK40);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 880 + i * stride);
			tmp = tmp.or(src.and(MASK20).lanewise(VectorOperators.LSHL, 40));
			tmp.intoArray(output, 368 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20).and(MASK44);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 896 + i * stride);
			tmp = tmp.or(src.and(MASK16).lanewise(VectorOperators.LSHL, 44));
			tmp.intoArray(output, 496 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK48);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 912 + i * stride);
			tmp = tmp.or(src.and(MASK12).lanewise(VectorOperators.LSHL, 48));
			tmp.intoArray(output, 624 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12).and(MASK52);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 928 + i * stride);
			tmp = tmp.or(src.and(MASK8).lanewise(VectorOperators.LSHL, 52));
			tmp.intoArray(output, 752 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK56);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 944 + i * stride);
			tmp = tmp.or(src.and(MASK4).lanewise(VectorOperators.LSHL, 56));
			tmp.intoArray(output, 880 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4).and(MASK60);
			tmp.intoArray(output, 1008 + i * stride);
		}
	}

	public static void unpack61(long[] input, long[] output) {
		int stride = LongVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 64;
		for (int i = 0; i < 16 / stride; i++) {
			LongVector src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, i * stride);
			LongVector tmp;
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK61);
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 61).and(MASK3);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 16 + i * stride);
			tmp = tmp.or(src.and(MASK58).lanewise(VectorOperators.LSHL, 3));
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 58).and(MASK6);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 32 + i * stride);
			tmp = tmp.or(src.and(MASK55).lanewise(VectorOperators.LSHL, 6));
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 55).and(MASK9);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 48 + i * stride);
			tmp = tmp.or(src.and(MASK52).lanewise(VectorOperators.LSHL, 9));
			tmp.intoArray(output, 384 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 52).and(MASK12);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 64 + i * stride);
			tmp = tmp.or(src.and(MASK49).lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 512 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 49).and(MASK15);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 80 + i * stride);
			tmp = tmp.or(src.and(MASK46).lanewise(VectorOperators.LSHL, 15));
			tmp.intoArray(output, 640 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 46).and(MASK18);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 96 + i * stride);
			tmp = tmp.or(src.and(MASK43).lanewise(VectorOperators.LSHL, 18));
			tmp.intoArray(output, 768 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 43).and(MASK21);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 112 + i * stride);
			tmp = tmp.or(src.and(MASK40).lanewise(VectorOperators.LSHL, 21));
			tmp.intoArray(output, 896 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40).and(MASK24);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 128 + i * stride);
			tmp = tmp.or(src.and(MASK37).lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 37).and(MASK27);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 144 + i * stride);
			tmp = tmp.or(src.and(MASK34).lanewise(VectorOperators.LSHL, 27));
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 34).and(MASK30);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 160 + i * stride);
			tmp = tmp.or(src.and(MASK31).lanewise(VectorOperators.LSHL, 30));
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 31).and(MASK33);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 176 + i * stride);
			tmp = tmp.or(src.and(MASK28).lanewise(VectorOperators.LSHL, 33));
			tmp.intoArray(output, 448 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28).and(MASK36);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 192 + i * stride);
			tmp = tmp.or(src.and(MASK25).lanewise(VectorOperators.LSHL, 36));
			tmp.intoArray(output, 576 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 25).and(MASK39);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 208 + i * stride);
			tmp = tmp.or(src.and(MASK22).lanewise(VectorOperators.LSHL, 39));
			tmp.intoArray(output, 704 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 22).and(MASK42);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 224 + i * stride);
			tmp = tmp.or(src.and(MASK19).lanewise(VectorOperators.LSHL, 42));
			tmp.intoArray(output, 832 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 19).and(MASK45);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 240 + i * stride);
			tmp = tmp.or(src.and(MASK16).lanewise(VectorOperators.LSHL, 45));
			tmp.intoArray(output, 960 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK48);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 256 + i * stride);
			tmp = tmp.or(src.and(MASK13).lanewise(VectorOperators.LSHL, 48));
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 13).and(MASK51);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 272 + i * stride);
			tmp = tmp.or(src.and(MASK10).lanewise(VectorOperators.LSHL, 51));
			tmp.intoArray(output, 160 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10).and(MASK54);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 288 + i * stride);
			tmp = tmp.or(src.and(MASK7).lanewise(VectorOperators.LSHL, 54));
			tmp.intoArray(output, 288 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 7).and(MASK57);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 304 + i * stride);
			tmp = tmp.or(src.and(MASK4).lanewise(VectorOperators.LSHL, 57));
			tmp.intoArray(output, 416 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4).and(MASK60);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 320 + i * stride);
			tmp = tmp.or(src.and(MASK1).lanewise(VectorOperators.LSHL, 60));
			tmp.intoArray(output, 544 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 1).and(MASK61);
			tmp.intoArray(output, 672 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 62).and(MASK2);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 336 + i * stride);
			tmp = tmp.or(src.and(MASK59).lanewise(VectorOperators.LSHL, 2));
			tmp.intoArray(output, 800 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 59).and(MASK5);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 352 + i * stride);
			tmp = tmp.or(src.and(MASK56).lanewise(VectorOperators.LSHL, 5));
			tmp.intoArray(output, 928 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 56).and(MASK8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 368 + i * stride);
			tmp = tmp.or(src.and(MASK53).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 53).and(MASK11);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 384 + i * stride);
			tmp = tmp.or(src.and(MASK50).lanewise(VectorOperators.LSHL, 11));
			tmp.intoArray(output, 224 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 50).and(MASK14);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 400 + i * stride);
			tmp = tmp.or(src.and(MASK47).lanewise(VectorOperators.LSHL, 14));
			tmp.intoArray(output, 352 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 47).and(MASK17);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 416 + i * stride);
			tmp = tmp.or(src.and(MASK44).lanewise(VectorOperators.LSHL, 17));
			tmp.intoArray(output, 480 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 44).and(MASK20);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 432 + i * stride);
			tmp = tmp.or(src.and(MASK41).lanewise(VectorOperators.LSHL, 20));
			tmp.intoArray(output, 608 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 41).and(MASK23);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 448 + i * stride);
			tmp = tmp.or(src.and(MASK38).lanewise(VectorOperators.LSHL, 23));
			tmp.intoArray(output, 736 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 38).and(MASK26);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 464 + i * stride);
			tmp = tmp.or(src.and(MASK35).lanewise(VectorOperators.LSHL, 26));
			tmp.intoArray(output, 864 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 35).and(MASK29);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 480 + i * stride);
			tmp = tmp.or(src.and(MASK32).lanewise(VectorOperators.LSHL, 29));
			tmp.intoArray(output, 992 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 496 + i * stride);
			tmp = tmp.or(src.and(MASK29).lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 16 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 29).and(MASK35);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 512 + i * stride);
			tmp = tmp.or(src.and(MASK26).lanewise(VectorOperators.LSHL, 35));
			tmp.intoArray(output, 144 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 26).and(MASK38);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 528 + i * stride);
			tmp = tmp.or(src.and(MASK23).lanewise(VectorOperators.LSHL, 38));
			tmp.intoArray(output, 272 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 23).and(MASK41);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 544 + i * stride);
			tmp = tmp.or(src.and(MASK20).lanewise(VectorOperators.LSHL, 41));
			tmp.intoArray(output, 400 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20).and(MASK44);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 560 + i * stride);
			tmp = tmp.or(src.and(MASK17).lanewise(VectorOperators.LSHL, 44));
			tmp.intoArray(output, 528 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 17).and(MASK47);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 576 + i * stride);
			tmp = tmp.or(src.and(MASK14).lanewise(VectorOperators.LSHL, 47));
			tmp.intoArray(output, 656 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14).and(MASK50);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 592 + i * stride);
			tmp = tmp.or(src.and(MASK11).lanewise(VectorOperators.LSHL, 50));
			tmp.intoArray(output, 784 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 11).and(MASK53);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 608 + i * stride);
			tmp = tmp.or(src.and(MASK8).lanewise(VectorOperators.LSHL, 53));
			tmp.intoArray(output, 912 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK56);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 624 + i * stride);
			tmp = tmp.or(src.and(MASK5).lanewise(VectorOperators.LSHL, 56));
			tmp.intoArray(output, 80 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 5).and(MASK59);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 640 + i * stride);
			tmp = tmp.or(src.and(MASK2).lanewise(VectorOperators.LSHL, 59));
			tmp.intoArray(output, 208 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2).and(MASK61);
			tmp.intoArray(output, 336 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 63).and(MASK1);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 656 + i * stride);
			tmp = tmp.or(src.and(MASK60).lanewise(VectorOperators.LSHL, 1));
			tmp.intoArray(output, 464 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 60).and(MASK4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 672 + i * stride);
			tmp = tmp.or(src.and(MASK57).lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 592 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 57).and(MASK7);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 688 + i * stride);
			tmp = tmp.or(src.and(MASK54).lanewise(VectorOperators.LSHL, 7));
			tmp.intoArray(output, 720 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 54).and(MASK10);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 704 + i * stride);
			tmp = tmp.or(src.and(MASK51).lanewise(VectorOperators.LSHL, 10));
			tmp.intoArray(output, 848 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 51).and(MASK13);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 720 + i * stride);
			tmp = tmp.or(src.and(MASK48).lanewise(VectorOperators.LSHL, 13));
			tmp.intoArray(output, 976 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48).and(MASK16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 736 + i * stride);
			tmp = tmp.or(src.and(MASK45).lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 48 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 45).and(MASK19);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 752 + i * stride);
			tmp = tmp.or(src.and(MASK42).lanewise(VectorOperators.LSHL, 19));
			tmp.intoArray(output, 176 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 42).and(MASK22);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 768 + i * stride);
			tmp = tmp.or(src.and(MASK39).lanewise(VectorOperators.LSHL, 22));
			tmp.intoArray(output, 304 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 39).and(MASK25);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 784 + i * stride);
			tmp = tmp.or(src.and(MASK36).lanewise(VectorOperators.LSHL, 25));
			tmp.intoArray(output, 432 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 36).and(MASK28);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 800 + i * stride);
			tmp = tmp.or(src.and(MASK33).lanewise(VectorOperators.LSHL, 28));
			tmp.intoArray(output, 560 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 33).and(MASK31);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 816 + i * stride);
			tmp = tmp.or(src.and(MASK30).lanewise(VectorOperators.LSHL, 31));
			tmp.intoArray(output, 688 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 30).and(MASK34);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 832 + i * stride);
			tmp = tmp.or(src.and(MASK27).lanewise(VectorOperators.LSHL, 34));
			tmp.intoArray(output, 816 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 27).and(MASK37);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 848 + i * stride);
			tmp = tmp.or(src.and(MASK24).lanewise(VectorOperators.LSHL, 37));
			tmp.intoArray(output, 944 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK40);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 864 + i * stride);
			tmp = tmp.or(src.and(MASK21).lanewise(VectorOperators.LSHL, 40));
			tmp.intoArray(output, 112 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 21).and(MASK43);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 880 + i * stride);
			tmp = tmp.or(src.and(MASK18).lanewise(VectorOperators.LSHL, 43));
			tmp.intoArray(output, 240 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 18).and(MASK46);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 896 + i * stride);
			tmp = tmp.or(src.and(MASK15).lanewise(VectorOperators.LSHL, 46));
			tmp.intoArray(output, 368 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 15).and(MASK49);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 912 + i * stride);
			tmp = tmp.or(src.and(MASK12).lanewise(VectorOperators.LSHL, 49));
			tmp.intoArray(output, 496 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12).and(MASK52);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 928 + i * stride);
			tmp = tmp.or(src.and(MASK9).lanewise(VectorOperators.LSHL, 52));
			tmp.intoArray(output, 624 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 9).and(MASK55);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 944 + i * stride);
			tmp = tmp.or(src.and(MASK6).lanewise(VectorOperators.LSHL, 55));
			tmp.intoArray(output, 752 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6).and(MASK58);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 960 + i * stride);
			tmp = tmp.or(src.and(MASK3).lanewise(VectorOperators.LSHL, 58));
			tmp.intoArray(output, 880 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 3).and(MASK61);
			tmp.intoArray(output, 1008 + i * stride);
		}
	}

	public static void unpack62(long[] input, long[] output) {
		int stride = LongVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 64;
		for (int i = 0; i < 16 / stride; i++) {
			LongVector src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, i * stride);
			LongVector tmp;
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK62);
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 62).and(MASK2);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 16 + i * stride);
			tmp = tmp.or(src.and(MASK60).lanewise(VectorOperators.LSHL, 2));
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 60).and(MASK4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 32 + i * stride);
			tmp = tmp.or(src.and(MASK58).lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 58).and(MASK6);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 48 + i * stride);
			tmp = tmp.or(src.and(MASK56).lanewise(VectorOperators.LSHL, 6));
			tmp.intoArray(output, 384 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 56).and(MASK8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 64 + i * stride);
			tmp = tmp.or(src.and(MASK54).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 512 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 54).and(MASK10);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 80 + i * stride);
			tmp = tmp.or(src.and(MASK52).lanewise(VectorOperators.LSHL, 10));
			tmp.intoArray(output, 640 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 52).and(MASK12);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 96 + i * stride);
			tmp = tmp.or(src.and(MASK50).lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 768 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 50).and(MASK14);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 112 + i * stride);
			tmp = tmp.or(src.and(MASK48).lanewise(VectorOperators.LSHL, 14));
			tmp.intoArray(output, 896 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48).and(MASK16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 128 + i * stride);
			tmp = tmp.or(src.and(MASK46).lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 46).and(MASK18);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 144 + i * stride);
			tmp = tmp.or(src.and(MASK44).lanewise(VectorOperators.LSHL, 18));
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 44).and(MASK20);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 160 + i * stride);
			tmp = tmp.or(src.and(MASK42).lanewise(VectorOperators.LSHL, 20));
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 42).and(MASK22);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 176 + i * stride);
			tmp = tmp.or(src.and(MASK40).lanewise(VectorOperators.LSHL, 22));
			tmp.intoArray(output, 448 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40).and(MASK24);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 192 + i * stride);
			tmp = tmp.or(src.and(MASK38).lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 576 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 38).and(MASK26);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 208 + i * stride);
			tmp = tmp.or(src.and(MASK36).lanewise(VectorOperators.LSHL, 26));
			tmp.intoArray(output, 704 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 36).and(MASK28);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 224 + i * stride);
			tmp = tmp.or(src.and(MASK34).lanewise(VectorOperators.LSHL, 28));
			tmp.intoArray(output, 832 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 34).and(MASK30);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 240 + i * stride);
			tmp = tmp.or(src.and(MASK32).lanewise(VectorOperators.LSHL, 30));
			tmp.intoArray(output, 960 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 256 + i * stride);
			tmp = tmp.or(src.and(MASK30).lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 30).and(MASK34);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 272 + i * stride);
			tmp = tmp.or(src.and(MASK28).lanewise(VectorOperators.LSHL, 34));
			tmp.intoArray(output, 160 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28).and(MASK36);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 288 + i * stride);
			tmp = tmp.or(src.and(MASK26).lanewise(VectorOperators.LSHL, 36));
			tmp.intoArray(output, 288 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 26).and(MASK38);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 304 + i * stride);
			tmp = tmp.or(src.and(MASK24).lanewise(VectorOperators.LSHL, 38));
			tmp.intoArray(output, 416 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK40);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 320 + i * stride);
			tmp = tmp.or(src.and(MASK22).lanewise(VectorOperators.LSHL, 40));
			tmp.intoArray(output, 544 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 22).and(MASK42);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 336 + i * stride);
			tmp = tmp.or(src.and(MASK20).lanewise(VectorOperators.LSHL, 42));
			tmp.intoArray(output, 672 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20).and(MASK44);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 352 + i * stride);
			tmp = tmp.or(src.and(MASK18).lanewise(VectorOperators.LSHL, 44));
			tmp.intoArray(output, 800 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 18).and(MASK46);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 368 + i * stride);
			tmp = tmp.or(src.and(MASK16).lanewise(VectorOperators.LSHL, 46));
			tmp.intoArray(output, 928 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK48);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 384 + i * stride);
			tmp = tmp.or(src.and(MASK14).lanewise(VectorOperators.LSHL, 48));
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14).and(MASK50);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 400 + i * stride);
			tmp = tmp.or(src.and(MASK12).lanewise(VectorOperators.LSHL, 50));
			tmp.intoArray(output, 224 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12).and(MASK52);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 416 + i * stride);
			tmp = tmp.or(src.and(MASK10).lanewise(VectorOperators.LSHL, 52));
			tmp.intoArray(output, 352 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10).and(MASK54);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 432 + i * stride);
			tmp = tmp.or(src.and(MASK8).lanewise(VectorOperators.LSHL, 54));
			tmp.intoArray(output, 480 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK56);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 448 + i * stride);
			tmp = tmp.or(src.and(MASK6).lanewise(VectorOperators.LSHL, 56));
			tmp.intoArray(output, 608 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6).and(MASK58);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 464 + i * stride);
			tmp = tmp.or(src.and(MASK4).lanewise(VectorOperators.LSHL, 58));
			tmp.intoArray(output, 736 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4).and(MASK60);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 480 + i * stride);
			tmp = tmp.or(src.and(MASK2).lanewise(VectorOperators.LSHL, 60));
			tmp.intoArray(output, 864 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2).and(MASK62);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 496 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 62));
			tmp.intoArray(output, 992 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK62);
			tmp.intoArray(output, 16 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 62).and(MASK2);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 512 + i * stride);
			tmp = tmp.or(src.and(MASK60).lanewise(VectorOperators.LSHL, 2));
			tmp.intoArray(output, 144 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 60).and(MASK4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 528 + i * stride);
			tmp = tmp.or(src.and(MASK58).lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 272 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 58).and(MASK6);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 544 + i * stride);
			tmp = tmp.or(src.and(MASK56).lanewise(VectorOperators.LSHL, 6));
			tmp.intoArray(output, 400 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 56).and(MASK8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 560 + i * stride);
			tmp = tmp.or(src.and(MASK54).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 528 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 54).and(MASK10);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 576 + i * stride);
			tmp = tmp.or(src.and(MASK52).lanewise(VectorOperators.LSHL, 10));
			tmp.intoArray(output, 656 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 52).and(MASK12);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 592 + i * stride);
			tmp = tmp.or(src.and(MASK50).lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 784 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 50).and(MASK14);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 608 + i * stride);
			tmp = tmp.or(src.and(MASK48).lanewise(VectorOperators.LSHL, 14));
			tmp.intoArray(output, 912 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48).and(MASK16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 624 + i * stride);
			tmp = tmp.or(src.and(MASK46).lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 80 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 46).and(MASK18);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 640 + i * stride);
			tmp = tmp.or(src.and(MASK44).lanewise(VectorOperators.LSHL, 18));
			tmp.intoArray(output, 208 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 44).and(MASK20);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 656 + i * stride);
			tmp = tmp.or(src.and(MASK42).lanewise(VectorOperators.LSHL, 20));
			tmp.intoArray(output, 336 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 42).and(MASK22);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 672 + i * stride);
			tmp = tmp.or(src.and(MASK40).lanewise(VectorOperators.LSHL, 22));
			tmp.intoArray(output, 464 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40).and(MASK24);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 688 + i * stride);
			tmp = tmp.or(src.and(MASK38).lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 592 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 38).and(MASK26);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 704 + i * stride);
			tmp = tmp.or(src.and(MASK36).lanewise(VectorOperators.LSHL, 26));
			tmp.intoArray(output, 720 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 36).and(MASK28);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 720 + i * stride);
			tmp = tmp.or(src.and(MASK34).lanewise(VectorOperators.LSHL, 28));
			tmp.intoArray(output, 848 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 34).and(MASK30);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 736 + i * stride);
			tmp = tmp.or(src.and(MASK32).lanewise(VectorOperators.LSHL, 30));
			tmp.intoArray(output, 976 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 752 + i * stride);
			tmp = tmp.or(src.and(MASK30).lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 48 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 30).and(MASK34);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 768 + i * stride);
			tmp = tmp.or(src.and(MASK28).lanewise(VectorOperators.LSHL, 34));
			tmp.intoArray(output, 176 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28).and(MASK36);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 784 + i * stride);
			tmp = tmp.or(src.and(MASK26).lanewise(VectorOperators.LSHL, 36));
			tmp.intoArray(output, 304 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 26).and(MASK38);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 800 + i * stride);
			tmp = tmp.or(src.and(MASK24).lanewise(VectorOperators.LSHL, 38));
			tmp.intoArray(output, 432 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK40);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 816 + i * stride);
			tmp = tmp.or(src.and(MASK22).lanewise(VectorOperators.LSHL, 40));
			tmp.intoArray(output, 560 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 22).and(MASK42);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 832 + i * stride);
			tmp = tmp.or(src.and(MASK20).lanewise(VectorOperators.LSHL, 42));
			tmp.intoArray(output, 688 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20).and(MASK44);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 848 + i * stride);
			tmp = tmp.or(src.and(MASK18).lanewise(VectorOperators.LSHL, 44));
			tmp.intoArray(output, 816 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 18).and(MASK46);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 864 + i * stride);
			tmp = tmp.or(src.and(MASK16).lanewise(VectorOperators.LSHL, 46));
			tmp.intoArray(output, 944 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK48);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 880 + i * stride);
			tmp = tmp.or(src.and(MASK14).lanewise(VectorOperators.LSHL, 48));
			tmp.intoArray(output, 112 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14).and(MASK50);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 896 + i * stride);
			tmp = tmp.or(src.and(MASK12).lanewise(VectorOperators.LSHL, 50));
			tmp.intoArray(output, 240 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12).and(MASK52);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 912 + i * stride);
			tmp = tmp.or(src.and(MASK10).lanewise(VectorOperators.LSHL, 52));
			tmp.intoArray(output, 368 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10).and(MASK54);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 928 + i * stride);
			tmp = tmp.or(src.and(MASK8).lanewise(VectorOperators.LSHL, 54));
			tmp.intoArray(output, 496 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK56);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 944 + i * stride);
			tmp = tmp.or(src.and(MASK6).lanewise(VectorOperators.LSHL, 56));
			tmp.intoArray(output, 624 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6).and(MASK58);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 960 + i * stride);
			tmp = tmp.or(src.and(MASK4).lanewise(VectorOperators.LSHL, 58));
			tmp.intoArray(output, 752 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4).and(MASK60);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 976 + i * stride);
			tmp = tmp.or(src.and(MASK2).lanewise(VectorOperators.LSHL, 60));
			tmp.intoArray(output, 880 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2).and(MASK62);
			tmp.intoArray(output, 1008 + i * stride);
		}
	}

	public static void unpack63(long[] input, long[] output) {
		int stride = LongVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 64;
		for (int i = 0; i < 16 / stride; i++) {
			LongVector src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, i * stride);
			LongVector tmp;
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK63);
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 63).and(MASK1);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 16 + i * stride);
			tmp = tmp.or(src.and(MASK62).lanewise(VectorOperators.LSHL, 1));
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 62).and(MASK2);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 32 + i * stride);
			tmp = tmp.or(src.and(MASK61).lanewise(VectorOperators.LSHL, 2));
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 61).and(MASK3);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 48 + i * stride);
			tmp = tmp.or(src.and(MASK60).lanewise(VectorOperators.LSHL, 3));
			tmp.intoArray(output, 384 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 60).and(MASK4);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 64 + i * stride);
			tmp = tmp.or(src.and(MASK59).lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 512 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 59).and(MASK5);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 80 + i * stride);
			tmp = tmp.or(src.and(MASK58).lanewise(VectorOperators.LSHL, 5));
			tmp.intoArray(output, 640 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 58).and(MASK6);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 96 + i * stride);
			tmp = tmp.or(src.and(MASK57).lanewise(VectorOperators.LSHL, 6));
			tmp.intoArray(output, 768 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 57).and(MASK7);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 112 + i * stride);
			tmp = tmp.or(src.and(MASK56).lanewise(VectorOperators.LSHL, 7));
			tmp.intoArray(output, 896 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 56).and(MASK8);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 128 + i * stride);
			tmp = tmp.or(src.and(MASK55).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 55).and(MASK9);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 144 + i * stride);
			tmp = tmp.or(src.and(MASK54).lanewise(VectorOperators.LSHL, 9));
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 54).and(MASK10);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 160 + i * stride);
			tmp = tmp.or(src.and(MASK53).lanewise(VectorOperators.LSHL, 10));
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 53).and(MASK11);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 176 + i * stride);
			tmp = tmp.or(src.and(MASK52).lanewise(VectorOperators.LSHL, 11));
			tmp.intoArray(output, 448 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 52).and(MASK12);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 192 + i * stride);
			tmp = tmp.or(src.and(MASK51).lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 576 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 51).and(MASK13);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 208 + i * stride);
			tmp = tmp.or(src.and(MASK50).lanewise(VectorOperators.LSHL, 13));
			tmp.intoArray(output, 704 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 50).and(MASK14);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 224 + i * stride);
			tmp = tmp.or(src.and(MASK49).lanewise(VectorOperators.LSHL, 14));
			tmp.intoArray(output, 832 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 49).and(MASK15);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 240 + i * stride);
			tmp = tmp.or(src.and(MASK48).lanewise(VectorOperators.LSHL, 15));
			tmp.intoArray(output, 960 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 48).and(MASK16);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 256 + i * stride);
			tmp = tmp.or(src.and(MASK47).lanewise(VectorOperators.LSHL, 16));
			tmp.intoArray(output, 32 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 47).and(MASK17);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 272 + i * stride);
			tmp = tmp.or(src.and(MASK46).lanewise(VectorOperators.LSHL, 17));
			tmp.intoArray(output, 160 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 46).and(MASK18);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 288 + i * stride);
			tmp = tmp.or(src.and(MASK45).lanewise(VectorOperators.LSHL, 18));
			tmp.intoArray(output, 288 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 45).and(MASK19);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 304 + i * stride);
			tmp = tmp.or(src.and(MASK44).lanewise(VectorOperators.LSHL, 19));
			tmp.intoArray(output, 416 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 44).and(MASK20);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 320 + i * stride);
			tmp = tmp.or(src.and(MASK43).lanewise(VectorOperators.LSHL, 20));
			tmp.intoArray(output, 544 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 43).and(MASK21);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 336 + i * stride);
			tmp = tmp.or(src.and(MASK42).lanewise(VectorOperators.LSHL, 21));
			tmp.intoArray(output, 672 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 42).and(MASK22);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 352 + i * stride);
			tmp = tmp.or(src.and(MASK41).lanewise(VectorOperators.LSHL, 22));
			tmp.intoArray(output, 800 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 41).and(MASK23);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 368 + i * stride);
			tmp = tmp.or(src.and(MASK40).lanewise(VectorOperators.LSHL, 23));
			tmp.intoArray(output, 928 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 40).and(MASK24);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 384 + i * stride);
			tmp = tmp.or(src.and(MASK39).lanewise(VectorOperators.LSHL, 24));
			tmp.intoArray(output, 96 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 39).and(MASK25);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 400 + i * stride);
			tmp = tmp.or(src.and(MASK38).lanewise(VectorOperators.LSHL, 25));
			tmp.intoArray(output, 224 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 38).and(MASK26);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 416 + i * stride);
			tmp = tmp.or(src.and(MASK37).lanewise(VectorOperators.LSHL, 26));
			tmp.intoArray(output, 352 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 37).and(MASK27);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 432 + i * stride);
			tmp = tmp.or(src.and(MASK36).lanewise(VectorOperators.LSHL, 27));
			tmp.intoArray(output, 480 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 36).and(MASK28);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 448 + i * stride);
			tmp = tmp.or(src.and(MASK35).lanewise(VectorOperators.LSHL, 28));
			tmp.intoArray(output, 608 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 35).and(MASK29);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 464 + i * stride);
			tmp = tmp.or(src.and(MASK34).lanewise(VectorOperators.LSHL, 29));
			tmp.intoArray(output, 736 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 34).and(MASK30);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 480 + i * stride);
			tmp = tmp.or(src.and(MASK33).lanewise(VectorOperators.LSHL, 30));
			tmp.intoArray(output, 864 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 33).and(MASK31);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 496 + i * stride);
			tmp = tmp.or(src.and(MASK32).lanewise(VectorOperators.LSHL, 31));
			tmp.intoArray(output, 992 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 32).and(MASK32);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 512 + i * stride);
			tmp = tmp.or(src.and(MASK31).lanewise(VectorOperators.LSHL, 32));
			tmp.intoArray(output, 16 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 31).and(MASK33);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 528 + i * stride);
			tmp = tmp.or(src.and(MASK30).lanewise(VectorOperators.LSHL, 33));
			tmp.intoArray(output, 144 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 30).and(MASK34);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 544 + i * stride);
			tmp = tmp.or(src.and(MASK29).lanewise(VectorOperators.LSHL, 34));
			tmp.intoArray(output, 272 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 29).and(MASK35);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 560 + i * stride);
			tmp = tmp.or(src.and(MASK28).lanewise(VectorOperators.LSHL, 35));
			tmp.intoArray(output, 400 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 28).and(MASK36);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 576 + i * stride);
			tmp = tmp.or(src.and(MASK27).lanewise(VectorOperators.LSHL, 36));
			tmp.intoArray(output, 528 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 27).and(MASK37);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 592 + i * stride);
			tmp = tmp.or(src.and(MASK26).lanewise(VectorOperators.LSHL, 37));
			tmp.intoArray(output, 656 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 26).and(MASK38);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 608 + i * stride);
			tmp = tmp.or(src.and(MASK25).lanewise(VectorOperators.LSHL, 38));
			tmp.intoArray(output, 784 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 25).and(MASK39);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 624 + i * stride);
			tmp = tmp.or(src.and(MASK24).lanewise(VectorOperators.LSHL, 39));
			tmp.intoArray(output, 912 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 24).and(MASK40);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 640 + i * stride);
			tmp = tmp.or(src.and(MASK23).lanewise(VectorOperators.LSHL, 40));
			tmp.intoArray(output, 80 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 23).and(MASK41);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 656 + i * stride);
			tmp = tmp.or(src.and(MASK22).lanewise(VectorOperators.LSHL, 41));
			tmp.intoArray(output, 208 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 22).and(MASK42);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 672 + i * stride);
			tmp = tmp.or(src.and(MASK21).lanewise(VectorOperators.LSHL, 42));
			tmp.intoArray(output, 336 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 21).and(MASK43);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 688 + i * stride);
			tmp = tmp.or(src.and(MASK20).lanewise(VectorOperators.LSHL, 43));
			tmp.intoArray(output, 464 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 20).and(MASK44);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 704 + i * stride);
			tmp = tmp.or(src.and(MASK19).lanewise(VectorOperators.LSHL, 44));
			tmp.intoArray(output, 592 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 19).and(MASK45);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 720 + i * stride);
			tmp = tmp.or(src.and(MASK18).lanewise(VectorOperators.LSHL, 45));
			tmp.intoArray(output, 720 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 18).and(MASK46);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 736 + i * stride);
			tmp = tmp.or(src.and(MASK17).lanewise(VectorOperators.LSHL, 46));
			tmp.intoArray(output, 848 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 17).and(MASK47);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 752 + i * stride);
			tmp = tmp.or(src.and(MASK16).lanewise(VectorOperators.LSHL, 47));
			tmp.intoArray(output, 976 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 16).and(MASK48);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 768 + i * stride);
			tmp = tmp.or(src.and(MASK15).lanewise(VectorOperators.LSHL, 48));
			tmp.intoArray(output, 48 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 15).and(MASK49);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 784 + i * stride);
			tmp = tmp.or(src.and(MASK14).lanewise(VectorOperators.LSHL, 49));
			tmp.intoArray(output, 176 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14).and(MASK50);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 800 + i * stride);
			tmp = tmp.or(src.and(MASK13).lanewise(VectorOperators.LSHL, 50));
			tmp.intoArray(output, 304 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 13).and(MASK51);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 816 + i * stride);
			tmp = tmp.or(src.and(MASK12).lanewise(VectorOperators.LSHL, 51));
			tmp.intoArray(output, 432 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12).and(MASK52);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 832 + i * stride);
			tmp = tmp.or(src.and(MASK11).lanewise(VectorOperators.LSHL, 52));
			tmp.intoArray(output, 560 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 11).and(MASK53);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 848 + i * stride);
			tmp = tmp.or(src.and(MASK10).lanewise(VectorOperators.LSHL, 53));
			tmp.intoArray(output, 688 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10).and(MASK54);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 864 + i * stride);
			tmp = tmp.or(src.and(MASK9).lanewise(VectorOperators.LSHL, 54));
			tmp.intoArray(output, 816 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 9).and(MASK55);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 880 + i * stride);
			tmp = tmp.or(src.and(MASK8).lanewise(VectorOperators.LSHL, 55));
			tmp.intoArray(output, 944 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK56);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 896 + i * stride);
			tmp = tmp.or(src.and(MASK7).lanewise(VectorOperators.LSHL, 56));
			tmp.intoArray(output, 112 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 7).and(MASK57);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 912 + i * stride);
			tmp = tmp.or(src.and(MASK6).lanewise(VectorOperators.LSHL, 57));
			tmp.intoArray(output, 240 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6).and(MASK58);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 928 + i * stride);
			tmp = tmp.or(src.and(MASK5).lanewise(VectorOperators.LSHL, 58));
			tmp.intoArray(output, 368 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 5).and(MASK59);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 944 + i * stride);
			tmp = tmp.or(src.and(MASK4).lanewise(VectorOperators.LSHL, 59));
			tmp.intoArray(output, 496 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4).and(MASK60);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 960 + i * stride);
			tmp = tmp.or(src.and(MASK3).lanewise(VectorOperators.LSHL, 60));
			tmp.intoArray(output, 624 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 3).and(MASK61);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 976 + i * stride);
			tmp = tmp.or(src.and(MASK2).lanewise(VectorOperators.LSHL, 61));
			tmp.intoArray(output, 752 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2).and(MASK62);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 992 + i * stride);
			tmp = tmp.or(src.and(MASK1).lanewise(VectorOperators.LSHL, 62));
			tmp.intoArray(output, 880 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 1).and(MASK63);
			tmp.intoArray(output, 1008 + i * stride);
		}
	}

	public static void unpack64(long[] input, long[] output) {
		int stride = LongVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 64;
		for (int i = 0; i < 16 / stride; i++) {
			LongVector src;
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 0 + i * stride);
			src.intoArray(output, 0 + i * stride);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 16 + i * stride);
			src.intoArray(output, 128 + i * stride);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 32 + i * stride);
			src.intoArray(output, 256 + i * stride);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 48 + i * stride);
			src.intoArray(output, 384 + i * stride);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 64 + i * stride);
			src.intoArray(output, 512 + i * stride);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 80 + i * stride);
			src.intoArray(output, 640 + i * stride);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 96 + i * stride);
			src.intoArray(output, 768 + i * stride);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 112 + i * stride);
			src.intoArray(output, 896 + i * stride);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 128 + i * stride);
			src.intoArray(output, 64 + i * stride);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 144 + i * stride);
			src.intoArray(output, 192 + i * stride);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 160 + i * stride);
			src.intoArray(output, 320 + i * stride);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 176 + i * stride);
			src.intoArray(output, 448 + i * stride);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 192 + i * stride);
			src.intoArray(output, 576 + i * stride);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 208 + i * stride);
			src.intoArray(output, 704 + i * stride);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 224 + i * stride);
			src.intoArray(output, 832 + i * stride);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 240 + i * stride);
			src.intoArray(output, 960 + i * stride);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 256 + i * stride);
			src.intoArray(output, 32 + i * stride);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 272 + i * stride);
			src.intoArray(output, 160 + i * stride);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 288 + i * stride);
			src.intoArray(output, 288 + i * stride);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 304 + i * stride);
			src.intoArray(output, 416 + i * stride);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 320 + i * stride);
			src.intoArray(output, 544 + i * stride);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 336 + i * stride);
			src.intoArray(output, 672 + i * stride);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 352 + i * stride);
			src.intoArray(output, 800 + i * stride);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 368 + i * stride);
			src.intoArray(output, 928 + i * stride);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 384 + i * stride);
			src.intoArray(output, 96 + i * stride);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 400 + i * stride);
			src.intoArray(output, 224 + i * stride);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 416 + i * stride);
			src.intoArray(output, 352 + i * stride);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 432 + i * stride);
			src.intoArray(output, 480 + i * stride);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 448 + i * stride);
			src.intoArray(output, 608 + i * stride);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 464 + i * stride);
			src.intoArray(output, 736 + i * stride);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 480 + i * stride);
			src.intoArray(output, 864 + i * stride);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 496 + i * stride);
			src.intoArray(output, 992 + i * stride);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 512 + i * stride);
			src.intoArray(output, 16 + i * stride);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 528 + i * stride);
			src.intoArray(output, 144 + i * stride);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 544 + i * stride);
			src.intoArray(output, 272 + i * stride);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 560 + i * stride);
			src.intoArray(output, 400 + i * stride);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 576 + i * stride);
			src.intoArray(output, 528 + i * stride);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 592 + i * stride);
			src.intoArray(output, 656 + i * stride);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 608 + i * stride);
			src.intoArray(output, 784 + i * stride);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 624 + i * stride);
			src.intoArray(output, 912 + i * stride);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 640 + i * stride);
			src.intoArray(output, 80 + i * stride);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 656 + i * stride);
			src.intoArray(output, 208 + i * stride);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 672 + i * stride);
			src.intoArray(output, 336 + i * stride);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 688 + i * stride);
			src.intoArray(output, 464 + i * stride);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 704 + i * stride);
			src.intoArray(output, 592 + i * stride);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 720 + i * stride);
			src.intoArray(output, 720 + i * stride);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 736 + i * stride);
			src.intoArray(output, 848 + i * stride);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 752 + i * stride);
			src.intoArray(output, 976 + i * stride);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 768 + i * stride);
			src.intoArray(output, 48 + i * stride);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 784 + i * stride);
			src.intoArray(output, 176 + i * stride);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 800 + i * stride);
			src.intoArray(output, 304 + i * stride);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 816 + i * stride);
			src.intoArray(output, 432 + i * stride);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 832 + i * stride);
			src.intoArray(output, 560 + i * stride);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 848 + i * stride);
			src.intoArray(output, 688 + i * stride);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 864 + i * stride);
			src.intoArray(output, 816 + i * stride);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 880 + i * stride);
			src.intoArray(output, 944 + i * stride);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 896 + i * stride);
			src.intoArray(output, 112 + i * stride);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 912 + i * stride);
			src.intoArray(output, 240 + i * stride);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 928 + i * stride);
			src.intoArray(output, 368 + i * stride);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 944 + i * stride);
			src.intoArray(output, 496 + i * stride);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 960 + i * stride);
			src.intoArray(output, 624 + i * stride);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 976 + i * stride);
			src.intoArray(output, 752 + i * stride);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 992 + i * stride);
			src.intoArray(output, 880 + i * stride);
			src = LongVector.fromArray(LongVector.SPECIES_PREFERRED, input, 1008 + i * stride);
			src.intoArray(output, 1008 + i * stride);
		}
	}

	public static void unpack(long[] input, int width, long[] output) {
		switch (width) {
			case 0: unpack0(input, output); break;
			case 1: unpack1(input, output); break;
			case 2: unpack2(input, output); break;
			case 3: unpack3(input, output); break;
			case 4: unpack4(input, output); break;
			case 5: unpack5(input, output); break;
			case 6: unpack6(input, output); break;
			case 7: unpack7(input, output); break;
			case 8: unpack8(input, output); break;
			case 9: unpack9(input, output); break;
			case 10: unpack10(input, output); break;
			case 11: unpack11(input, output); break;
			case 12: unpack12(input, output); break;
			case 13: unpack13(input, output); break;
			case 14: unpack14(input, output); break;
			case 15: unpack15(input, output); break;
			case 16: unpack16(input, output); break;
			case 17: unpack17(input, output); break;
			case 18: unpack18(input, output); break;
			case 19: unpack19(input, output); break;
			case 20: unpack20(input, output); break;
			case 21: unpack21(input, output); break;
			case 22: unpack22(input, output); break;
			case 23: unpack23(input, output); break;
			case 24: unpack24(input, output); break;
			case 25: unpack25(input, output); break;
			case 26: unpack26(input, output); break;
			case 27: unpack27(input, output); break;
			case 28: unpack28(input, output); break;
			case 29: unpack29(input, output); break;
			case 30: unpack30(input, output); break;
			case 31: unpack31(input, output); break;
			case 32: unpack32(input, output); break;
			case 33: unpack33(input, output); break;
			case 34: unpack34(input, output); break;
			case 35: unpack35(input, output); break;
			case 36: unpack36(input, output); break;
			case 37: unpack37(input, output); break;
			case 38: unpack38(input, output); break;
			case 39: unpack39(input, output); break;
			case 40: unpack40(input, output); break;
			case 41: unpack41(input, output); break;
			case 42: unpack42(input, output); break;
			case 43: unpack43(input, output); break;
			case 44: unpack44(input, output); break;
			case 45: unpack45(input, output); break;
			case 46: unpack46(input, output); break;
			case 47: unpack47(input, output); break;
			case 48: unpack48(input, output); break;
			case 49: unpack49(input, output); break;
			case 50: unpack50(input, output); break;
			case 51: unpack51(input, output); break;
			case 52: unpack52(input, output); break;
			case 53: unpack53(input, output); break;
			case 54: unpack54(input, output); break;
			case 55: unpack55(input, output); break;
			case 56: unpack56(input, output); break;
			case 57: unpack57(input, output); break;
			case 58: unpack58(input, output); break;
			case 59: unpack59(input, output); break;
			case 60: unpack60(input, output); break;
			case 61: unpack61(input, output); break;
			case 62: unpack62(input, output); break;
			case 63: unpack63(input, output); break;
			case 64: unpack64(input, output); break;
			default: throw new IllegalArgumentException();
		}
	}
}
