package com.github.luohao.fastlanes.bitpack;

import java.util.Arrays;
import jdk.incubator.vector.ShortVector;
import jdk.incubator.vector.VectorOperators;

public class VectorShortPacker {
	public static final short MASK0 = (short)((1L << 0) - 1);

	public static final short MASK1 = (short)((1L << 1) - 1);

	public static final short MASK2 = (short)((1L << 2) - 1);

	public static final short MASK3 = (short)((1L << 3) - 1);

	public static final short MASK4 = (short)((1L << 4) - 1);

	public static final short MASK5 = (short)((1L << 5) - 1);

	public static final short MASK6 = (short)((1L << 6) - 1);

	public static final short MASK7 = (short)((1L << 7) - 1);

	public static final short MASK8 = (short)((1L << 8) - 1);

	public static final short MASK9 = (short)((1L << 9) - 1);

	public static final short MASK10 = (short)((1L << 10) - 1);

	public static final short MASK11 = (short)((1L << 11) - 1);

	public static final short MASK12 = (short)((1L << 12) - 1);

	public static final short MASK13 = (short)((1L << 13) - 1);

	public static final short MASK14 = (short)((1L << 14) - 1);

	public static final short MASK15 = (short)((1L << 15) - 1);

	public static void pack0(short[] input, short[] output) {
		int stride = ShortVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 16;
		for (int i = 0; i < 64 / stride; i++) {
		}
	}

	public static void pack1(short[] input, short[] output) {
		int stride = ShortVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 16;
		for (int i = 0; i < 64 / stride; i++) {
			ShortVector src;
			ShortVector tmp;
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 0 + i * stride);
			src = src.and(MASK1);
			tmp = src;
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 128 + i * stride);
			src = src.and(MASK1);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 1));
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 256 + i * stride);
			src = src.and(MASK1);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 2));
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 384 + i * stride);
			src = src.and(MASK1);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 3));
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 512 + i * stride);
			src = src.and(MASK1);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 4));
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 640 + i * stride);
			src = src.and(MASK1);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 5));
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 768 + i * stride);
			src = src.and(MASK1);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 6));
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 896 + i * stride);
			src = src.and(MASK1);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 7));
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 64 + i * stride);
			src = src.and(MASK1);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 192 + i * stride);
			src = src.and(MASK1);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 9));
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 320 + i * stride);
			src = src.and(MASK1);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 10));
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 448 + i * stride);
			src = src.and(MASK1);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 11));
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 576 + i * stride);
			src = src.and(MASK1);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 12));
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 704 + i * stride);
			src = src.and(MASK1);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 13));
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 832 + i * stride);
			src = src.and(MASK1);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 14));
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 960 + i * stride);
			src = src.and(MASK1);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 15));
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 1);
		}
	}

	public static void pack2(short[] input, short[] output) {
		int stride = ShortVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 16;
		for (int i = 0; i < 64 / stride; i++) {
			ShortVector src;
			ShortVector tmp;
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 0 + i * stride);
			src = src.and(MASK2);
			tmp = src;
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 128 + i * stride);
			src = src.and(MASK2);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 2));
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 256 + i * stride);
			src = src.and(MASK2);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 4));
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 384 + i * stride);
			src = src.and(MASK2);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 6));
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 512 + i * stride);
			src = src.and(MASK2);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 640 + i * stride);
			src = src.and(MASK2);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 10));
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 768 + i * stride);
			src = src.and(MASK2);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 12));
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 896 + i * stride);
			src = src.and(MASK2);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 14));
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 64 + i * stride);
			src = src.and(MASK2);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 192 + i * stride);
			src = src.and(MASK2);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 2));
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 320 + i * stride);
			src = src.and(MASK2);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 4));
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 448 + i * stride);
			src = src.and(MASK2);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 6));
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 576 + i * stride);
			src = src.and(MASK2);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 704 + i * stride);
			src = src.and(MASK2);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 10));
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 832 + i * stride);
			src = src.and(MASK2);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 12));
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 960 + i * stride);
			src = src.and(MASK2);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 14));
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2);
		}
	}

	public static void pack3(short[] input, short[] output) {
		int stride = ShortVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 16;
		for (int i = 0; i < 64 / stride; i++) {
			ShortVector src;
			ShortVector tmp;
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 0 + i * stride);
			src = src.and(MASK3);
			tmp = src;
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 128 + i * stride);
			src = src.and(MASK3);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 3));
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 256 + i * stride);
			src = src.and(MASK3);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 6));
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 384 + i * stride);
			src = src.and(MASK3);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 9));
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 512 + i * stride);
			src = src.and(MASK3);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 12));
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 640 + i * stride);
			src = src.and(MASK3);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 15));
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 1);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 768 + i * stride);
			src = src.and(MASK3);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 2));
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 896 + i * stride);
			src = src.and(MASK3);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 5));
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 64 + i * stride);
			src = src.and(MASK3);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 192 + i * stride);
			src = src.and(MASK3);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 11));
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 320 + i * stride);
			src = src.and(MASK3);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 14));
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 448 + i * stride);
			src = src.and(MASK3);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 1));
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 576 + i * stride);
			src = src.and(MASK3);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 4));
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 704 + i * stride);
			src = src.and(MASK3);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 7));
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 832 + i * stride);
			src = src.and(MASK3);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 10));
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 960 + i * stride);
			src = src.and(MASK3);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 13));
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 3);
		}
	}

	public static void pack4(short[] input, short[] output) {
		int stride = ShortVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 16;
		for (int i = 0; i < 64 / stride; i++) {
			ShortVector src;
			ShortVector tmp;
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 0 + i * stride);
			src = src.and(MASK4);
			tmp = src;
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 128 + i * stride);
			src = src.and(MASK4);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 4));
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 256 + i * stride);
			src = src.and(MASK4);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 384 + i * stride);
			src = src.and(MASK4);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 512 + i * stride);
			src = src.and(MASK4);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 640 + i * stride);
			src = src.and(MASK4);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 4));
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 768 + i * stride);
			src = src.and(MASK4);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 896 + i * stride);
			src = src.and(MASK4);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 64 + i * stride);
			src = src.and(MASK4);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 192 + i * stride);
			src = src.and(MASK4);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 4));
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 320 + i * stride);
			src = src.and(MASK4);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 448 + i * stride);
			src = src.and(MASK4);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 576 + i * stride);
			src = src.and(MASK4);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 704 + i * stride);
			src = src.and(MASK4);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 4));
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 832 + i * stride);
			src = src.and(MASK4);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 960 + i * stride);
			src = src.and(MASK4);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4);
		}
	}

	public static void pack5(short[] input, short[] output) {
		int stride = ShortVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 16;
		for (int i = 0; i < 64 / stride; i++) {
			ShortVector src;
			ShortVector tmp;
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 0 + i * stride);
			src = src.and(MASK5);
			tmp = src;
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 128 + i * stride);
			src = src.and(MASK5);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 5));
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 256 + i * stride);
			src = src.and(MASK5);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 10));
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 384 + i * stride);
			src = src.and(MASK5);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 15));
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 1);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 512 + i * stride);
			src = src.and(MASK5);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 4));
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 640 + i * stride);
			src = src.and(MASK5);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 9));
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 768 + i * stride);
			src = src.and(MASK5);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 14));
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 896 + i * stride);
			src = src.and(MASK5);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 3));
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 64 + i * stride);
			src = src.and(MASK5);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 192 + i * stride);
			src = src.and(MASK5);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 13));
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 3);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 320 + i * stride);
			src = src.and(MASK5);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 2));
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 448 + i * stride);
			src = src.and(MASK5);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 7));
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 576 + i * stride);
			src = src.and(MASK5);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 704 + i * stride);
			src = src.and(MASK5);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 1));
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 832 + i * stride);
			src = src.and(MASK5);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 6));
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 960 + i * stride);
			src = src.and(MASK5);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 11));
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 5);
		}
	}

	public static void pack6(short[] input, short[] output) {
		int stride = ShortVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 16;
		for (int i = 0; i < 64 / stride; i++) {
			ShortVector src;
			ShortVector tmp;
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 0 + i * stride);
			src = src.and(MASK6);
			tmp = src;
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 128 + i * stride);
			src = src.and(MASK6);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 6));
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 256 + i * stride);
			src = src.and(MASK6);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 384 + i * stride);
			src = src.and(MASK6);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 2));
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 512 + i * stride);
			src = src.and(MASK6);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 640 + i * stride);
			src = src.and(MASK6);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 14));
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 768 + i * stride);
			src = src.and(MASK6);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 4));
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 896 + i * stride);
			src = src.and(MASK6);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 10));
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 64 + i * stride);
			src = src.and(MASK6);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 192 + i * stride);
			src = src.and(MASK6);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 6));
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 320 + i * stride);
			src = src.and(MASK6);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 448 + i * stride);
			src = src.and(MASK6);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 2));
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 576 + i * stride);
			src = src.and(MASK6);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 704 + i * stride);
			src = src.and(MASK6);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 14));
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 832 + i * stride);
			src = src.and(MASK6);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 4));
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 960 + i * stride);
			src = src.and(MASK6);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 10));
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6);
		}
	}

	public static void pack7(short[] input, short[] output) {
		int stride = ShortVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 16;
		for (int i = 0; i < 64 / stride; i++) {
			ShortVector src;
			ShortVector tmp;
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 0 + i * stride);
			src = src.and(MASK7);
			tmp = src;
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 128 + i * stride);
			src = src.and(MASK7);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 7));
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 256 + i * stride);
			src = src.and(MASK7);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 14));
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 384 + i * stride);
			src = src.and(MASK7);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 5));
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 512 + i * stride);
			src = src.and(MASK7);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 640 + i * stride);
			src = src.and(MASK7);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 3));
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 768 + i * stride);
			src = src.and(MASK7);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 10));
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 896 + i * stride);
			src = src.and(MASK7);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 1));
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 64 + i * stride);
			src = src.and(MASK7);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 192 + i * stride);
			src = src.and(MASK7);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 15));
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 1);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 320 + i * stride);
			src = src.and(MASK7);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 6));
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 448 + i * stride);
			src = src.and(MASK7);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 13));
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 3);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 576 + i * stride);
			src = src.and(MASK7);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 4));
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 704 + i * stride);
			src = src.and(MASK7);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 11));
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 5);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 832 + i * stride);
			src = src.and(MASK7);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 2));
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 960 + i * stride);
			src = src.and(MASK7);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 9));
			tmp.intoArray(output, 384 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 7);
		}
	}

	public static void pack8(short[] input, short[] output) {
		int stride = ShortVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 16;
		for (int i = 0; i < 64 / stride; i++) {
			ShortVector src;
			ShortVector tmp;
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 0 + i * stride);
			src = src.and(MASK8);
			tmp = src;
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 128 + i * stride);
			src = src.and(MASK8);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 256 + i * stride);
			src = src.and(MASK8);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 384 + i * stride);
			src = src.and(MASK8);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 512 + i * stride);
			src = src.and(MASK8);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 640 + i * stride);
			src = src.and(MASK8);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 768 + i * stride);
			src = src.and(MASK8);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 896 + i * stride);
			src = src.and(MASK8);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 64 + i * stride);
			src = src.and(MASK8);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 192 + i * stride);
			src = src.and(MASK8);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 320 + i * stride);
			src = src.and(MASK8);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 448 + i * stride);
			src = src.and(MASK8);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 576 + i * stride);
			src = src.and(MASK8);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 704 + i * stride);
			src = src.and(MASK8);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 384 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 832 + i * stride);
			src = src.and(MASK8);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 960 + i * stride);
			src = src.and(MASK8);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 448 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
		}
	}

	public static void pack9(short[] input, short[] output) {
		int stride = ShortVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 16;
		for (int i = 0; i < 64 / stride; i++) {
			ShortVector src;
			ShortVector tmp;
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 0 + i * stride);
			src = src.and(MASK9);
			tmp = src;
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 128 + i * stride);
			src = src.and(MASK9);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 9));
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 7);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 256 + i * stride);
			src = src.and(MASK9);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 2));
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 384 + i * stride);
			src = src.and(MASK9);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 11));
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 5);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 512 + i * stride);
			src = src.and(MASK9);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 4));
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 640 + i * stride);
			src = src.and(MASK9);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 13));
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 3);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 768 + i * stride);
			src = src.and(MASK9);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 6));
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 896 + i * stride);
			src = src.and(MASK9);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 15));
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 1);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 64 + i * stride);
			src = src.and(MASK9);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 192 + i * stride);
			src = src.and(MASK9);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 1));
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 320 + i * stride);
			src = src.and(MASK9);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 10));
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 448 + i * stride);
			src = src.and(MASK9);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 3));
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 576 + i * stride);
			src = src.and(MASK9);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 384 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 704 + i * stride);
			src = src.and(MASK9);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 5));
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 832 + i * stride);
			src = src.and(MASK9);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 14));
			tmp.intoArray(output, 448 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 960 + i * stride);
			src = src.and(MASK9);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 7));
			tmp.intoArray(output, 512 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 9);
		}
	}

	public static void pack10(short[] input, short[] output) {
		int stride = ShortVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 16;
		for (int i = 0; i < 64 / stride; i++) {
			ShortVector src;
			ShortVector tmp;
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 0 + i * stride);
			src = src.and(MASK10);
			tmp = src;
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 128 + i * stride);
			src = src.and(MASK10);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 10));
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 256 + i * stride);
			src = src.and(MASK10);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 4));
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 384 + i * stride);
			src = src.and(MASK10);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 14));
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 512 + i * stride);
			src = src.and(MASK10);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 640 + i * stride);
			src = src.and(MASK10);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 2));
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 768 + i * stride);
			src = src.and(MASK10);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 896 + i * stride);
			src = src.and(MASK10);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 6));
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 64 + i * stride);
			src = src.and(MASK10);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 192 + i * stride);
			src = src.and(MASK10);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 10));
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 320 + i * stride);
			src = src.and(MASK10);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 4));
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 448 + i * stride);
			src = src.and(MASK10);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 14));
			tmp.intoArray(output, 384 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 576 + i * stride);
			src = src.and(MASK10);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 448 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 704 + i * stride);
			src = src.and(MASK10);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 2));
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 832 + i * stride);
			src = src.and(MASK10);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 512 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 960 + i * stride);
			src = src.and(MASK10);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 6));
			tmp.intoArray(output, 576 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10);
		}
	}

	public static void pack11(short[] input, short[] output) {
		int stride = ShortVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 16;
		for (int i = 0; i < 64 / stride; i++) {
			ShortVector src;
			ShortVector tmp;
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 0 + i * stride);
			src = src.and(MASK11);
			tmp = src;
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 128 + i * stride);
			src = src.and(MASK11);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 11));
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 5);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 256 + i * stride);
			src = src.and(MASK11);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 6));
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 384 + i * stride);
			src = src.and(MASK11);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 1));
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 512 + i * stride);
			src = src.and(MASK11);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 640 + i * stride);
			src = src.and(MASK11);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 7));
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 9);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 768 + i * stride);
			src = src.and(MASK11);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 2));
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 896 + i * stride);
			src = src.and(MASK11);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 13));
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 3);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 64 + i * stride);
			src = src.and(MASK11);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 192 + i * stride);
			src = src.and(MASK11);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 3));
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 320 + i * stride);
			src = src.and(MASK11);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 14));
			tmp.intoArray(output, 384 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 448 + i * stride);
			src = src.and(MASK11);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 9));
			tmp.intoArray(output, 448 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 7);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 576 + i * stride);
			src = src.and(MASK11);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 4));
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 704 + i * stride);
			src = src.and(MASK11);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 15));
			tmp.intoArray(output, 512 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 1);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 832 + i * stride);
			src = src.and(MASK11);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 10));
			tmp.intoArray(output, 576 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 960 + i * stride);
			src = src.and(MASK11);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 5));
			tmp.intoArray(output, 640 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 11);
		}
	}

	public static void pack12(short[] input, short[] output) {
		int stride = ShortVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 16;
		for (int i = 0; i < 64 / stride; i++) {
			ShortVector src;
			ShortVector tmp;
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 0 + i * stride);
			src = src.and(MASK12);
			tmp = src;
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 128 + i * stride);
			src = src.and(MASK12);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 256 + i * stride);
			src = src.and(MASK12);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 384 + i * stride);
			src = src.and(MASK12);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 512 + i * stride);
			src = src.and(MASK12);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 640 + i * stride);
			src = src.and(MASK12);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 768 + i * stride);
			src = src.and(MASK12);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 896 + i * stride);
			src = src.and(MASK12);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 64 + i * stride);
			src = src.and(MASK12);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 192 + i * stride);
			src = src.and(MASK12);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 384 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 320 + i * stride);
			src = src.and(MASK12);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 448 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 448 + i * stride);
			src = src.and(MASK12);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 512 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 576 + i * stride);
			src = src.and(MASK12);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 704 + i * stride);
			src = src.and(MASK12);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 576 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 832 + i * stride);
			src = src.and(MASK12);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 640 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 960 + i * stride);
			src = src.and(MASK12);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 704 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12);
		}
	}

	public static void pack13(short[] input, short[] output) {
		int stride = ShortVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 16;
		for (int i = 0; i < 64 / stride; i++) {
			ShortVector src;
			ShortVector tmp;
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 0 + i * stride);
			src = src.and(MASK13);
			tmp = src;
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 128 + i * stride);
			src = src.and(MASK13);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 13));
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 3);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 256 + i * stride);
			src = src.and(MASK13);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 10));
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 384 + i * stride);
			src = src.and(MASK13);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 7));
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 9);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 512 + i * stride);
			src = src.and(MASK13);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 640 + i * stride);
			src = src.and(MASK13);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 1));
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 768 + i * stride);
			src = src.and(MASK13);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 14));
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 896 + i * stride);
			src = src.and(MASK13);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 11));
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 5);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 64 + i * stride);
			src = src.and(MASK13);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 384 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 192 + i * stride);
			src = src.and(MASK13);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 5));
			tmp.intoArray(output, 448 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 11);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 320 + i * stride);
			src = src.and(MASK13);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 2));
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 448 + i * stride);
			src = src.and(MASK13);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 15));
			tmp.intoArray(output, 512 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 1);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 576 + i * stride);
			src = src.and(MASK13);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 576 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 704 + i * stride);
			src = src.and(MASK13);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 9));
			tmp.intoArray(output, 640 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 7);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 832 + i * stride);
			src = src.and(MASK13);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 6));
			tmp.intoArray(output, 704 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 960 + i * stride);
			src = src.and(MASK13);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 3));
			tmp.intoArray(output, 768 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 13);
		}
	}

	public static void pack14(short[] input, short[] output) {
		int stride = ShortVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 16;
		for (int i = 0; i < 64 / stride; i++) {
			ShortVector src;
			ShortVector tmp;
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 0 + i * stride);
			src = src.and(MASK14);
			tmp = src;
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 128 + i * stride);
			src = src.and(MASK14);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 14));
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 256 + i * stride);
			src = src.and(MASK14);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 384 + i * stride);
			src = src.and(MASK14);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 10));
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 512 + i * stride);
			src = src.and(MASK14);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 640 + i * stride);
			src = src.and(MASK14);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 6));
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 768 + i * stride);
			src = src.and(MASK14);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 896 + i * stride);
			src = src.and(MASK14);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 2));
			tmp.intoArray(output, 384 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 64 + i * stride);
			src = src.and(MASK14);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 0));
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 192 + i * stride);
			src = src.and(MASK14);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 14));
			tmp.intoArray(output, 448 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 320 + i * stride);
			src = src.and(MASK14);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 512 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 448 + i * stride);
			src = src.and(MASK14);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 10));
			tmp.intoArray(output, 576 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 576 + i * stride);
			src = src.and(MASK14);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 640 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 704 + i * stride);
			src = src.and(MASK14);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 6));
			tmp.intoArray(output, 704 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 832 + i * stride);
			src = src.and(MASK14);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 768 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 960 + i * stride);
			src = src.and(MASK14);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 2));
			tmp.intoArray(output, 832 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14);
		}
	}

	public static void pack15(short[] input, short[] output) {
		int stride = ShortVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 16;
		for (int i = 0; i < 64 / stride; i++) {
			ShortVector src;
			ShortVector tmp;
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 0 + i * stride);
			src = src.and(MASK15);
			tmp = src;
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 128 + i * stride);
			src = src.and(MASK15);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 15));
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 1);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 256 + i * stride);
			src = src.and(MASK15);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 14));
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 384 + i * stride);
			src = src.and(MASK15);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 13));
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 3);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 512 + i * stride);
			src = src.and(MASK15);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 640 + i * stride);
			src = src.and(MASK15);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 11));
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 5);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 768 + i * stride);
			src = src.and(MASK15);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 10));
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 896 + i * stride);
			src = src.and(MASK15);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 9));
			tmp.intoArray(output, 384 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 7);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 64 + i * stride);
			src = src.and(MASK15);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 448 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 192 + i * stride);
			src = src.and(MASK15);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 7));
			tmp.intoArray(output, 512 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 9);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 320 + i * stride);
			src = src.and(MASK15);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 6));
			tmp.intoArray(output, 576 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 448 + i * stride);
			src = src.and(MASK15);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 5));
			tmp.intoArray(output, 640 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 11);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 576 + i * stride);
			src = src.and(MASK15);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 704 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 704 + i * stride);
			src = src.and(MASK15);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 3));
			tmp.intoArray(output, 768 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 13);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 832 + i * stride);
			src = src.and(MASK15);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 2));
			tmp.intoArray(output, 832 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 960 + i * stride);
			src = src.and(MASK15);
			tmp = tmp.or(src.lanewise(VectorOperators.LSHL, 1));
			tmp.intoArray(output, 896 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 15);
		}
	}

	public static void pack16(short[] input, short[] output) {
		int stride = ShortVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 16;
		for (int i = 0; i < 64 / stride; i++) {
			ShortVector src;
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 0 + i * stride);
			src.intoArray(output, 0 + i * stride);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 128 + i * stride);
			src.intoArray(output, 64 + i * stride);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 256 + i * stride);
			src.intoArray(output, 128 + i * stride);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 384 + i * stride);
			src.intoArray(output, 192 + i * stride);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 512 + i * stride);
			src.intoArray(output, 256 + i * stride);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 640 + i * stride);
			src.intoArray(output, 320 + i * stride);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 768 + i * stride);
			src.intoArray(output, 384 + i * stride);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 896 + i * stride);
			src.intoArray(output, 448 + i * stride);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 64 + i * stride);
			src.intoArray(output, 512 + i * stride);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 192 + i * stride);
			src.intoArray(output, 576 + i * stride);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 320 + i * stride);
			src.intoArray(output, 640 + i * stride);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 448 + i * stride);
			src.intoArray(output, 704 + i * stride);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 576 + i * stride);
			src.intoArray(output, 768 + i * stride);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 704 + i * stride);
			src.intoArray(output, 832 + i * stride);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 832 + i * stride);
			src.intoArray(output, 896 + i * stride);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 960 + i * stride);
			src.intoArray(output, 960 + i * stride);
		}
	}

	public static void pack(short[] input, int width, short[] output) {
		switch (width) {
			case 0: pack0(input, output); break;
			case 1: pack1(input, output); break;
			case 2: pack2(input, output); break;
			case 3: pack3(input, output); break;
			case 4: pack4(input, output); break;
			case 5: pack5(input, output); break;
			case 6: pack6(input, output); break;
			case 7: pack7(input, output); break;
			case 8: pack8(input, output); break;
			case 9: pack9(input, output); break;
			case 10: pack10(input, output); break;
			case 11: pack11(input, output); break;
			case 12: pack12(input, output); break;
			case 13: pack13(input, output); break;
			case 14: pack14(input, output); break;
			case 15: pack15(input, output); break;
			case 16: pack16(input, output); break;
			default: throw new IllegalArgumentException();
		}
	}

	public static void unpack0(short[] input, short[] output) {
		int stride = ShortVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 16;
		for (int i = 0; i < 64 / stride; i++) {
			Arrays.fill(output, (short) 0);
		}
	}

	public static void unpack1(short[] input, short[] output) {
		int stride = ShortVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 16;
		for (int i = 0; i < 64 / stride; i++) {
			ShortVector src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, i * stride);
			ShortVector tmp;
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK1);
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 1).and(MASK1);
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2).and(MASK1);
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 3).and(MASK1);
			tmp.intoArray(output, 384 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4).and(MASK1);
			tmp.intoArray(output, 512 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 5).and(MASK1);
			tmp.intoArray(output, 640 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6).and(MASK1);
			tmp.intoArray(output, 768 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 7).and(MASK1);
			tmp.intoArray(output, 896 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK1);
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 9).and(MASK1);
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10).and(MASK1);
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 11).and(MASK1);
			tmp.intoArray(output, 448 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12).and(MASK1);
			tmp.intoArray(output, 576 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 13).and(MASK1);
			tmp.intoArray(output, 704 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14).and(MASK1);
			tmp.intoArray(output, 832 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 15).and(MASK1);
			tmp.intoArray(output, 960 + i * stride);
		}
	}

	public static void unpack2(short[] input, short[] output) {
		int stride = ShortVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 16;
		for (int i = 0; i < 64 / stride; i++) {
			ShortVector src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, i * stride);
			ShortVector tmp;
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK2);
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2).and(MASK2);
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4).and(MASK2);
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6).and(MASK2);
			tmp.intoArray(output, 384 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK2);
			tmp.intoArray(output, 512 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10).and(MASK2);
			tmp.intoArray(output, 640 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12).and(MASK2);
			tmp.intoArray(output, 768 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14).and(MASK2);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 64 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 2));
			tmp.intoArray(output, 896 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK2);
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2).and(MASK2);
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4).and(MASK2);
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6).and(MASK2);
			tmp.intoArray(output, 448 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK2);
			tmp.intoArray(output, 576 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10).and(MASK2);
			tmp.intoArray(output, 704 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12).and(MASK2);
			tmp.intoArray(output, 832 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14).and(MASK2);
			tmp.intoArray(output, 960 + i * stride);
		}
	}

	public static void unpack3(short[] input, short[] output) {
		int stride = ShortVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 16;
		for (int i = 0; i < 64 / stride; i++) {
			ShortVector src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, i * stride);
			ShortVector tmp;
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK3);
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 3).and(MASK3);
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6).and(MASK3);
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 9).and(MASK3);
			tmp.intoArray(output, 384 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12).and(MASK3);
			tmp.intoArray(output, 512 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 15).and(MASK1);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 64 + i * stride);
			tmp = tmp.or(src.and(MASK2).lanewise(VectorOperators.LSHL, 1));
			tmp.intoArray(output, 640 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2).and(MASK3);
			tmp.intoArray(output, 768 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 5).and(MASK3);
			tmp.intoArray(output, 896 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK3);
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 11).and(MASK3);
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14).and(MASK2);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 128 + i * stride);
			tmp = tmp.or(src.and(MASK1).lanewise(VectorOperators.LSHL, 2));
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 1).and(MASK3);
			tmp.intoArray(output, 448 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4).and(MASK3);
			tmp.intoArray(output, 576 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 7).and(MASK3);
			tmp.intoArray(output, 704 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10).and(MASK3);
			tmp.intoArray(output, 832 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 13).and(MASK3);
			tmp.intoArray(output, 960 + i * stride);
		}
	}

	public static void unpack4(short[] input, short[] output) {
		int stride = ShortVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 16;
		for (int i = 0; i < 64 / stride; i++) {
			ShortVector src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, i * stride);
			ShortVector tmp;
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK4);
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4).and(MASK4);
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK4);
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12).and(MASK4);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 64 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 384 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK4);
			tmp.intoArray(output, 512 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4).and(MASK4);
			tmp.intoArray(output, 640 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK4);
			tmp.intoArray(output, 768 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12).and(MASK4);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 128 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 896 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK4);
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4).and(MASK4);
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK4);
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12).and(MASK4);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 192 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 448 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK4);
			tmp.intoArray(output, 576 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4).and(MASK4);
			tmp.intoArray(output, 704 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK4);
			tmp.intoArray(output, 832 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12).and(MASK4);
			tmp.intoArray(output, 960 + i * stride);
		}
	}

	public static void unpack5(short[] input, short[] output) {
		int stride = ShortVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 16;
		for (int i = 0; i < 64 / stride; i++) {
			ShortVector src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, i * stride);
			ShortVector tmp;
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK5);
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 5).and(MASK5);
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10).and(MASK5);
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 15).and(MASK1);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 64 + i * stride);
			tmp = tmp.or(src.and(MASK4).lanewise(VectorOperators.LSHL, 1));
			tmp.intoArray(output, 384 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4).and(MASK5);
			tmp.intoArray(output, 512 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 9).and(MASK5);
			tmp.intoArray(output, 640 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14).and(MASK2);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 128 + i * stride);
			tmp = tmp.or(src.and(MASK3).lanewise(VectorOperators.LSHL, 2));
			tmp.intoArray(output, 768 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 3).and(MASK5);
			tmp.intoArray(output, 896 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK5);
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 13).and(MASK3);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 192 + i * stride);
			tmp = tmp.or(src.and(MASK2).lanewise(VectorOperators.LSHL, 3));
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2).and(MASK5);
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 7).and(MASK5);
			tmp.intoArray(output, 448 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12).and(MASK4);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 256 + i * stride);
			tmp = tmp.or(src.and(MASK1).lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 576 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 1).and(MASK5);
			tmp.intoArray(output, 704 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6).and(MASK5);
			tmp.intoArray(output, 832 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 11).and(MASK5);
			tmp.intoArray(output, 960 + i * stride);
		}
	}

	public static void unpack6(short[] input, short[] output) {
		int stride = ShortVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 16;
		for (int i = 0; i < 64 / stride; i++) {
			ShortVector src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, i * stride);
			ShortVector tmp;
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK6);
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6).and(MASK6);
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12).and(MASK4);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 64 + i * stride);
			tmp = tmp.or(src.and(MASK2).lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2).and(MASK6);
			tmp.intoArray(output, 384 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK6);
			tmp.intoArray(output, 512 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14).and(MASK2);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 128 + i * stride);
			tmp = tmp.or(src.and(MASK4).lanewise(VectorOperators.LSHL, 2));
			tmp.intoArray(output, 640 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4).and(MASK6);
			tmp.intoArray(output, 768 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10).and(MASK6);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 192 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 6));
			tmp.intoArray(output, 896 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK6);
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6).and(MASK6);
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12).and(MASK4);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 256 + i * stride);
			tmp = tmp.or(src.and(MASK2).lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2).and(MASK6);
			tmp.intoArray(output, 448 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK6);
			tmp.intoArray(output, 576 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14).and(MASK2);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 320 + i * stride);
			tmp = tmp.or(src.and(MASK4).lanewise(VectorOperators.LSHL, 2));
			tmp.intoArray(output, 704 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4).and(MASK6);
			tmp.intoArray(output, 832 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10).and(MASK6);
			tmp.intoArray(output, 960 + i * stride);
		}
	}

	public static void unpack7(short[] input, short[] output) {
		int stride = ShortVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 16;
		for (int i = 0; i < 64 / stride; i++) {
			ShortVector src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, i * stride);
			ShortVector tmp;
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK7);
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 7).and(MASK7);
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14).and(MASK2);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 64 + i * stride);
			tmp = tmp.or(src.and(MASK5).lanewise(VectorOperators.LSHL, 2));
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 5).and(MASK7);
			tmp.intoArray(output, 384 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12).and(MASK4);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 128 + i * stride);
			tmp = tmp.or(src.and(MASK3).lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 512 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 3).and(MASK7);
			tmp.intoArray(output, 640 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10).and(MASK6);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 192 + i * stride);
			tmp = tmp.or(src.and(MASK1).lanewise(VectorOperators.LSHL, 6));
			tmp.intoArray(output, 768 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 1).and(MASK7);
			tmp.intoArray(output, 896 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK7);
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 15).and(MASK1);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 256 + i * stride);
			tmp = tmp.or(src.and(MASK6).lanewise(VectorOperators.LSHL, 1));
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6).and(MASK7);
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 13).and(MASK3);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 320 + i * stride);
			tmp = tmp.or(src.and(MASK4).lanewise(VectorOperators.LSHL, 3));
			tmp.intoArray(output, 448 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4).and(MASK7);
			tmp.intoArray(output, 576 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 11).and(MASK5);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 384 + i * stride);
			tmp = tmp.or(src.and(MASK2).lanewise(VectorOperators.LSHL, 5));
			tmp.intoArray(output, 704 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2).and(MASK7);
			tmp.intoArray(output, 832 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 9).and(MASK7);
			tmp.intoArray(output, 960 + i * stride);
		}
	}

	public static void unpack8(short[] input, short[] output) {
		int stride = ShortVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 16;
		for (int i = 0; i < 64 / stride; i++) {
			ShortVector src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, i * stride);
			ShortVector tmp;
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK8);
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK8);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 64 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK8);
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK8);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 128 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 384 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK8);
			tmp.intoArray(output, 512 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK8);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 192 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 640 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK8);
			tmp.intoArray(output, 768 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK8);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 256 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 896 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK8);
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK8);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 320 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK8);
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK8);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 384 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 448 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK8);
			tmp.intoArray(output, 576 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK8);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 448 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 704 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK8);
			tmp.intoArray(output, 832 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK8);
			tmp.intoArray(output, 960 + i * stride);
		}
	}

	public static void unpack9(short[] input, short[] output) {
		int stride = ShortVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 16;
		for (int i = 0; i < 64 / stride; i++) {
			ShortVector src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, i * stride);
			ShortVector tmp;
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK9);
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 9).and(MASK7);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 64 + i * stride);
			tmp = tmp.or(src.and(MASK2).lanewise(VectorOperators.LSHL, 7));
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2).and(MASK9);
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 11).and(MASK5);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 128 + i * stride);
			tmp = tmp.or(src.and(MASK4).lanewise(VectorOperators.LSHL, 5));
			tmp.intoArray(output, 384 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4).and(MASK9);
			tmp.intoArray(output, 512 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 13).and(MASK3);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 192 + i * stride);
			tmp = tmp.or(src.and(MASK6).lanewise(VectorOperators.LSHL, 3));
			tmp.intoArray(output, 640 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6).and(MASK9);
			tmp.intoArray(output, 768 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 15).and(MASK1);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 256 + i * stride);
			tmp = tmp.or(src.and(MASK8).lanewise(VectorOperators.LSHL, 1));
			tmp.intoArray(output, 896 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK8);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 320 + i * stride);
			tmp = tmp.or(src.and(MASK1).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 1).and(MASK9);
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10).and(MASK6);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 384 + i * stride);
			tmp = tmp.or(src.and(MASK3).lanewise(VectorOperators.LSHL, 6));
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 3).and(MASK9);
			tmp.intoArray(output, 448 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12).and(MASK4);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 448 + i * stride);
			tmp = tmp.or(src.and(MASK5).lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 576 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 5).and(MASK9);
			tmp.intoArray(output, 704 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14).and(MASK2);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 512 + i * stride);
			tmp = tmp.or(src.and(MASK7).lanewise(VectorOperators.LSHL, 2));
			tmp.intoArray(output, 832 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 7).and(MASK9);
			tmp.intoArray(output, 960 + i * stride);
		}
	}

	public static void unpack10(short[] input, short[] output) {
		int stride = ShortVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 16;
		for (int i = 0; i < 64 / stride; i++) {
			ShortVector src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, i * stride);
			ShortVector tmp;
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK10);
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10).and(MASK6);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 64 + i * stride);
			tmp = tmp.or(src.and(MASK4).lanewise(VectorOperators.LSHL, 6));
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4).and(MASK10);
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14).and(MASK2);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 128 + i * stride);
			tmp = tmp.or(src.and(MASK8).lanewise(VectorOperators.LSHL, 2));
			tmp.intoArray(output, 384 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK8);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 192 + i * stride);
			tmp = tmp.or(src.and(MASK2).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 512 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2).and(MASK10);
			tmp.intoArray(output, 640 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12).and(MASK4);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 256 + i * stride);
			tmp = tmp.or(src.and(MASK6).lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 768 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6).and(MASK10);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 320 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 10));
			tmp.intoArray(output, 896 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK10);
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10).and(MASK6);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 384 + i * stride);
			tmp = tmp.or(src.and(MASK4).lanewise(VectorOperators.LSHL, 6));
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4).and(MASK10);
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14).and(MASK2);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 448 + i * stride);
			tmp = tmp.or(src.and(MASK8).lanewise(VectorOperators.LSHL, 2));
			tmp.intoArray(output, 448 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK8);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 512 + i * stride);
			tmp = tmp.or(src.and(MASK2).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 576 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2).and(MASK10);
			tmp.intoArray(output, 704 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12).and(MASK4);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 576 + i * stride);
			tmp = tmp.or(src.and(MASK6).lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 832 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6).and(MASK10);
			tmp.intoArray(output, 960 + i * stride);
		}
	}

	public static void unpack11(short[] input, short[] output) {
		int stride = ShortVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 16;
		for (int i = 0; i < 64 / stride; i++) {
			ShortVector src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, i * stride);
			ShortVector tmp;
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK11);
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 11).and(MASK5);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 64 + i * stride);
			tmp = tmp.or(src.and(MASK6).lanewise(VectorOperators.LSHL, 5));
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6).and(MASK10);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 128 + i * stride);
			tmp = tmp.or(src.and(MASK1).lanewise(VectorOperators.LSHL, 10));
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 1).and(MASK11);
			tmp.intoArray(output, 384 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12).and(MASK4);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 192 + i * stride);
			tmp = tmp.or(src.and(MASK7).lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 512 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 7).and(MASK9);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 256 + i * stride);
			tmp = tmp.or(src.and(MASK2).lanewise(VectorOperators.LSHL, 9));
			tmp.intoArray(output, 640 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2).and(MASK11);
			tmp.intoArray(output, 768 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 13).and(MASK3);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 320 + i * stride);
			tmp = tmp.or(src.and(MASK8).lanewise(VectorOperators.LSHL, 3));
			tmp.intoArray(output, 896 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK8);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 384 + i * stride);
			tmp = tmp.or(src.and(MASK3).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 3).and(MASK11);
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14).and(MASK2);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 448 + i * stride);
			tmp = tmp.or(src.and(MASK9).lanewise(VectorOperators.LSHL, 2));
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 9).and(MASK7);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 512 + i * stride);
			tmp = tmp.or(src.and(MASK4).lanewise(VectorOperators.LSHL, 7));
			tmp.intoArray(output, 448 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4).and(MASK11);
			tmp.intoArray(output, 576 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 15).and(MASK1);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 576 + i * stride);
			tmp = tmp.or(src.and(MASK10).lanewise(VectorOperators.LSHL, 1));
			tmp.intoArray(output, 704 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10).and(MASK6);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 640 + i * stride);
			tmp = tmp.or(src.and(MASK5).lanewise(VectorOperators.LSHL, 6));
			tmp.intoArray(output, 832 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 5).and(MASK11);
			tmp.intoArray(output, 960 + i * stride);
		}
	}

	public static void unpack12(short[] input, short[] output) {
		int stride = ShortVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 16;
		for (int i = 0; i < 64 / stride; i++) {
			ShortVector src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, i * stride);
			ShortVector tmp;
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK12);
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12).and(MASK4);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 64 + i * stride);
			tmp = tmp.or(src.and(MASK8).lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK8);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 128 + i * stride);
			tmp = tmp.or(src.and(MASK4).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4).and(MASK12);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 192 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 384 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK12);
			tmp.intoArray(output, 512 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12).and(MASK4);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 256 + i * stride);
			tmp = tmp.or(src.and(MASK8).lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 640 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK8);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 320 + i * stride);
			tmp = tmp.or(src.and(MASK4).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 768 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4).and(MASK12);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 384 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 896 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK12);
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12).and(MASK4);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 448 + i * stride);
			tmp = tmp.or(src.and(MASK8).lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK8);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 512 + i * stride);
			tmp = tmp.or(src.and(MASK4).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4).and(MASK12);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 576 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 448 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK12);
			tmp.intoArray(output, 576 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12).and(MASK4);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 640 + i * stride);
			tmp = tmp.or(src.and(MASK8).lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 704 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK8);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 704 + i * stride);
			tmp = tmp.or(src.and(MASK4).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 832 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4).and(MASK12);
			tmp.intoArray(output, 960 + i * stride);
		}
	}

	public static void unpack13(short[] input, short[] output) {
		int stride = ShortVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 16;
		for (int i = 0; i < 64 / stride; i++) {
			ShortVector src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, i * stride);
			ShortVector tmp;
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK13);
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 13).and(MASK3);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 64 + i * stride);
			tmp = tmp.or(src.and(MASK10).lanewise(VectorOperators.LSHL, 3));
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10).and(MASK6);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 128 + i * stride);
			tmp = tmp.or(src.and(MASK7).lanewise(VectorOperators.LSHL, 6));
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 7).and(MASK9);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 192 + i * stride);
			tmp = tmp.or(src.and(MASK4).lanewise(VectorOperators.LSHL, 9));
			tmp.intoArray(output, 384 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4).and(MASK12);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 256 + i * stride);
			tmp = tmp.or(src.and(MASK1).lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 512 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 1).and(MASK13);
			tmp.intoArray(output, 640 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14).and(MASK2);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 320 + i * stride);
			tmp = tmp.or(src.and(MASK11).lanewise(VectorOperators.LSHL, 2));
			tmp.intoArray(output, 768 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 11).and(MASK5);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 384 + i * stride);
			tmp = tmp.or(src.and(MASK8).lanewise(VectorOperators.LSHL, 5));
			tmp.intoArray(output, 896 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK8);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 448 + i * stride);
			tmp = tmp.or(src.and(MASK5).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 5).and(MASK11);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 512 + i * stride);
			tmp = tmp.or(src.and(MASK2).lanewise(VectorOperators.LSHL, 11));
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2).and(MASK13);
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 15).and(MASK1);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 576 + i * stride);
			tmp = tmp.or(src.and(MASK12).lanewise(VectorOperators.LSHL, 1));
			tmp.intoArray(output, 448 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12).and(MASK4);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 640 + i * stride);
			tmp = tmp.or(src.and(MASK9).lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 576 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 9).and(MASK7);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 704 + i * stride);
			tmp = tmp.or(src.and(MASK6).lanewise(VectorOperators.LSHL, 7));
			tmp.intoArray(output, 704 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6).and(MASK10);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 768 + i * stride);
			tmp = tmp.or(src.and(MASK3).lanewise(VectorOperators.LSHL, 10));
			tmp.intoArray(output, 832 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 3).and(MASK13);
			tmp.intoArray(output, 960 + i * stride);
		}
	}

	public static void unpack14(short[] input, short[] output) {
		int stride = ShortVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 16;
		for (int i = 0; i < 64 / stride; i++) {
			ShortVector src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, i * stride);
			ShortVector tmp;
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK14);
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14).and(MASK2);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 64 + i * stride);
			tmp = tmp.or(src.and(MASK12).lanewise(VectorOperators.LSHL, 2));
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12).and(MASK4);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 128 + i * stride);
			tmp = tmp.or(src.and(MASK10).lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10).and(MASK6);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 192 + i * stride);
			tmp = tmp.or(src.and(MASK8).lanewise(VectorOperators.LSHL, 6));
			tmp.intoArray(output, 384 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK8);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 256 + i * stride);
			tmp = tmp.or(src.and(MASK6).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 512 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6).and(MASK10);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 320 + i * stride);
			tmp = tmp.or(src.and(MASK4).lanewise(VectorOperators.LSHL, 10));
			tmp.intoArray(output, 640 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4).and(MASK12);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 384 + i * stride);
			tmp = tmp.or(src.and(MASK2).lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 768 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2).and(MASK14);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 448 + i * stride);
			tmp = tmp.or(src.and(MASK0).lanewise(VectorOperators.LSHL, 14));
			tmp.intoArray(output, 896 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK14);
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14).and(MASK2);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 512 + i * stride);
			tmp = tmp.or(src.and(MASK12).lanewise(VectorOperators.LSHL, 2));
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12).and(MASK4);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 576 + i * stride);
			tmp = tmp.or(src.and(MASK10).lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10).and(MASK6);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 640 + i * stride);
			tmp = tmp.or(src.and(MASK8).lanewise(VectorOperators.LSHL, 6));
			tmp.intoArray(output, 448 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK8);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 704 + i * stride);
			tmp = tmp.or(src.and(MASK6).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 576 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6).and(MASK10);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 768 + i * stride);
			tmp = tmp.or(src.and(MASK4).lanewise(VectorOperators.LSHL, 10));
			tmp.intoArray(output, 704 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4).and(MASK12);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 832 + i * stride);
			tmp = tmp.or(src.and(MASK2).lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 832 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2).and(MASK14);
			tmp.intoArray(output, 960 + i * stride);
		}
	}

	public static void unpack15(short[] input, short[] output) {
		int stride = ShortVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 16;
		for (int i = 0; i < 64 / stride; i++) {
			ShortVector src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, i * stride);
			ShortVector tmp;
			tmp = src.lanewise(VectorOperators.LSHR, 0).and(MASK15);
			tmp.intoArray(output, 0 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 15).and(MASK1);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 64 + i * stride);
			tmp = tmp.or(src.and(MASK14).lanewise(VectorOperators.LSHL, 1));
			tmp.intoArray(output, 128 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 14).and(MASK2);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 128 + i * stride);
			tmp = tmp.or(src.and(MASK13).lanewise(VectorOperators.LSHL, 2));
			tmp.intoArray(output, 256 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 13).and(MASK3);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 192 + i * stride);
			tmp = tmp.or(src.and(MASK12).lanewise(VectorOperators.LSHL, 3));
			tmp.intoArray(output, 384 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 12).and(MASK4);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 256 + i * stride);
			tmp = tmp.or(src.and(MASK11).lanewise(VectorOperators.LSHL, 4));
			tmp.intoArray(output, 512 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 11).and(MASK5);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 320 + i * stride);
			tmp = tmp.or(src.and(MASK10).lanewise(VectorOperators.LSHL, 5));
			tmp.intoArray(output, 640 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 10).and(MASK6);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 384 + i * stride);
			tmp = tmp.or(src.and(MASK9).lanewise(VectorOperators.LSHL, 6));
			tmp.intoArray(output, 768 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 9).and(MASK7);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 448 + i * stride);
			tmp = tmp.or(src.and(MASK8).lanewise(VectorOperators.LSHL, 7));
			tmp.intoArray(output, 896 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 8).and(MASK8);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 512 + i * stride);
			tmp = tmp.or(src.and(MASK7).lanewise(VectorOperators.LSHL, 8));
			tmp.intoArray(output, 64 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 7).and(MASK9);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 576 + i * stride);
			tmp = tmp.or(src.and(MASK6).lanewise(VectorOperators.LSHL, 9));
			tmp.intoArray(output, 192 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 6).and(MASK10);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 640 + i * stride);
			tmp = tmp.or(src.and(MASK5).lanewise(VectorOperators.LSHL, 10));
			tmp.intoArray(output, 320 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 5).and(MASK11);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 704 + i * stride);
			tmp = tmp.or(src.and(MASK4).lanewise(VectorOperators.LSHL, 11));
			tmp.intoArray(output, 448 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 4).and(MASK12);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 768 + i * stride);
			tmp = tmp.or(src.and(MASK3).lanewise(VectorOperators.LSHL, 12));
			tmp.intoArray(output, 576 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 3).and(MASK13);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 832 + i * stride);
			tmp = tmp.or(src.and(MASK2).lanewise(VectorOperators.LSHL, 13));
			tmp.intoArray(output, 704 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 2).and(MASK14);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 896 + i * stride);
			tmp = tmp.or(src.and(MASK1).lanewise(VectorOperators.LSHL, 14));
			tmp.intoArray(output, 832 + i * stride);
			tmp = src.lanewise(VectorOperators.LSHR, 1).and(MASK15);
			tmp.intoArray(output, 960 + i * stride);
		}
	}

	public static void unpack16(short[] input, short[] output) {
		int stride = ShortVector.SPECIES_PREFERRED.vectorByteSize() * Byte.SIZE / 16;
		for (int i = 0; i < 64 / stride; i++) {
			ShortVector src;
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 0 + i * stride);
			src.intoArray(output, 0 + i * stride);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 64 + i * stride);
			src.intoArray(output, 128 + i * stride);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 128 + i * stride);
			src.intoArray(output, 256 + i * stride);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 192 + i * stride);
			src.intoArray(output, 384 + i * stride);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 256 + i * stride);
			src.intoArray(output, 512 + i * stride);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 320 + i * stride);
			src.intoArray(output, 640 + i * stride);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 384 + i * stride);
			src.intoArray(output, 768 + i * stride);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 448 + i * stride);
			src.intoArray(output, 896 + i * stride);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 512 + i * stride);
			src.intoArray(output, 64 + i * stride);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 576 + i * stride);
			src.intoArray(output, 192 + i * stride);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 640 + i * stride);
			src.intoArray(output, 320 + i * stride);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 704 + i * stride);
			src.intoArray(output, 448 + i * stride);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 768 + i * stride);
			src.intoArray(output, 576 + i * stride);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 832 + i * stride);
			src.intoArray(output, 704 + i * stride);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 896 + i * stride);
			src.intoArray(output, 832 + i * stride);
			src = ShortVector.fromArray(ShortVector.SPECIES_PREFERRED, input, 960 + i * stride);
			src.intoArray(output, 960 + i * stride);
		}
	}

	public static void unpack(short[] input, int width, short[] output) {
		switch (width) {
			case 0: unpack0(input, output); break;
			case 1: unpack1(input, output); break;
			case 2: unpack2(input, output); break;
			case 3: unpack3(input, output); break;
			case 4: unpack4(input, output); break;
			case 5: unpack5(input, output); break;
			case 6: unpack6(input, output); break;
			case 7: unpack7(input, output); break;
			case 8: unpack8(input, output); break;
			case 9: unpack9(input, output); break;
			case 10: unpack10(input, output); break;
			case 11: unpack11(input, output); break;
			case 12: unpack12(input, output); break;
			case 13: unpack13(input, output); break;
			case 14: unpack14(input, output); break;
			case 15: unpack15(input, output); break;
			case 16: unpack16(input, output); break;
			default: throw new IllegalArgumentException();
		}
	}
}
